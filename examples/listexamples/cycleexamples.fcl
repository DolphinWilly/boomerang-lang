module Cycleexamples =

let noconflict (t:tree) : tree =
  {O = t, A = t, B = t}

(* No changes *)
sync with List.explode at (List.T Value)
   { O = {abcde},
     A = {abcde},
     B = {abcde} }
  = noconflict {abcde}

(* Single change on one side *)
sync with List.explode at (List.T Value)
   { O = {abcde},
     A = {deabc},
     B = {abcde} }
  = noconflict {deabc}

(* Single change on both sides *)
sync with List.explode at (List.T Value)
   { O = {abcdef},
     A = {fbcdea},
     B = {adcbef} }
  = noconflict {fdcbea}


(* More interesting change on both sides *)
sync with List.explode at (List.T Value)
   { O = {abcdef},
     A = {acbdef},
     B = {defabc} }
  = noconflict {defacb}



(* Conflicting + non-conflicting changes *)
sync with List.explode at (List.T Value)
   { O = {abcdef},
     A = {fbdcea},
     B = {abcdfe} }
  = noconflict {abdcef} 


(* Conflicting changes *)
sync with List.explode at (List.T Value)
   { O = {abcdef},
     A = {fbcdea},
     B = {abcdfe} }
  = noconflict {abcdef} 








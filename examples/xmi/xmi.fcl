module Xmi =
  
let CData : schema = { ! = {}}

let XMI_element_att : schema =
  { ?"xmi.id" = CData,
    ?"xmi.label" = CData,
    ?"xmi.uuid" = CData }

let XMI_link_att : schema =
  { ?"xml:link" = CData,
    ?"inline" = { "true"} | {"false" },
    ?"actuate" = { "show"} | {"user" },
    ?"href" = CData,
    ?"title" = CData,
    ?"show" = { "embed"} | {"replace"} | { "new" },
    ?"behavior" = CData,
    ?"xmi.idref" = CData,
    ?"xmi.uuidref" = CData}

let Model : schema =
  {"XMI.model" = ({`Xml.CHILDREN =  Any,
		    "xmi.name" = CData,
		    ?"xmi.version" = CData }
		    + XMI_link_att) }

let MetaModel : schema =
  {"XMI.metamodel" = ({`Xml.CHILDREN =  Any,
			"xmi.name" = CData,
			?"xmi.version" = CData }
			+ XMI_link_att) }

let MetaMetaModel : schema =
  {"XMI.metametamodel" = ({`Xml.CHILDREN =  Any,
			    "xmi.name" = CData,
			    ?"xmi.version" = CData } 
			    + XMI_link_att )}

let Documentation : schema =
  {"XMI.documentation" = { `Xml.CHILDREN =
			   List.T (
			   Xml.Pcdata |
			   { "XMI.owner" = Any } |
			   { "XMI.contact" = Any } |
			   { "XMI.longDescription" = Any } |
			   { "XMI.shortDescription" = Any } |
			   { "XMI.exporter" = Any } |
			   { "XMI.exporterVersion" = Any } |
			   { "XMI.notice" = Any })} }
 
let Header : schema = 
  let Models : schema =
    List.T {!\"XMI.documentation" = Any} in
(*     Append Model (Append MetaModel (List.T MetaMetaModel))  in *)
  {"XMI.header" = (* { `Xml.CHILDREN = *)
(* 		    (Documentation :: Models) | Models } *) Any }
    
let Extensions : schema = 
  {"XMI.extensions" = { `Xml.CHILDREN = List.T Any,
			"xmi.extender" = CData }}

let Extension : schema = 
  {"XMI.extension" = ({ `Xml.CHILDREN = List.T Any,
			"xmi.extender" = CData,
			"xmi.extenderID" = CData }
			+ XMI_link_att + XMI_element_att) }

let Delete : schema =
  {"XMI.delete" = 
    ({`Xml.CHILDREN = []} + XMI_element_att + XMI_link_att) }

let Add : schema =
  {"XMI.add" = 
    ({`Xml.CHILDREN = List.T Any, ?"xmi.position"= CData }
       + XMI_element_att
       + XMI_link_att)}

let Replace : schema =
  {"XMI.replace" = 
    ({ `Xml.CHILDREN = List.T Any, ?"xmi.position" = CData}
       + XMI_link_att
       + XMI_element_att)}

let Difference : schema =
  {"XMI.difference" = 
   (*  ({`Xml.CHILDREN = List.T (Difference | Delete | Add | Replace)} *)
(*        + XMI_element_att *)
(*        + XMI_link_att) *) Any}

let T (Contents : schema) : schema =
  List.T 
    ({ XMI = 
       { `Xml.CHILDREN = 
	 (List.T
	    (Header | 
	    {"XMI.content" = { `Xml.CHILDREN = Contents }} |
	    Difference |
	    Extensions)),
	 "xmi.version" = {"1.0"},
	 ?timestamp = CData,
	 ?verified = CData}
     })

let toFlattenedContents (header : tree) : lens =
  List.hd [];
  hoist "XMI";
  focus Xml.CHILDREN {"xmi.version" = {"1.0"}};
  Xml.flatten;
  focus "XMI.content" header;
  List.hd []

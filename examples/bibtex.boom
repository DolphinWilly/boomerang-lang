#{*}
(*******************************************************************************)
(* The Harmony Project                                                         *)
(* harmony@lists.seas.upenn.edu                                                *)
(*******************************************************************************)
(* Copyright (C) 2007 J. Nathan Foster and Benjamin C. Pierce                  *)
(*                                                                             *)
(* This library is free software; you can redistribute it and/or               *)
(* modify it under the terms of the GNU Lesser General Public                  *)
(* License as published by the Free Software Foundation; either                *)
(* version 2.1 of the License, or (at your option) any later version.          *)
(*                                                                             *)
(* This library is distributed in the hope that it will be useful,             *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of              *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU           *)
(* Lesser General Public License for more details.                             *)
(*******************************************************************************)
(* /boomerang/examples/bibtex.boom                                             *)
(* BiBTeX <-> RIS lens                                                         *)
(* $Id$ *)
(*******************************************************************************)

module Bibtex = 

(* ABBREVIATIONS *)
let mk_cn : lens -> canonizer = canonizer_of_lens 

(* GLOBALS *)
let ANY : regexp = [^]*

let NONE : regexp = []

let CHAR : regexp = [a-zA-Z. ]
let ALPHA : regexp = [a-zA-Z.]
let WS : regexp = [ \n]
let tag (s:string) : string = s . "  - "

let ANY_TAG : regexp = [A-Z] . [A-Z0-9] . /  - /

let no_tags (r:regexp) : regexp = 
  r - (ANY . ANY_TAG . ANY)

let ty_tag : string = tag "TY"
let au_tag : string = tag "AU"

(* AUTHORS *)
let author : lens = 
  let ANY_AND : regexp = ANY . /and/ . ANY in
  let string_no_ws : lens = copy (ALPHA+ - ANY_AND) in
  let string_ws : lens = copy ((ALPHA . CHAR* . ALPHA) - ANY_AND) in
  ins au_tag . 
  ( (string_no_ws . copy /, / . string_ws)
  | (string_ws . del / /) ~ (string_no_ws . ins ", "))

(* process a list of authors *)
let wsp_and : regexp = 
  WS+ . /and/ . WS+
let authors : lens = 
  author | author . ( default (wsp_and <-> "\n") " and " . author)+

(* unit tests *)
test author.get "Pierce, Benjamin C." = "AU  - Pierce, Benjamin C."
test author.get "Foster, J. Nathan" = "AU  - Foster, J. Nathan"
test author.get "J. Nathan Foster" = "AU  - Foster, J. Nathan"
test author.put "AU  - Foster, J. Nathan" into "Foster, John" = "Foster, J. Nathan"
test author.put "AU  - Foster, J. Nathan" into "J. Nathan Foster" = "J. Nathan Foster"
test authors.get
  "Aaron Bohannon and J. Nathan Foster and Benjamin C. Pierce" =
  "AU  - Bohannon, Aaron
  |AU  - Foster, J. Nathan
  |AU  - Pierce, Benjamin C."

test authors.get
  "Bohannon, Aaron and Foster, J. Nathan and Pierce, Benjamin C." = 
  "AU  - Bohannon, Aaron
  |AU  - Foster, J. Nathan
  |AU  - Pierce, Benjamin C."

test authors.get 
  "Bohannon, Aaron and Foster, J. Nathan and Benjamin C. Pierce" = 
  "AU  - Bohannon, Aaron
  |AU  - Foster, J. Nathan
  |AU  - Pierce, Benjamin C."

test authors.create 
  "AU  - Bohannon, Aaron
  |AU  - Foster, J. Nathan
  |AU  - Pierce, Benjamin C." = 
  "Bohannon, Aaron and Foster, J. Nathan and Pierce, Benjamin C."

test authors.get
    <<
        J. Nathan Foster 
               and Benjamin C. Pierce 
               and Alan Schmitt
    >> = 
    <<
        AU  - Foster, J. Nathan
        AU  - Pierce, Benjamin C.
        AU  - Schmitt, Alan
    >>

(* HELPER FUNCTIONS *)
let ws = [ \t]*

let to_lower : lens = 
  ( default ([aA] <-> "a") "a"
  | default ([bB] <-> "b") "b" 
  | default ([cC] <-> "c") "c" 
  | default ([dD] <-> "d") "d" 
  | default ([eE] <-> "e") "e" 
  | default ([fF] <-> "f") "f" 
  | default ([gG] <-> "g") "g" 
  | default ([hH] <-> "h") "h" 
  | default ([iI] <-> "i") "i" 
  | default ([jJ] <-> "j") "j"    
  | default ([kK] <-> "k") "k" 
  | default ([lL] <-> "l") "l" 
  | default ([mM] <-> "m") "m" 
  | default ([nN] <-> "n") "n" 
  | default ([oO] <-> "o") "o" 
  | default ([pP] <-> "p") "p" 
  | default ([qQ] <-> "q") "q" 
  | default ([rR] <-> "r") "r" 
  | default ([sS] <-> "s") "s" 
  | default ([tT] <-> "t") "t" 
  | default ([uU] <-> "u") "u" 
  | default ([vV] <-> "v") "v" 
  | default ([wW] <-> "w") "w" 
  | default ([xX] <-> "x") "x" 
  | default ([yY] <-> "y") "y" 
  | default ([zZ] <-> "z") "z" 
  | copy [^a-zA-Z@{}""] ) 

let lower : regexp = [^A-Z@{}"]     (* " *)
let upper : regexp = [A-Z] 
let lower_no_ws = [^A-Z@{}" \n\t]   (* " *)
let ws = [ \n\t]

let braces : lens = 
  del /{/ . 
    (ins "{" . copy upper . ins "}" | 
     copy lower)+ . 
  del /}/

test braces.get "{HeLlO}" = "{H}e{L}l{O}"
test braces.create "{F}oo" = "{Foo}"
test braces.create "ho{W}{D}{Y}" = "{hoWDY}"

(* how do we write precise types for canonizers? *)
let empty_cn : canonizer = mk_cn (copy //)

let first_cn : canonizer = mk_cn (ins "{" . copy upper . ins "}" | copy lower | braces)

test canonize first_cn "H" = "{H}"
test canonize first_cn "f" = "f"
test canonize first_cn "{HeLlO}" = "{H}e{L}l{O}"

(* NOTE: must be lazy star / dot *)
let rest_cn  : canonizer = (mk_cn (to_lower | braces))*
let title_can : canonizer = empty_cn | (first_cn . rest_cn)

test choose title_can "{L}{O}{O}{J}: {W}eaving {L}{O}{O}{M} into {J}ava" = 
                      "L{O}{O}{J}: {W}eaving {L}{O}{O}{M} into {J}ava"

let canonize_title : lens = 
  let l : lens = 
    ((copy lower_no_ws 
     | del /{/ . copy upper . del /}/
     | (ws+ <-> " ") . copy lower_no_ws
     | (ws+ <-> " ") . del /{/ . copy upper . del /}/)* )
      . (copy // | (ws+ <-> " ")) in 
    left_quot title_can l

test canonize_title.get "LOOJ: {W}eaving {LOOM} into {Java}" = 
"Looj: Weaving LOOM into Java"

test canonize_title.get "Looj: {W}eaving {LOOM} into {Java}" = 
"Looj: Weaving LOOM into Java"

test canonize_title.put "LOOJ: Weaving LOOM into Java" into "{LOOJ}: {Weaving LOOM into Java}" = 
"L{O}{O}{J}: {W}eaving {L}{O}{O}{M} into {J}ava"

test canonize_title.get 
  "A {L}ogic {Y}our {T}ypechecker {C}an {C}ount {O}n: {U}nordered {T}ree {T}ypes in {P}ractice" =
  "A Logic Your Typechecker Can Count On: Unordered Tree Types in Practice"

(* VALUES *)
let ws_nl = [ \t\n]*

let esc (s:string) = str ("\\" . s)
let bare_value = [A-Za-z0-9]+
let braced_value = no_tags ([^@{}\\] | esc "{" | esc "}")*
let quoted_value = no_tags ([^@"\\] | esc "\"")*            (* " *)

(* FIELDS *)
let start_field (lb:string) : regexp = ws* . /=/ . ws* . str lb
let end_field (rb:string) : regexp = str rb . [ ]* . /,/ . [ ]* . /\n/

let mk_template (lb:string) (l:lens) (rb:string) : lens = 
  del (start_field lb) . l . del (end_field rb)

(* I lifted this out to avoid re-calculating the NFAs for the
   preamble. I don't know if this saves us much because we still have
   to copy the (huge) Array.ts each time this function is invoked, but
   it can't hurt *)
let quoted_preamble = mk_template "\"" (copy quoted_value) "\""
let braced_preamble = mk_template "{" (copy braced_value) "}"
let bare_preamble = mk_template "" (copy bare_value) ""
let any_preamble = quoted_preamble | braced_preamble | bare_preamble 

let std_field_bibtex (o:regexp) = ws_nl . o . (ctype any_preamble)
let std_field_ris (r:string) (c:string) = (str r) . (atype any_preamble) . (str c)

(* str concatenations in atype of return are fine; we only need the check on o *)
let do_std_field (r:string) (o:regexp) (c:string) : lens = 
  (ws_nl <-> r) . del o . any_preamble . ins c
      
let mk_do_field 
  (r:string) 
  (lo:regexp -> lens) 
  (o:regexp) 
  (lb:string) 
  (l:lens) 
  (rb:string)
  (c:string) 
  : lens = 
  (ws_nl <-> r) . lo o . mk_template lb l rb . ins c

let field_bibtex (loo:lens) (l1:lens) (l2:lens) (l3:lens) : lens =
  let tmpl1 = mk_template "{" l1 "}" in
  let tmpl2 = mk_template "\"" l2 "\"" in
  let tmpl3 = mk_template "" l3 "" in
  let templates = tmpl1 | tmpl2 | tmpl3 in
  ws_nl . (ctype loo) . (ctype templates)

let field_ris (r:string) (loo:lens) (l1:lens) (l2:lens) (l3:lens) (c:string) : lens =
  let tmpl1 = mk_template "{" l1 "}" in
  let tmpl2 = mk_template "\"" l2 "\"" in
  let tmpl3 = mk_template "" l3 "" in
  let templates = tmpl1 | tmpl2 | tmpl3 in
  (str r) . (atype loo) . (atype templates) . (str c)

let uniform_field_bibtex (loo:lens) (l:lens) : lens = field_bibtex loo l l l
let uniform_field_ris (r:string) (loo:lens) (l:lens) (c:string) : lens =
  field_ris r loo l l l c

let do_field 
  (r:string) 
  (lo:regexp -> lens) 
  (o:regexp) 
  (l1:lens)
  (l2:lens)
  (l3:lens)
  (c:string) 
  : lens =
    mk_do_field r lo o "{" l1 "}" c
  | mk_do_field r lo o "\"" l2 "\"" c
  | mk_do_field r lo o "" l3 "" c

(* special processors for fields *)
let digits : regexp = [0-9]+

let page_value : lens =  
  ins (tag "SP") . copy [0-9]+ . ins "\n" . 
  del [\-]+ . 
  ins (tag "EP") . copy [0-9]+ 

let month_data : lens = 
    (/January/ | /jan/) <-> "01"
  | (/February/ | /feb/) <-> "02"
  | (/March/ | /mar/) <-> "03"
  | (/April/ | /apr/) <-> "04"
  | (/May/ | /may/) <-> "05"
  | (/June/ | /jun/) <-> "06"
  | (/July/ | /jul/) <-> "07"
  | (/August/ | /aug/) <-> "08"
  | (/September/ | /sep/) <-> "09"
  | (/October/ | /oct/) <-> "10"
  | (/November/ | /nov/) <-> "11"
  | (/December/ | /dec/) <-> "12"

let month_str : regexp = ctype month_data
let month_num : regexp = atype month_data

let dates_bibtex : lens = 
  (std_field_bibtex /year/) . (uniform_field_bibtex (del /month/) month_data)?

let dates_ris : regexp = "PY  - " . (no_tags bare_value) . "/" . month_num? . (str "//\n")

let do_dates : lens = 
  let do_year : lens = do_std_field (tag "PY") /year/ "/" in
  let do_month : lens = do_field "" del /month/ month_data month_data month_data "" in 
    (do_year . do_month?)
    . ins "//" 
    . ins "\n"

let title_bibtex : lens = 
  field_bibtex (del /title/) canonize_title canonize_title (copy bare_value)

let title_ris : lens =
  field_ris (tag "T1") (del /title/) 
            canonize_title canonize_title (copy bare_value)
            "\n"

let do_title : lens = 
  do_field (tag "T1") del /title/ 
           canonize_title canonize_title (copy bare_value) "\n"

let pages_bibtex : lens =
  field_bibtex (del /pages/) page_value page_value (copy NONE)

let pages_ris : lens =
  field_ris "" (del /pages/) page_value page_value (copy NONE) "\n"

let do_pages : lens = 
  do_field "" del /pages/ page_value page_value (copy NONE) "\n"


let non_field = ([a-zA-Z]+ - 
                  (/author/ | /title/ | /booktitle/ | /journal/ | /volume/ | 
                   /number/ | /note/ | /pages/ | /year/ | /month/ | /address/ |
                   /url/ | /pdf/ | /issn/ | /publisher/ | /abstract/ |
                   /series/))
let noteize (r:regexp) : lens = (copy r) . ins ": "

let field_to_note_bibtex : lens = 
  field_bibtex (noteize non_field)
               (copy braced_value) (copy quoted_value) (copy bare_value)

let field_to_note_ris : lens =
  field_ris (tag "M1") (noteize non_field)
            (copy braced_value) (copy quoted_value) (copy bare_value)
            "\n"

let do_field_to_note : lens = 
    do_field (tag "M1") noteize non_field 
             (copy braced_value) (copy quoted_value) (copy bare_value)
             "\n"
  
let field_ris_tnl (r:string) : lens = std_field_ris (tag r) "\n"

let non_author_fields 
  : lens = 
  ( do_title
  | do_dates
  | do_pages
  | do_std_field (tag "T2") /booktitle/ "\n" 
  | do_std_field (tag "JO") /journal/ "\n"
  | do_std_field (tag "VL") /volume/ "\n"
  | do_std_field (tag "IS") /number/ "\n"
  | do_std_field (tag "N1") /note/ "\n"
  | do_std_field (tag "AD") /address/ "\n" 
  | do_std_field (tag "UR") /url/ "\n"
  | do_std_field (tag "L1") /pdf/ "\n"
  | do_std_field (tag "SN") /issn/ "\n"
  | do_std_field (tag "PB") /publisher/ "\n"
  | do_std_field (tag "N2") /abstract/ "\n"
  | do_std_field (tag "T3") /series/ "\n"
  | do_field_to_note)* (* star is on the whole union *) 

let author_field : lens = 
  do_field "" del /author/ authors authors (copy NONE) "\n"

let fields_bibtex : regexp = (ctype author_field) . (ctype non_author_fields)
let fields_ris : regexp = (atype author_field) . (atype non_author_fields)

let fields : lens = 
  author_field . non_author_fields

let key_re : regexp = [^@{}"",\n ]+

let key_bibtex : regexp = key_re . /,/ . [ ]* . /\n/
let key_ris : regexp = (str (tag "ID")) . key_re

let do_key : lens 
  = ins (tag "ID") . key [^@{}"",\n ]+ . ((/,/ . [ ]* . /\n/) <-> "")

test do_key.get "dtts,\n" = "ID  - dtts"

let type_bibtex (b:string) : regexp = /@/ . (str b) . ws_nl . /{/
let type_ris (r:string) : regexp = /TY  - / . (str r)

(* trivially splittable -- everything is constant strings*)
let do_type (b:string) (r:string) : lens = 
  (/@/ . (str b) . ws_nl . /{/) <-> ("TY  - " . r)


let chunk_bibtex : lens =
  (type_bibtex "article"       | type_bibtex "inproceedings" |
   type_bibtex "misc"          | type_bibtex "incollection" |
   type_bibtex "mastersthesis" | type_bibtex "manual" |
   type_bibtex "phdthesis") .  (* includes the open { *)
  key_bibtex . fields_bibtex . ws_nl . /}/

let chunk_ris : lens =
  (type_ris "JOUR" | type_ris "CONF" | type_ris "UNPB" |
   type_ris "CHAP" | type_ris "THES" | type_ris "COMP") . "\n" .
  key_ris . "\n" . fields_ris . "ER  -\n\n"

let chunk : lens = 
  ( do_type "article" "JOUR" 
  | do_type "inproceedings" "CONF"
  | do_type "misc" "UNPB"
  | do_type "incollection" "CHAP"
  | do_type "mastersthesis" "THES"
  | do_type "manual" "COMP"
  | do_type "phdthesis" "THES")
  . ins "\n" . 
  do_key . ins "\n" . 
  fields . 
  ((ws_nl . /}/) <-> "ER  -\n\n")

let non_entry : regexp = 
  ANY - (ANY . 
         (/@/ . (/article/       | /inproceedings/ | /misc/ | /incollection/ |
                 /mastersthesis/ | /manual/        | /phdthesis/)) .
         ANY)

let del_non_entry : lens = 
  del non_entry
    
let ris : lens = 
    del_non_entry 
  | del_non_entry . <chunk> . (del_non_entry . <chunk>)* . del_non_entry

test ris.get 
<<

  @inproceedings{dtts,
     author = {J. Nathan Foster 
               and Benjamin C. Pierce 
               and Alan Schmitt},
     title =  {A {L}ogic {Y}our {T}ypechecker {C}an {C}ount {O}n: {U}nordered {T}ree {T}ypes in {P}ractice},
     booktitle = planx07,
     year =   2007,
     month = jan,
     pages = {80--90},
     conf=    {http://www.cis.upenn.edu/~jnfoster/papers/dtts.pdf},
     slides = {http://www.cis.upenn.edu/~jnfoster/papers/dtts-slides.pdf},
     jnf =    "yes",
   }
>> = 
<<
TY  - CONF
ID  - dtts
AU  - Foster, J. Nathan
AU  - Pierce, Benjamin C.
AU  - Schmitt, Alan
T1  - A Logic Your Typechecker Can Count On: Unordered Tree Types in Practice
T2  - planx07
PY  - 2007/01//
SP  - 80
EP  - 90
M1  - conf: http://www.cis.upenn.edu/~jnfoster/papers/dtts.pdf
M1  - slides: http://www.cis.upenn.edu/~jnfoster/papers/dtts-slides.pdf
M1  - jnf: yes
ER  -


>>

test ris.get 
"@article{Lenses-TOPLAS05,
| author = {J. Nathan Foster and Michael B. Greenwald and Jonathan T. Moore and Benjamin C. Pierce and Alan Schmitt},
| title = {Combinators for Bidirectional Tree Transformations: 
|          {A} Linguistic Approach to the View Update Problem},
| journal = {Transactions on Programming Languages and Systems (TOPLAS)},
| year = {2007},
| month = may,
| pages = {233--246},
| address = {New York, NY, USA},
|} 
|
|@inproceedings{SchemaSync-DBPL05,
|  author    = {Foster, J. Nathan and Greenwald, Michael B. and Kirkegaard, Christian and Pierce, Benjamin C. and Schmitt, Alan},
|  title     = {Exploiting Schemas in Data Synchronization},
|  booktitle = {Database Programming Languages (DBPL), Trondheim, Norway},
|  year      = {2005},
|  month     = {August}, 
|  pages     = {42--57},
|}
|" = 
<<
TY  - JOUR
ID  - Lenses-TOPLAS05
AU  - Foster, J. Nathan
AU  - Greenwald, Michael B.
AU  - Moore, Jonathan T.
AU  - Pierce, Benjamin C.
AU  - Schmitt, Alan
T1  - Combinators for bidirectional tree transformations: A linguistic approach to the view update problem
JO  - Transactions on Programming Languages and Systems (TOPLAS)
PY  - 2007/05//
SP  - 233
EP  - 246
AD  - New York, NY, USA
ER  -

TY  - CONF
ID  - SchemaSync-DBPL05
AU  - Foster, J. Nathan
AU  - Greenwald, Michael B.
AU  - Kirkegaard, Christian
AU  - Pierce, Benjamin C.
AU  - Schmitt, Alan
T1  - Exploiting schemas in data synchronization
T2  - Database Programming Languages (DBPL), Trondheim, Norway
PY  - 2005/08//
SP  - 42
EP  - 57
ER  -


>>
 

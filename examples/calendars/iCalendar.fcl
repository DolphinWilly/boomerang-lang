module ICalendar =
 open Prelude

(*-------------------------------------------------------------------------*)
(* Concrete Schemas *)

let List_Value : schema = List.T Value 

let Bool : schema = {"#true" = {}} | {"#false" = {}}

let XPList : schema = List.T ({"name" = Value, val = List_Value})
    
let Params : schema = 
  { ?(altrepparam, cnparam, cutypeparam, dirparam, encodingparam,
      fmttypeparam, langparam, partstatparam, rangeparam, reltypeparam,
      roleparam, sentbyparam, trigrelparam, valuetypeparam) = Value,
    ?(delfromparam,deltoparam, memberparam) = List_Value,
    ?rsvpparam = Bool,
    ?tzidparam = { global = Bool, val = Value},
    ?xplist = XPList
  }

let XPListPlusVal (T : schema) : schema = {val = T, ?xplist = XPList}

let XPListPlusVal_Value : schema = XPListPlusVal Value
    
let ParamsPlusVal (T : schema) : schema = {val = T, ?params = Params}

let ParamsPlusVal_Value : schema = ParamsPlusVal Value
	
schema ICalendar = [{calprops = CalProps, components = Any}] | []
    
and CalProps = 
  { (prodid,version) = XPListPlusVal_Value,
    ?(calscale,method) = XPListPlusVal_Value,
    ?xprop = XProp}
    
and XProp = List.T {"name" = Value, val = Value, ?params = Params}
    
and Components = 
  let Timezonec : schema = CompProp in
  List.T ({val = Eventc | Timezonec | Todoc , type = ({Eventc} | {Timezonec} | {Todoc})})
    
and Eventc = {props = CompProp, ?alarms = List_CompProp}

and Todoc = {props = CompProp, ?alarms = List_CompProp}
	
and CompProp = 
  { 
    ?(action,class,percent,priority,repeat,seq,status,transp,tzurl,uid,lurl) = XPListPlusVal_Value,
    ?(completed, created, lastmod) = XPListPlusVal DateTime,
    ?(attendee,comment,contact,related_to,tzname) = List.T (ParamsPlusVal_Value),
    ?(dtend,dtstamp,dtstart,due,recurid,trigger) = ParamsPlusVal DtPval,
    ?(tzoffsetto,tzoffsetfrom) = XPListPlusVal OffsetTime,
    ?(description,location,organizer,summary) = ParamsPlusVal_Value,
    ?attach = List.T (ParamsPlusVal ({ "AttUri" = Value } | { "AttBinary" = Value})),
    ?(categories,resources) = List.T (ParamsPlusVal (List_Value)),   
    ?(daylightc,standardc) = List_CompProp,
    ?duration = XPListPlusVal Duration,
    ?(exdate,rdate) = List.T (ParamsPlusVal (List.T DtPval)),
    ?(exrule,rrule) = List.T (XPListPlusVal Recur),
    ?geo = Geo,    
    ?rstatus = List.T RStatus,
    ?tzid = TzID,
    ?xprop = XProp
  }	

and List_CompProp = List.T CompProp

and DateTime = 
      { date = {(year,month,day) = Value},
        time = {(hour,minute,second, zulu) = Value}}
	
and DtPval = 
      { "DateTimeVal" = DateTime } |
      { "DateVal" = {(year,month,day) = Value}} |
      { "PeriodVal" = Period } |
      { "DurationVal" = Duration}
      
and Period = 
      { "PeriodExplicit" = { (start, "end") = DateTime }} |
      { "PeriodStart" = { start = DateTime, duration = Duration}}
	
and Duration = { negative = Bool, length = DurLength }

and DurLength = 
      { "DurWeek" = Value } |
      { "DurTime" = { (hour,minute,second) = Value }} |
      { "DurDate" = { "Day" = Value, 
		      ?"Time"= {(hour,minute,second)}}}
	
and Recur = 
      { freq = Value,
	?(interval,wkstart) = Value,
	?(bysecond,byminute,byhour,bymonthday,byyearday,byweekno,bymonth,bysetpos) = List_Value,
	?byday = List.T ByDayElt,
	?bytext = { ("name",val) = Value},
	?"end" = { count = Value } | { until = DtPval }
      }

and ByDayElt = { weekday = Value, ?which = Value}
	
and Geo = { (latitude,longitude) = Value, ?xplist = XPList}
	
and RStatus = { code = List_Value, text = Value, ?extdata = Value, ?params = Params}
	
and TzID = { global = Bool, val = Value, ?xplist = XPList }
	
and OffsetTime = { positive = Bool, (hour,minute,second) = Value }

(*-------------------------------------------------------------------------*)
(* Abstract Schemas *)
schema XPList_A = { * = { * = {} }}

schema Params_A = { 
    ?(altrepparam,cnparam,cutypeparam,dirparam,encodingparam,fmttypeparam,langparam,
      partstatparam,rangeparam,reltypeparam,roleparam,sentbyparam,trigrelparam,
      valuetypeparam) = Value,
    ?(delfromparam,deltoparam,memberparam) = { * = {} },
    ?rsvpparam = Bool,
    ?tzidparam = { global = Bool, val = Value},
    ?xplist = XPList_A
  }

let XPListPlusVal_A (T : schema) : schema =
  { val = T, ?xplist = XPList_A} | {!\val,xplist = XPList_A}

let ParamsPlusVal_A (T : schema) : schema =
  { val = T, ?params = Params_A} | {!\val,params = {?params = Params_A}}
  
schema XProp_A = { * = {val = Value, ?params = Params_A}}

and Components_A = 
  let Timezonec_A : schema = CompProp_A in
  {?(Eventc,Todoc) = { * = (CompProp_A + {?alarms = List_CompProp_A})},
   ?Timezonec = { * = Timezonec_A}}
    
and Eventc_A = { props = CompProp_A, ?alarms = List_CompProp_A}

and Todoc_A = { props = CompProp_A, ?alarms = List_CompProp_A}
    
and CompProp_A =
      { ?(action,"class",percent,priority,status,transp,seq,repeat,tzurl,uid,url) = XPListPlusVal_A Value,	
	?(completed,created) = XPListPlusVal_A DateTime_A,
	?(attendee,comment,contact,tzname) = List.T (ParamsPlusVal_A Value),
	?(daylightc,standardc) = List_CompProp_A,
	?(description,location,organizer,summary) = ParamsPlusVal_A Value,
	?(dtend,dtstart,due,recurid,trigger) =   ParamsPlusVal_A DtPval_A,
	?(tzoffsetto,tzoffsetfrom) = XPListPlusVal_A OffsetTime_A,
	?(exdate,rdate) = List.T (ParamsPlusVal_A (List.T DtPval_A)),
	?(exrule,rrule) = List.T (XPListPlusVal_A Recur_A),
	?attach = List.T (ParamsPlusVal_A ({ "AttUri" = Value } | { "AttBinary" = Value})),
        ?categories = List.T (ParamsPlusVal_A { * = {} }),
	?dtstamp = (ParamsPlusVal_A DtPval_A) | {},
	?duration = XPListPlusVal_A Duration_A,
	?geo = Geo_A,
	?lastmod = (XPListPlusVal_A DateTime_A) | {},
	?related_to = List.T (ParamsPlusVal_A Value),
	?resources = List.T (ParamsPlusVal_A { * = {}}),
	?rstatus = List.T RStatus_A,
	?tzid = TzID_A,
	?xprop = XProp_A
      }

and List_CompProp_A = List.T CompProp_A

and DateTime_A = 
  { date = { (year,month,day) = (Value | {}) },
    time = { (hour,minute,second,zulu) = (Value | {}) }}
	
and DtPval_A = 
  { "DateTimeVal" = DateTime_A } |
  { "DateVal" = { (year,month,day) = Value}} |
  { "PeriodVal" = Period_A } |
  { "DurationVal" = Duration_A }
      
and Period_A = 
      { "PeriodExplicit" = { (start,"end") = DateTime_A }} |
      { "PeriodStart" = { start = DateTime_A, duration = Duration_A}}
	
and Duration_A = { negative = Bool, length = DurLength_A }

and DurLength_A = 
      { "DurWeek" = Value } |
      { "DurTime" = { (hour,minute,second) }} |
      { "DurDate" = { "Day" = Value, 
		      ?"Time"= {(hour,minute,second) = Value }}}
	
and Recur_A = 
      { freq = Value,
	?(interval,wkstart) = Value,
	?(bysecond,byminute,byhour,bymonthday,byyeardy,byweekno,bymonth,bysetpos) = { * = {} },
	?byday = List.T ByDayElt_A,
	?bytext = { ("name",val) = Value },
	?"end" = { count = Value } | { until = DtPval_A }
      }

and ByDayElt_A = { weekday = Value, ?which = Value}
	
and Geo_A = { (latitude,longitude) = Value, ?xplist = XPList_A}
	
and RStatus_A = { code = { * = {} }, text = Value, ?extdata = Value, ?params = Params_A}
	
and TzID_A = Value
	
and OffsetTime_A = { positive = Bool, (hour,minute,second) = Value }

schema ICalendar_A = Components_A

(*-------------------------------------------------------------------------*)
(* And this is more to give it a try from scratch *)
(* one lens per schema variable above *)

let domCompProp : view = 
  { "action", "attach", "attendee", "categories", "class",
    "comment", "completed", "contact", "created", "daylightc", 
    "description", "dtend", "dtstamp", "dtstart", "due", "duration",
    "exdate", "exrule", "geo", "lastmod", "location", "organizer",
    "percent", "priority", "rdate", "recurid", "related_to", "repeat",
    "resources", "rrule", "rstatus", "seq", "standardc", "status",
    "summary", "transp", "trigger", "tzid", "tzname", "tzoffsetto",
    "tzoffsetfrom", "tzurl", "uid", "url", "xprop"}

let domCompPropWoLastmod : view = 
  { "action", "attach", "attendee", "categories", "class",
    "comment", "completed", "contact", "created", "daylightc", 
    "description", "dtend", "dtstamp", "dtstart", "due", "duration",
    "exdate", "exrule", "geo", "location", "organizer",
    "percent", "priority", "rdate", "recurid", "related_to", "repeat",
    "resources", "rrule", "rstatus", "seq", "standardc", "status",
    "summary", "transp", "trigger", "tzid", "tzname", "tzoffsetto",
    "tzoffsetfrom", "tzurl", "uid", "url", "xprop"}

let icalendar_lens (filtering: lens): lens =
  assert ICalendar;
  acond [] {}
    (const {} [])
    (List.hd []; (* assuming only one calendar object *)
     focus "components"
       { calprops = { prodid = { val = { "Harmony" }},
		      version = { val = { "2.0" }}}};
     protect (components_lens filtering));
  assert ICalendar_A
    
and xplistplusval_lens (l: lens) : lens =
  assert (XPListPlusVal Any);
  wmap { "val" -> l, 
         "xplist" -> protect xplist_lens };
  acond { "val" = Value, ?"xplist" = Any } { ! = {?"xplist" = XPList_A}}
    (pivot "val")
    id;
  assert (XPListPlusVal_A Any)
    
and xplist_lens : lens =
  assert XPList;
  List.map 
    (pivot "name";
     map (hoist "val"; List.flatten; map (List.hd [])));
  List.flatten;
  map (List.hd []); (** check that !! this assumes that the same name doesn't appear twice in a xplist *)
  assert XPList_A
    
and xprop_lens : lens =
  assert XProp;
  List.map (pivot "name";
	    map (mapp {"params"} (protect params_lens)));
  List.flatten;
  map (List.hd []); (** same remark as above *)
  assert XProp_A

and params_lens : lens =
  assert Params;
  mapp {delfromparam, deltoparam, memberparam}
    (List.flatten; map (List.hd []));
  mapp {"xplist"} xplist_lens;
  assert Params_A
    
and components_lens (filtering: lens) : lens =
  assert Components;
  List.map
    (acond {val = Eventc, type = Any} {type = {Eventc}, val = Any}
       (mapp {val} (protect (eventc_lens filtering)))
       (acond {val = Todoc, type = Any} {type = {Todoc}, val = Any}
	  (mapp {val} (protect (todoc_lens filtering)))
	  (mapp {val} (protect (timezonec_lens filtering))));
     pivot "type"; map (hoist "val"));
  List.flatten;
  wmap { "Eventc" -> (List.map (hoist_nonunique "props" domCompProp;
				pivot "uid");
		      List.flatten; map (List.hd [])),
         "Todoc" -> (List.map (hoist_nonunique "props" domCompProp;
			       pivot "uid");
		     List.flatten; map (List.hd [])),
         "Timezonec" -> (List.map (pivot "tzid"); List.flatten; map (List.hd []))};
  assert Components_A
    
and eventc_lens (filtering: lens) : lens =
  assert Eventc;
  wmap { "props" -> protect (compprop_lens filtering),
         "alarms" -> protect (List.map (compprop_lens filtering)) };
  assert Eventc_A

and todoc_lens (filtering: lens) : lens =
  assert Todoc;
  wmap { "props" -> protect (compprop_lens filtering),
         "alarms" -> protect (List.map (compprop_lens filtering))};
  assert Todoc_A
	
and compprop_lens (filtering: lens) : lens =
   assert CompProp;
   wmap {
	   "action" -> protect (xplistplusval_lens id),
	   "attach" -> protect (List.map (paramsplusval_lens id)),
	   "attendee" -> protect (List.map (paramsplusval_lens id)),
	   "categories" -> protect (List.map (paramsplusval_lens (List.flatten; map (List.hd [])))),
	   "class" -> protect (xplistplusval_lens id),
	   "comment" -> protect (List.map (paramsplusval_lens id)),
           "completed" -> protect (xplistplusval_lens datetime_lens),
	   "contact" -> protect (List.map (paramsplusval_lens id)),
	   "created" -> protect (xplistplusval_lens datetime_lens),
	   "daylightc" -> protect (List.map (compprop_lens filtering)),
	   "description" -> protect (paramsplusval_lens id),
	   "dtend" -> protect (paramsplusval_lens dtpval_lens),
	   "dtstamp" -> protect (paramsplusval_lens dtpval_lens),
           "dtstart" -> protect (paramsplusval_lens dtpval_lens),
           "due" -> protect (paramsplusval_lens dtpval_lens),
	   "duration" -> protect (xplistplusval_lens duration_lens),
	   "exdate" -> protect (List.map (paramsplusval_lens (List.map dtpval_lens))),
	   "exrule" -> protect (List.map (xplistplusval_lens recur_lens)),
	   "geo" -> protect (geo_lens),
	   "lastmod" -> protect (xplistplusval_lens datetime_lens),
	   "location" -> protect (paramsplusval_lens id),
	   "organizer" -> protect (paramsplusval_lens id),
           "percent" -> protect (xplistplusval_lens id),
	   "priority" -> protect (xplistplusval_lens id),
	   "rdate" -> protect (List.map (paramsplusval_lens (List.map dtpval_lens))),
	   "recurid" -> protect (paramsplusval_lens dtpval_lens),
	   "related_to" -> protect (List.map (paramsplusval_lens id)),
	   "repeat" -> protect (xplistplusval_lens id),
	   "resources" -> protect (List.map (paramsplusval_lens (List.flatten; map (List.hd [])))),
	   "rrule" -> protect (List.map (xplistplusval_lens recur_lens)),
	   "rstatus" -> protect (List.map rstatus_lens),
	   "seq" -> protect (xplistplusval_lens id),
	   "standardc" -> protect (List.map (compprop_lens filtering)),
	   "status" -> protect (xplistplusval_lens id),
	   "summary" -> protect (paramsplusval_lens id),
	   "transp" -> protect (xplistplusval_lens id),
	   "trigger" -> protect (paramsplusval_lens dtpval_lens),
	   "tzid" -> protect (tzid_lens),
	   "tzname" -> protect (List.map (paramsplusval_lens id)),
	   "tzoffsetto" -> protect (xplistplusval_lens offsettime_lens),
	   "tzoffsetfrom" -> protect (xplistplusval_lens offsettime_lens),
	   "tzurl" -> protect (xplistplusval_lens id),
	   "uid" -> protect (xplistplusval_lens id),
	   "url" -> protect (xplistplusval_lens id),
	   "xprop" -> protect (xprop_lens)
	 };
  filtering;
  assert CompProp_A

and paramsplusval_lens (l: lens) : lens =
  assert (ParamsPlusVal Any);
  wmap { "val" -> l, "params" -> protect params_lens};
  acond {val = Value, ?params = Params} {! = {?params = Params_A}}
	(pivot "val") id;
  assert (ParamsPlusVal_A Any)
	
and datetime_lens : lens =
  assert DateTime;
  id;
  assert DateTime_A
	
and dtpval_lens : lens =
  assert DtPval; 
  wmap { "DateTimeVal" -> protect datetime_lens,
         "PeriodVal"   -> protect period_lens,
         "DurationVal" -> protect duration_lens};
  assert DtPval_A
(** rename everything to one single date here ?
   then I have to have different schemas inside
   to be able to put the right thing in the put way *)

and period_lens : lens =
  assert Period;
  wmap { "PeriodExplicit" -> map (protect datetime_lens),
         "PeriodStart"    -> wmap { "start"    -> protect datetime_lens, 
                                    "duration" -> protect duration_lens } };
  assert Period_A
	
and duration_lens : lens =
  assert Duration;
  wmap { "length" -> protect durlength_lens };
  assert Duration_A

and durlength_lens : lens =
  assert DurLength;
  id;
  assert DurLength_A

and recur_lens : lens =
  assert Recur;
  mapp { bysecond, byminute, byhour, bymonthday,
	 byyearday, byweekno, bymonth, bysetpos}
	(List.flatten; map (List.hd []));
  wmap { "byday" -> protect (List.map bydayelt_lens),
         "bytext" -> (pivot "name"; map (hoist "val")),
         "end" -> (acond {count = Value} {count = Value}
		   id (map dtpval_lens))
       };
  assert Recur_A

and bydayelt_lens : lens =
  assert ByDayElt;
  id;
  assert ByDayElt_A
	
and geo_lens : lens =
  assert Geo;
  wmap { "xplist" -> xplist_lens };
  assert Geo_A
	
and rstatus_lens : lens =
  assert RStatus;
  wmap { "code" -> (List.flatten; map (List.hd [])), 
         "params" -> protect params_lens };
  assert RStatus_A
	
and tzid_lens : lens =
  assert TzID;
  pivot "val"; map ( const {} {"global" = {"#true"}});
  assert TzID_A
	
and offsettime_lens : lens =
  assert OffsetTime;
  id;
  assert OffsetTime

and timezonec_lens (filtering: lens) : lens =
  assert CompProp;
  compprop_lens filtering;
  assert CompProp_A

(*-------------------------------------------------------------------------*)
(* general lens, keeping everything in bushes *)
let l : lens = 
  icalendar_lens id

(* lens filtering away dtstamps and lastmods
   and updating them as appropriate on the putback *)
let dtstamp_lens : lens =
  wmap { "val" ->
    wmap { "DateTimeVal" -> 
      wmap { "date" ->
	wmap {
	"day" -> fconst {} "date +%d",
	  "month" -> fconst {} "date +%m",
	    "year" -> fconst {} "date +%Y"
      },
	"time" -> 
	  wmap {
	  "hour" -> fconst {} "date +%H",
	    "minute" -> fconst {} "date +%M",
	      "second" -> fconst {} "date +%S"
	} }}}

let lastmod_lens : lens =
  wmap { "lastmod" -> 
    (focus "val" {}; hoist_nonunique "date" {"day", "month", "year"};
     hoist_nonunique "time" {"hour", "minute", "second", "zulu"};
     prune "zulu" {"#true"})};
  hoist_nonunique "lastmod" {"day", "month", "year", "hour", "minute", "second"};
  fmodify "day" "date +%d"; fmodify "month" "date +%m"; fmodify "year" "date +%Y";
  fmodify "hour" "date +%H"; fmodify "minute" "date +%M"; fmodify "second" "date +%S"
    
let l_stamps : lens =
  icalendar_lens 
    (wmap {"dtstamp" -> dtstamp_lens});
  map (map lastmod_lens)

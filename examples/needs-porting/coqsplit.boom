module Coqsplit =

let ident = [a-zA-Z] . [a-zA-Z0-9_']*

let ending_in (R:regexp) = ANY . R

let until_excl (R:regexp) (ex:regexp) : regexp = not_containing (R|ex) . R
let until (R:regexp) : regexp = until_excl R EMPTY

let nowsp (R:regexp) : regexp = R - (WSP . ANY)

(* ------------------------------------------------------------ *)
(* Generic splitters *)

(* ugh...bounded polymorphism would be really nice here *)
let COM (R:regexp) : regexp = "(* " . R . " *)"
let com (s:string) : string = "(* " . s . " *)"

let MARKERS (spec:(string*string) List.t) : regexp List.t =
  List.map{string*string}{string} fst{string}{string} spec

let markers (spec:(string*string) List.t) : regexp =
  union_regexps (MARKERS spec)

let msgs  (spec:(string*string) List.t) : regexp =
  union_regexps (List.map{string*string}{string} snd{string}{string} spec)

(* this is half as fast as it could be... *)
let reserved (spec:(string*string) List.t) : regexp =
  (markers spec) | (msgs spec)

let mk_splitter (spec:(string*string) List.t 
	 	   where List.nonempty{string*string} spec 
	 	      && disjoint_regexps (MARKERS spec))
                (ending : regexp)
                (suffix:string)
    : (lens in (COM (markers spec) . ending)
	   <-> (COM (msgs spec) . suffix)) =
  let (Some(l)) = List.fold_left{string*string}{lens option}
    (fun (lo : lens option) (p:string*string) ->
       let marker,msg = p in
       let l = (com marker . ending) <-> (com msg . suffix) in
       match lo with
	 | None     -> Some{lens}(l)
	 | Some(l') -> Some{lens}(l||l'))
    None{lens} spec in
  l

(* ------------------------------------------------------------ *)
(* Splitters for definitions and proofs *)

let def_spec = #{string*string}["EXERCISE","FILL IN HERE";
				"EXERCISEOPT","FILL IN HERE (OPTIONALLY)"]

let pf_spec = #{string*string}["ELIDEPROOFINLECTURE","Proof elided.";
			       "ADMITTED","FILL IN HERE (and delete \"Admitted\")";
			       "ADMITTEDOPT","OPTIONAL EXERCISE"]

let def_splitter 
  : (lens in (COM (markers def_spec) . until ".\n\n")
         <-> (COM (msgs def_spec) . "\n\n"))
  = mk_splitter def_spec (until ".\n\n") "\n\n"

let pf_splitter
  : (lens in (COM (markers pf_spec) . until "Qed.")
         <-> (COM (msgs pf_spec) . " Admitted."))
  = mk_splitter pf_spec (until "Qed.") " Admitted."

(* ------------------------------------------------------------ *)
(* Splitters for exercises inside of comments *)

let comex_spec = #{string*string}["EXERCISE...","FILL IN HERE";
				  "EXERCISEOPT...","FILL IN HERE (OPTIONALLY)"]

let until_tohere : regexp = until "...TO HERE *)\n"

let comex_splitter 
  : (lens in (COM (markers comex_spec) . until_tohere)
	 <-> (COM (msgs comex_spec) . "\n"))
  = mk_splitter comex_spec until_tohere "\n"

(* ------------------------------------------------------------ *)
(* Comment handling *)

(* splitting_comments occur only at the top level *)
let splitting_comment =
  (  ("(* EXERCISE..." . until_tohere) <-> "(* FILL IN HERE *)\n\n"
  || ("(* EXERCISEOPT..." . until_tohere) <-> "(* FILL IN HERE (OPTIONALLY) *)\n\n"
  || ("(* HIDE..." . until_tohere) <-> " " (* we would del, but then we're no longer iterable... *)
  || "(* OPEN COMMENT IN LECTURE *)\n" <-> "(** <<\n"
  || "(* CLOSE COMMENT IN LECTURE *)\n" <-> ">> **)\n")

(* difficulty markers *)
let stars 
  : (lens in [1-5] <-> ("1 star" | [2-5] . " stars"))
  = (  "1" <-> "1 star"
    || [2-5] . ins " stars")

let modifier 
  : (lens in [?!+] 
         <-> (", " . ("optional"|"challenge problem"|"recommended")))
  = (  "?" <-> ", optional"
    || "!" <-> ", challenge problem"
    || "+" <-> ", recommended")

let difficulty 
  : (lens in ("(* EX" . [1-5] . (stype modifier){0,3} . (" (" . ident . ")")? . " *)")
         <-> ("(* Exercise: " . (vtype stars) .
       		                (vtype modifier){0,3} .
				(" (" . ident . ")")? . " *)"))
  = let name = " (" . key ident . ")" in
    "(* " . ("EX" <-> "Exercise: ") . stars . modifier{0,3} . name? . " *)"

(* splitting_markers describes reserved tokens; this list is an OVER-approximation.

   EX stands in for EXERCISE and also the EX difficulty markers 
   
   FILL IN HERE hits the optional case, as well 

   Exercise: rules out quite a bit -- we could be a little more fine, if we liked
*)
let splitting_markers =
  "EX" | "FILL IN HERE" | "COMMENT IN LECTURE" | "HIDE" | "<<" | ">>" | "Exercise:"

(* [nosplits_until ending] is the set of strings ending in ending that
   don't include any splitting markers, newlines, or close-comments *)
let nosplits_until (ending:string) : regexp
  = until_excl ending (splitting_markers|"\n"|"*)")

(* each "line" in a comment either has no splits at all, or is a
   splitter (which may erase multiple lines) *)
let comment_line 
  : (lens in (nosplits_until "\n" | [ ]* . COM (markers comex_spec) . until_tohere) 
         <-> (nosplits_until "\n" | [ ]* . COM (msgs comex_spec) . "\n"))
  = (  nosplits_until "\n" 
    || [ ]* . comex_splitter)

test lens_iterable comment_line = true

let comment 
  : (lens in (stype splitting_comment | stype difficulty | "(*" . (stype comment_line)* . nosplits_until "*)")
	 <-> (vtype splitting_comment | vtype difficulty | "(*" . (vtype comment_line)* . nosplits_until "*)"))
  = (  splitting_comment
    || difficulty
    || "(*" . comment_line* . nosplits_until "*)")

test lens_iterable comment = true

let DECL (KW : regexp) : regexp = KW . WSP . ident
let decl (KW : regexp) : (lens in DECL KW <=> DECL KW) = (KW . WSP . key ident)

let directive_kw = "Notation" | "Eval"
let require_prefix = "Require" . (WSP . ("Export"|"Import"))? . WSP . (ident - (ending_in "sol"))
let directive
  : (lens in (  directive_kw . until ".\n" | require_prefix . "(* SOL *)"? . WS . ".\n")
	 <-> (  directive_kw . until ".\n" | require_prefix . "sol"? . WS . ".\n"))
  = (  directive_kw . until ".\n"
    || require_prefix . ("(* SOL *)" <-> "sol" | "") . WS . ".\n")

let def_kw = "Definition" | "Fixpoint" | "Inductive"
let pf_kw = "Theorem" | "Lemma"

let decl_spec = 
  #{regexp*lens}[
    def_kw,    WSP . nowsp (until ":=")  . (WSP . def_splitter | until_excl ".\n\n" (reserved def_spec));
    pf_kw,     WS . ':' . until "Proof." . (WSP . pf_splitter | until_excl ("Qed."|"Admitted.") (reserved pf_spec));
    "Example", WS . ':' . until "Proof." . until "Qed.\n"
  ]

let decl_kws (spec:(regexp*lens) List.t) : regexp List.t =
  List.map{regexp*lens}{regexp} fst{regexp}{lens} spec

let DECLS (spec:(regexp*lens) List.t) (BODY:lens -> regexp) : regexp =
  List.fold_left{regexp*lens}{regexp}
    (fun (SRC:regexp) (p:regexp*lens) ->
       let kw,body = p in
       SRC | (DECL kw . (BODY body)))
    EMPTY spec

let decls (spec:(regexp*lens) List.t 
	     where List.nonempty{regexp*lens} spec
	        && disjoint_regexps (decl_kws spec))
  : (lens in (DECLS spec stype) <-> (DECLS spec vtype))
  = let (Some(l)) = 
      List.fold_left{regexp*lens}{lens option}
	(fun (lo:lens option) (p:regexp*lens) ->
	   let kw,body = p in
	   let l = decl kw . body in
	   match lo with
	     | None -> Some{lens}(l)
	     | Some(l2) -> Some{lens}(l2 || l))
	None{lens} spec in
    l

let declaration : (lens in (DECLS decl_spec stype) <-> (DECLS decl_spec vtype)) = decls decl_spec

let commands = #{lens}[directive;declaration;comment]

(*
let hide = del ("\n(* HIDE" . ("..." . until_tohere | " *)\n" . until "\n\n"))
let hide_opt = "" || hide

let command
  : lens (* in (union_regexps (stypes commands) . (stype hide)? | "\n")
            <-> (union_regexps (vtypes commands) | "\n")) *)
  = let cs = union_lenses commands in
    (cs . hide_opt)

test iterable (stype command) = ? (* hangs :( *)
test iterable (vtype command) = ?
*)

let command
  : (lens in (union_regexps (stypes commands) | "\n")
         <-> (union_regexps (vtypes commands) | "\n"))
  = union_lenses commands || "\n"

test lens_iterable command = true

test command.get "Require Export While(* SOL *).\n" = "Require Export Whilesol.\n"
test command.put "Require Export Whilefsol.\n" 
            into "Require Export While(* SOL *).\n" 
               = "Require Export Whilef(* SOL *).\n"
test command.create "Require Export Whilesol.\n" 
  = "Require Export While(* SOL *).\n"

test command.get 
  <<
    Inductive day : Set :=
      | monday : day
      | tuesday : day
      | wednesday : day
      | thursday : day
      | friday : day
      | saturday : day
      | sunday : day.


  >> =    
  <<
    Inductive day : Set :=
      | monday : day
      | tuesday : day
      | wednesday : day
      | thursday : day
      | friday : day
      | saturday : day
      | sunday : day.


  >>

test command.get "Notation \"x + y\" := (plus x y)  (at level 50, left associativity).\n"
  = "Notation \"x + y\" := (plus x y)  (at level 50, left associativity).\n"

test command.get
  <<
    Fixpoint minus (n m : nat) {struct m} : nat :=
      match m with
        | O => n
        | S m' => minus (pred n) m'
      end.


  >> =
  <<
    Fixpoint minus (n m : nat) {struct m} : nat :=
      match m with
        | O => n
        | S m' => minus (pred n) m'
      end.


  >>

test command.get
  <<
    Fixpoint minus (n m : nat) {struct m} : nat :=
      (* EXERCISE *)
      match m with
        | O => n
        | S m' => minus (pred n) m'
      end.


  >> =
  <<
    Fixpoint minus (n m : nat) {struct m} : nat :=
      (* FILL IN HERE *)


  >>

test command.get
  <<
    Example test_andb31:                 (andb3 true true true) = true.
    Proof. simpl. reflexivity.  Qed.

  >> =
  <<
    Example test_andb31:                 (andb3 true true true) = true.
    Proof. simpl. reflexivity.  Qed.

  >>


test command.get
  <<
    Theorem plus_id_exercise : forall n m o : nat,
      n = m -> m = o -> plus n m = plus m o.
    Proof.
      (* ADMITTED *)
      intros m n o.
       intros EQmn.
       intros EQno.
       rewrite -> EQmn.
       rewrite -> EQno.
       reflexivity.  Qed.
  >> =
  <<
    Theorem plus_id_exercise : forall n m o : nat,
      n = m -> m = o -> plus n m = plus m o.
    Proof.
      (* FILL IN HERE (and delete "Admitted") *) Admitted.
  >>

test command.get 
  <<
    (* EXERCISE... *)
    
    Fixpoint forallb (X : Set) (test : X -> bool) (l : list X) {struct l} : bool :=
      match l with
        | [] => true
        | x :: l' => andb (test x) (forallb _ test l')
      end.
    
    Implicit Arguments forallb [X].
        
    Fixpoint existsb (X : Set) (test : X -> bool) (l : list X) {struct l} : bool :=
      match l with
        | [] => false
        | x :: l' => orb (test x) (existsb _ test l')
      end.
    
    Implicit Arguments existsb [X].
        
    Definition existsb' (X : Set) (test : X -> bool) (l : list X) : bool :=
      negb (forallb (fun x => negb (test x)) l).
    
    Implicit Arguments existsb' [X].
    
    Theorem existsb_existsb' : forall (X : Set) (test : X -> bool) (l : list X),
      existsb test l = existsb' test l.
    Proof.
      intros. induction l as [| x l'].
      Case "l = []".
        unfold existsb'. simpl. reflexivity.
      Case "l = x :: l'".
        unfold existsb'. simpl.
        destruct (test x).
        SCase "test x = true".
          simpl. reflexivity.
        SCase "test x = false".
          simpl.
          rewrite -> IHl'.
          unfold existsb'. reflexivity.
    Qed.
    
    (* ...TO HERE *)

  >> = 
  <<
    (* FILL IN HERE *)


  >>

test command.get 
  <<
    (* HIDE... *)
    Don't tell anyone!
    It's a secret!


    Top secret!
    (* ...TO HERE *)

  >> = " "


test command.get "(* OPEN COMMENT IN LECTURE *)\n" = "(** <<\n"
test command.get "(* CLOSE COMMENT IN LECTURE *)\n" = ">> **)\n"

test command.get "(* this is just a comment *)" = "(* this is just a comment *)"

let M = '0'? . [1-9] | '1' . [1-2]
let D = '0'? . [1-9] | [12] . [0-9] | "30" | "31"
let Y = [1-9] . [0-9]{3}
let DATE = M . '/' . D . '/' . Y

let today : (string in DATE)= Sys.exec "date +%m/%d/%Y | tr -d '\\n'"

let timestamp 
  : (lens in  "Version of TIMESTAMP" 
         <-> ("Version of " . DATE))
  = let marker = "TIMESTAMP" in
    "Version of " . qconst marker DATE today marker

let header 
  : (lens in ("(*" . until_excl "Version of " "*)" . "TIMESTAMP\n*)\n")
         <-> ("(*" . until_excl "Version of " "*)" . DATE . "\n*)\n"))
  = "(*" . (not_containing ("Version of "|"*)")) . timestamp . "\n*)\n"

test header.get
  <<
    (* Basic programming and reasoning about programs in Coq
       Version of TIMESTAMP
    *)

  >> = 
  (<<
     (* Basic programming and reasoning about programs in Coq
        Version of 
   >> . today . "\n" .
   <<
     *)

   >>)

(* a somewhat pointless contract...this follows from the definition *)
let file 
 : (lens in (stype header . (stype command)+)
        <-> (vtype header . (vtype command)+))
 = header . <greedy 0 "k":command>+

test file.get
  <<
    (* Basic programming and reasoning about programs in Coq
       Version of TIMESTAMP
    *)
    
    (* HOMEWORK INSTRUCTIONS:
    
       Submit homeworks using Blackboard:
         <https://courseweb.library.upenn.edu/>
       
       Solution files that Coq rejects will NOT be graded.
       You should be able to run CoqIDE/ProofGeneral to the
       end of the file, or run coqc without any errors.  If
       you can't solve one of the problems, leave an
       [Admitted] in the file.  Style, readability, and
       elegance count.
    
       If you have any questions about the homework, please
       e-mail the TAs.
    
       Have fun!
    *)
    
    (* HIDE... It might be better to introduce +, -, and * as
       notations.  This will make some expressions look a
       little cleaner, but more importantly it will give an
       opportunity for discussing the Notation mechanism,
       especially precedence, which was a persistent confusion
       among some people.  Really doing the
       discussion (drawing ASTs, discussing parsing,
       parentheses, etc.) would help this, I think. ...TO HERE *)
    
    (* ------------------------------------------------------- *)
    (* Days of the week *)
    
    Inductive day : Set :=
      | monday : day
      | tuesday : day
      | wednesday : day
      | thursday : day
      | friday : day
      | saturday : day
      | sunday : day.
    
    Definition next_weekday (d:day) : day :=
      match d with
      | monday => tuesday
      | tuesday => wednesday
      | wednesday => thursday
      | thursday => friday
      | friday => monday
      | saturday => monday
      | sunday => monday
      end.
    
    Eval simpl in (next_weekday friday).
    Eval simpl in (next_weekday (next_weekday saturday)).
    
    Example test_next_weekday:
      (next_weekday (next_weekday saturday)) = tuesday.
    Proof. simpl. reflexivity.  Qed.
    
    (* -------------------------------------------------------------- *)
    (* Booleans *)
    
    Inductive bool : Set :=
      | true : bool
      | false : bool.
    
    Definition negb (b:bool) := 
      match b with
      | true => false
      | false => true
      end.
    
    Definition ifb (b1 b2 b3:bool) : bool :=
      match b1 with
        | true => b2
        | false => b3
      end.
    
    Definition andb (b1:bool) (b2:bool) : bool := ifb b1 b2 false.
    
    Definition orb (b1:bool) (b2:bool) : bool := ifb b1 true b2.
    
    Example test_orb1:  (orb true  false) = true. 
    Proof. simpl. reflexivity.  Qed.
    Example test_orb2:  (orb false false) = false.
    Proof. simpl. reflexivity.  Qed.
    Example test_orb3:  (orb false true ) = true.
    Proof. simpl. reflexivity.  Qed.
    Example test_orb4:  (orb true  true ) = true.
    Proof. simpl. reflexivity.  Qed.
    
    (* EX1 (nandb_andb3) *)
    (* Uncomment and then complete the definitions of the
       following functions, making sure that the assertions
       below each can be verified by Coq. *)
    (* This function should return [true] if either or both of
       its inputs are [false]. *)
    Definition nandb (b1:bool) (b2:bool) : bool :=
      (* EXERCISE *)
      match b1 with
      | true => negb b2
      | false => true
      end.

    (* EX2 (plus_comm_informal) *)
    (* As an exercise, try translating your solution for
    plus_comm into an informal proof. *)
    (* Informal proof:
    Theorem: plus is commutative.
    Proof:
       (* EXERCISE... *)
       Let natural numbers n and m be given.  We show plus n m = plus m n
       by induction on m.
         - First, suppose m = 0.  By the definition of plus, plus 0 n = 0.
           More, we have already shown (lemma plus_n_0) that plus n 0 = 0.
           Thus, plus n 0 = plus 0 n.
    
         - Next, suppose m = S m' for some m' such that plus n m' = plus m' n.
           By the definition of plus and the inductive hypothesis, 
           plus (S m') n = S (plus m' n) = S (plus n m').  It
           remains to show plus n (S m') = S (plus n m') as well, but
           this is precisely lemma plus_n_Sm.
       (* ...TO HERE *)
    *)


  >> = 
  (<<
     (* Basic programming and reasoning about programs in Coq
        Version of 
   >> . today . "\n" .
   <<
     *)
     
     (* HOMEWORK INSTRUCTIONS:
     
        Submit homeworks using Blackboard:
          <https://courseweb.library.upenn.edu/>
        
        Solution files that Coq rejects will NOT be graded.
        You should be able to run CoqIDE/ProofGeneral to the
        end of the file, or run coqc without any errors.  If
        you can't solve one of the problems, leave an
        [Admitted] in the file.  Style, readability, and
        elegance count.
     
        If you have any questions about the homework, please
        e-mail the TAs.
     
        Have fun!
     *)
     
      
     (* ------------------------------------------------------- *)
     (* Days of the week *)
     
     Inductive day : Set :=
       | monday : day
       | tuesday : day
       | wednesday : day
       | thursday : day
       | friday : day
       | saturday : day
       | sunday : day.
     
     Definition next_weekday (d:day) : day :=
       match d with
       | monday => tuesday
       | tuesday => wednesday
       | wednesday => thursday
       | thursday => friday
       | friday => monday
       | saturday => monday
       | sunday => monday
       end.
     
     Eval simpl in (next_weekday friday).
     Eval simpl in (next_weekday (next_weekday saturday)).
     
     Example test_next_weekday:
       (next_weekday (next_weekday saturday)) = tuesday.
     Proof. simpl. reflexivity.  Qed.
     
     (* -------------------------------------------------------------- *)
     (* Booleans *)
     
     Inductive bool : Set :=
       | true : bool
       | false : bool.
     
     Definition negb (b:bool) := 
       match b with
       | true => false
       | false => true
       end.
     
     Definition ifb (b1 b2 b3:bool) : bool :=
       match b1 with
         | true => b2
         | false => b3
       end.
     
     Definition andb (b1:bool) (b2:bool) : bool := ifb b1 b2 false.
     
     Definition orb (b1:bool) (b2:bool) : bool := ifb b1 true b2.
     
     Example test_orb1:  (orb true  false) = true. 
     Proof. simpl. reflexivity.  Qed.
     Example test_orb2:  (orb false false) = false.
     Proof. simpl. reflexivity.  Qed.
     Example test_orb3:  (orb false true ) = true.
     Proof. simpl. reflexivity.  Qed.
     Example test_orb4:  (orb true  true ) = true.
     Proof. simpl. reflexivity.  Qed.
     
     (* Exercise: 1 star (nandb_andb3) *)
     (* Uncomment and then complete the definitions of the
        following functions, making sure that the assertions
        below each can be verified by Coq. *)
     (* This function should return [true] if either or both of
        its inputs are [false]. *)
     Definition nandb (b1:bool) (b2:bool) : bool :=
       (* FILL IN HERE *)
     
     (* Exercise: 2 stars (plus_comm_informal) *)
     (* As an exercise, try translating your solution for
     plus_comm into an informal proof. *)
     (* Informal proof:
     Theorem: plus is commutative.
     Proof:
        (* FILL IN HERE *)
     *)
    
    
   >>)

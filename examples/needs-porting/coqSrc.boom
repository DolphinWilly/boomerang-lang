module CoqSrc = 

  (* ---------- GENERIC DEFINITIONS ---------- *)
  (* any string *)
  let any : regexp = [^]*
  (* any non-empty string *)
  let anyne : regexp = [^]+
  (* any string containing r *)
  let containing (r:regexp) = any . r . any
  (* any string in r1 not containing an occurrence of r2 *)
  let but (r1:regexp) (r2:regexp) = r1 - (containing r2)
  (* any string not containing an occurrence of r *)
  let any_but (r:regexp) = but any r
  (* any non-empty string not containing an occurrence of r *)
  let anyne_but (r:regexp) = but anyne r
  (* any string not containing "." *)
  let any_but_dot = [^.]*
  (* any string not containing ".\n" *)
  let any_but_dot_nl = any_but ".\n"
  (* any string not containing "Qed." *)
  let any_but_qed_dot = any_but "Qed."

  (* ---------- CONSTANTS ----------- *)
  (* newline *)
  let nl = "\n"
  (* double newline *)
  let dnl : string = nl . nl
  (* not a newline *)
  let not_nl = [^\n]
  (* whitespace *)
  let ws = [ \n\t]      
  (* open comment *)
  let comment_open = "(*"  
  (* close comment *)
  let comment_close = "*)" 
  (* comment with body s *)
  let comments (s:string) = comment_open . s . comment_close 

  (* ---------- HELPER LENSES ---------- *)
  let admitted_from = comments " ADMITTED " 
  let admitted_to = comments " FILL IN HERE (and delete \"Admitted\") " . " " . "Admitted." 
  let admitted_opt_from = comments " ADMITTEDOPT " 
  let admitted_opt_to = comments " OPTIONAL EXERCISE " . " " . "Admitted." 
  let admitted = 
    ( admitted_from <-> admitted_to 
    | admitted_opt_from <-> admitted_opt_to ) . 
    del (any_but_qed_dot . "Qed.")

  let r : regexp = but (any . nl) ( dnl | comments " HIDE " | comments " HIDE... " | comments " HIDE IN LECTURE... " | comments " ...TO HERE " | "End ")

  let exercise_from = comments " EXERCISE "
  let exercise_to =  "FILL IN HERE"
  let exercise_follows_from = comments " EXERCISE FOLLOWS "
  let exercise_follows_to = comments " FILL IN HERE "
  let exercise = 
    ( exercise_from <-> exercise_to
    | exercise_follows_from <-> exercise_follows_to) . 
    del (but (any . nl) ( dnl | comments " HIDE " | comments " HIDE... " | comments " HIDE IN LECTURE... " | comments " ...TO HERE " | "End ")) . 
    ins nl . 
    nl

  (* ---------- DECLARATIONS ---------- *)
  let proposition = 
    ("Lemma " | "Theorem" ). 
    key [^:]+ . ":" .
    but any "Proof." . 
    "Proof." .
    but any 
      ( admitted_from | admitted_to 
      | admitted_opt_from | admitted_opt_to
      | "Qed.") . 
    (admitted | "Qed.")

  let definition = 
    ("Inductive " | "Definition " | "Fixpoint " | "Notation " | "Ltac") . 
    key [^:]+ . ":" . 
    but any 
      ( exercise_from | containing exercise_to
      | exercise_follows_from | exercise_follows_to
      | ".\n" ) . 
    ( exercise | ".\n")

  (* ---------- COMMENTS ---------- *)
  let lecture_open_from = comments " OPEN COMMENT IN LECTURE "
  let lecture_open_to =  " <------ remove this comment"
  let lecture_close_from = comments " CLOSE COMMENT IN LECTURE "
  let lecture_close_to = "remove this comment ------> "
  let lecture = 
      lecture_open_from <-> (comment_open . lecture_open_to) 
    | lecture_close_from <-> (lecture_close_to . comment_close)

  let special_comment = lecture 

  let comment = 
    let comment_tag = comment_open | comment_close in 
    let inner_nested = but ([^)] . any)? comment_tag in 
    let inner_atomic = but any comment_tag in 
    (comment_open . 
    (inner_atomic | (inner_atomic . comment_open . inner_nested . comment_close)* . inner_atomic) . 
    comment_close)
    - 
    ( comments " HIDE " 
    | comments " HIDE... " | comments " HIDE IN LECTURE... " | comments " ...TO HERE " 
    | admitted_from | admitted_to 
    | admitted_opt_from | admitted_opt_to
    | lecture_open_from | containing lecture_open_to 
    | lecture_close_from | containing lecture_close_to )

  let hide = 
    let p1 = but (nl . any . not_nl . nl) dnl in 
    let p2 = not_nl+ in 
    let q = but any (comments " ...TO HERE ") in 
      ((del (comments " HIDE " . (p1|p2) . nl)))
(* 
      | (del (comments " HIDE... " . q . comments " ...TO HERE " . nl))
      | (del (comments " HIDE IN LECTURE... " . q . comments " ...TO HERE " . nl)))
*)
          
  (* ---------- MAIN DEFINITIONS ---------- *)
  let declaration = 
    ("Eval" | "Check" | "Require" | "Open" | "Export" | "Tactic") . 
    any_but_dot . "." 

  let pre_body = proposition | definition | declaration | comment | special_comment

  let body = pre_body . (del ws* . hide)? . ws*

  let modl = 
    "Module " .
    key [^.]+ . "." . ws* . 
    <body>* .
    "End " . any_but_dot . "."
      
  let item = body | modl . ws*
    
  let l = <item>*

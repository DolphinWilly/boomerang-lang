module Wiki = 

  let R : regexp = [A-Z]*.[A-Z]
  let S : regexp = Native.Prelude.suffs R 

  test matches R "0" = ?
  test matches R "0A" = ?
  test matches S "A" = ?

  test S = ?
 

(* --------- constants ------- *)
let NEWLINE : string = "\n"
let DASH : string = "-"
let SPACE : string = " " 
let Q2 : string = "''"
let Q3 : string = "'''"
let Q5 : string = "'''''"

let WORD : regexp = [^ \n\t[\]<>|'']+
let SP : regexp = [ \t]+
let URL : regexp = "http://" . [^ \n\t\r]+
let WORDS : regexp = WORD . (SPACE . WORD)*
let words : lens = copy WORDS


let iter2 (l1:lens) (l2:lens) = 
  l1 | l2 | (l1 . l2)+ . l1? | (l2 . l1)+ . l2?

(* ---------- flats ---------- *)
let mk_quot (tag:string) (q:string) (l:lens) = 
  Xml.raw_simple_elt tag (ins q . l . ins q)
let mk_cp (tag:string) (body:lens) = 
  copy (ctype (Xml.raw_simple_elt tag body))
let mk_brackets (l:lens) = 
  ins "[" . l . ins "]"

let q2 : lens = mk_quot "i" Q2 words
let q3 : lens = mk_quot "b" Q3 words
let q5 : lens = mk_quot "b" Q3 q2

let tt : lens = mk_cp "tt" words
let sup : lens = mk_cp "sup" words
let sub : lens = mk_cp "sub" words
let big : lens = mk_cp "big" words
let br : lens = "<br>" <-> "<br></br>"
let sp : lens = qset SP SP
let url : lens = 
  mk_brackets (Xml.attr1_raw_simple_elt "a" "href" (copy URL) (ins " " . words))
let link : lens = 
  mk_brackets 
    (mk_brackets 
       (Xml.attr1_raw_simple_elt "a" 
          "href" (copy (WORD - URL)) 
          (ins "|" . words)))
let img : lens = 
  mk_brackets
    (mk_brackets 
       (Xml.attr2_raw_simple_elt_no_kids "img" 
          "src" (copy WORD)
          "alt" (ins "|" . words)))
let txt : lens = copy WORD

test q2.get "<i>dual syntax</i>" = "''dual syntax''"
test q3.get "<b>dual syntax</b>" = "'''dual syntax'''"
test q5.get "<b><i>dual syntax</i></b>" = "'''''dual syntax'''''"
test tt.get "<tt>dual syntax</tt>" = "<tt>dual syntax</tt>" 
test sup.get "<sup>dual syntax</sup>" = "<sup>dual syntax</sup>" 
test sub.get "<sub>dual syntax</sub>" = "<sub>dual syntax</sub>" 
test big.get "<big>dual syntax</big>" = "<big>dual syntax</big>" 
test br.get "<br>" = "<br></br>"
test sp.get " " = " "

let non_txt = q2 | q3 | q5 | tt | sup | sub | big | br | url | link | img 
let txts = iter2 txt sp
let flats = non_txt* . ( txts . non_txt+ )* . txts?

test flats.get 
  "The <a href=\"http://www.brics.dk/xsugar\">XSugar</a> language supports <i>dual syntax</i>." 
=
  "The [http://www.brics.dk/xsugar XSugar] language supports ''dual syntax''."

(*

(* ---------- lists ---------- *)

let listelt (spaces:string) (stars:string) : lens = 
  Xml.simple_elt spaces "li" 
    (ins stars . ins " " . flats . ins NEWLINE)

let mk_list (spaces:string) (body:lens) : lens = 
  Xml.elt spaces "ul" body

let le3 = listelt NL3 "***"
let list3 = mk_list NL2 le3+

let le2 = listelt NL2 "**"
let list2 = mk_list NL1 (iter2 le2 list3)

let le1 = listelt NL1 "*"
let list1 = mk_list NL0 (iter2 le1 list2)

test list1.create
 "* Sharon Foster
 |** Nate Foster
 |*** Clare Foster
 |* Mollie Foster
 |" = ?


let le1 = listelt NL1 "*" 
let le2 = listelt NL2 "**"  
let list2 = mk_list NL1 le2


(* ---------- items ---------- *)


let raw (xml:string) (body:lens) : lens = 
  Xml.raw_simple_elt xml 
    begin 
      ins ("<" . xml . ">") . 
      body . 
      ins ("</" . xml . ">")
    end

let pre : lens = raw "xml" (copy Escaped)

let nowiki : lens = raw "nowiki" (copy Escaped)

let p : lens = "<p></>" <-> "\n\n"

(* lists *)

let list3 : lens = 
  mk_list NL2 ( listelt NL3 "***" )+

let le2 = listelt NL2 "**"  

let le2s = le2*  

let le2p = le2+

let list3_le2p = list3 . le2p

let le2s_list3_le2p_p = le2s . list3_le2p+ 

let le2s_list3_le2p_s_list3 = le2s . list3_le2p* . list3 

let l = le2* . (le2 | list3_le2p* . (list3_le2p . list3))

let list2 : lens = mk_list NL1 l

test "#1" = ?

let le1 = listelt NL1 "*" 
let list1 : lens = mk_list NL0 (le1 | list2)* 
let list : lens = list1 

test list.get 
  <<
   <ul>
     <li>Nate Foster</li>
     <li>Clare Foster</li>
     <ul>
       <li>Mollie Foster</li>
     </ul>
   </ul>
  >> = 
  <<
   * Nate Foster
   * Clare Foster
   ** Mollie Foster

  >>

test list* = ?

let item : lens = 
  hr | h3 | h2 | h1 | pre | nowiki | list | p

let items : lens = item*
     
let wiki : lens = 
  Xml.elt NL0 "html"
    begin
      Xml.simple_elt NL1 "head" (Xml.simple_elt NL2 "title" (del [^""\n\r<>]* )) . 
      Xml.simple_elt NL1 "body" items
    end

test wiki.get  
  "<html>
  |<head><title>Wiki</title></head>
  |<body>
  |  <h1>XSugar</h1> 
  |  The <a href=\"http://www.brics.dk/xsugar\">XSugar</a> project has 
  |  developed a notation for specifying a <i>dual syntax</i> for an 
  |  <a href=\"XML\">XML</a> language.<p/>
  |  An XSugar specification gives rise to the following tools:
  |  <ul>
  |    <li>a translation from XML to non-XML syntax</li>
  |    <li>a translation from non-XML to XML syntax</li>
  |    <li>a check that these translations are reversible</li>
  |    <li>static validation of the generated XML documents</li>
  |  </ul> 
  | </body>
  |</html>" = ?
*)

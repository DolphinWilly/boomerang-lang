module Test = 

let l1 : lens =
  Xml.flatten;
  hoist "contacts"; List.hd []; hoist "contact";
  List.map (mapp {"n"} (List.hd []; hoist "@pcdata";
                        List.hd []);
            pivot "n");
  List.flatten;
  map (List.hd [];
       map (List.map (hoist "@pcdata"; List.hd []));
       acond {} [] (const [] {})  (hoist "studio"))
  

(*
;
  hoist "AddressBook"; List.hd []; hoist "Person";
  List.map (map (List.hd []); pivot "@pcdata");
  List.flatten;
  map (List.hd [];
       map (hoist "Address";
            List.map (hoist "@pcdata"; List.hd []));
       acond {} [] (const [] {})  (hoist "Addresses"))
*)

test l1 / 
   (load "xml" 
     "<contacts>
      |  <contact>
      |    <n>Ginger</n>
      |    <studio>mgm.com</studio>
      |    <studio>sony.com</studio>
      |  </contact>
      |  <contact>
      |    <n>Fred</n>
      |  </contact>
      | </contacts>")
  = ?

(*
let l2 : lens =
  Xml.flatten;
  hoist "AddressBook"; List.hd []; hoist "Person";
  List.map (map (List.hd []); pivot "@pcdata");
  List.flatten;
  map (List.hd [];
       map (hoist "Address";
            List.map (hoist "@pcdata"; List.hd []));
       acond {} [] (const [] {})  (hoist "Addresses"))

test l2 / 
   (load "xml" 
     " <AddressBook>
      |  <Person>
      |    Fred
      |  </Person>
      |  <Person>
      |    <Addresses>
      |      <Address>mgm.com</Address>
      |      <Address>sony.com</Address>
      |    </Addresses>
      |    Ginger
      |  </Person>
      |</AddressBook>
      ")
  = ?

*)

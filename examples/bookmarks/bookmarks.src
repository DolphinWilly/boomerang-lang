#{#}

module Bookmarks =
  
(* the abstract schema for heterogeneous synchronization, as described in the paper *)
let Link : schema = { "name" = Value, "url" = Value }
let Folder : schema = { "name" = Value, "contents" = Contents }     
and Contents : schema = List.T (Folder | {"link" =  Link})

let Abstract : schema = Contents

(* A flattened abstract bookmark schema for synchronization with easy alignment *)
let Item : schema = { "folders" = { * = (List.T Item) }, "links" = { * = Value } }
and Twig : schema = List.T { "folders" = { * = (List.T Twig) }, "links" = { * = Value } }

let BushAbstract : schema = Item
      
(* the lens to flatten the abstract tree into a bush *)
let flatten_to_bush : lens =

  (* recursively applies the lens to the folder contents, and pivots the links *)
  List.map (
  wmap {"folder" -> (pivot "name"; map (hoist "contents"; flatten_to_bush)) , 
    "link" -> pivot "url"; map (hoist "name")}
    );

  (* this flatten regroups all links and folders in two lists *)
  List.flatten;

  (* now we flatten these lists, and keep only the heads for links, since *)
  (* different links at the same location never have the same urls        *)
  wmap {"folder" -> List.flatten,
          "link" -> (List.flatten; map (List.hd [])) };
  
  (* we also rename the two lists in a more consistent way *)
  rename_if_present "folder" "folders";
  rename_if_present "link" "links";
  
  (* the following conditionals adds empty folders and links if needed *)
  acond {} {"folders"={}, "links"={}}
  ( add "links" {}; add "folders" {} )
    (acond {"links"=Any} {"folders"={}, "links" = Any}
     (add "folders" {})
       (acond {"folders"=Any} {"folders" = Any, "links" = {}}
        (add "links" {})
          id
          )
       )    
    
let flatten_bookmarks : lens =
  assert Abstract;
  flatten_to_bush;
  assert BushAbstract

let toolbar : name = "bookmarks toolbar"

let rename_bookmarksbar : lens = 
  wmap { `List.HD -> 
           begin
             wmap { "name" -> const { `toolbar } { "BookmarksBar" } }
           end
       }

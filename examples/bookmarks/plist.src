#{#}

module Plist =

let plist_object_lens : lens =
  wmap { "dict" -> dict_lens,
         "array" -> array_lens,
         "string" -> leaf_lens }

and array_lens : lens =
  wmap {`Xml.CHILDREN -> List.map plist_object_lens};
  hoist Xml.CHILDREN

and dict_lens : lens =
  wmap {`Xml.CHILDREN -> List.groupby2; List.map (keypair_lens)};
  hoist Xml.CHILDREN

and keypair_lens : lens =
  wmap { `(List.HD) -> hoist "key"; leaf_lens, 
         `(List.TL) -> wmap { `(List.HD) -> plist_object_lens } }

and leaf_lens : lens =
  hoist Xml.CHILDREN;
  acond [] { `(List.TL)=[], `(List.HD)={` Xml.PCDATA = {"BLANK"={}, *\("BLANK")=Any}}}
    (const [{`Xml.PCDATA={"BLANK"}}] [])
    id;
  List.hd [];
  hoist Xml.PCDATA

let l : lens =
  List.hd [];
  hoist "plist";
  focus Xml.CHILDREN { "version" = {"1.0"} };
  List.hd [];
  plist_object_lens
    
(* flatten_dict: flatten a dict into a bush { key1 = data1, key2 = data2, ... } *)
let flatten_dict : lens =
  hoist "dict";
  List.map ( pivot List.HD;  map (focus List.TL {}; List.hd []) );
  List.flatten;
  map (List.hd [])


#{#}

module Safari =

(* --------------- schemas -------------- *)
let URIDict : schema = { "BLANK" = Value, 
			 "title" = Value, 
			 *\("BLANK","title") = Any }

let Link : schema = { "URIDictionary" = URIDict, 
		      "URLString" = Value, 
		      * \ ("URIDictionary","URLString") = Any }
    
let Folder : schema = { "Children" = (List.T Item), 
			"Title" = Value, 
			* \ ("Children","Title") = Any }
                    | { "Title" = Value, 
			* \ ("Children","Title") = Any }

and Item : schema = { "folder" = Folder } 
                  | { "link" = Link } 
                  | { "proxy" = Any }
      
let SafAbstract : schema = List.T Item

(* --------------- lenses --------------- *)    
(* recursively applies item to all children, and    *)
(* puts the data under a link, folder, or proxy key *)
let children : lens = 
  wmap { "array" -> 
	   List.map 
	     (item; 
	      pivot "WebBookmarkType";
	      rename_if_present "WebBookmarkTypeLeaf" "link";
	      rename_if_present "WebBookmarkTypeList" "folder";
	      rename_if_present "WebBookmarkTypeProxy" "proxy")};
  hoist "array"
    
and item : lens = 
  (* flattens the item *)
  Plist.flatten_dict;
  
  (* if the item is a dict and does not have children, we add an empty list of children *)
  acond 
    { * \ ("Children" ,"URIDictionary","BLANK") = Any}
    { "Children" = { "array" = [] }, * \ ("Children") = Any} 
    (add "Children" {"array"=[]}) 
    id;

  (* hoist values and recursively applies children or item if needed *)
  wmap { "Children" -> children,
    "URIDictionary" -> item,
      "URLString" -> hoist "string",
	"WebBookmarkType" -> hoist "string",
	  "title" -> hoist "string",
	    "Title" -> hoist "string",
	      "BLANK" -> hoist "string"
       }
    
(* l is for homogeneous synchronization of safari bookmarks *)
let l : lens =
  (** We lack an assert SafConcrete here :( *)
  Plist.l;
  Plist.flatten_dict;
  (* discard all the other meta info *)
  focus "Children" 
    {WebBookmarkFileVersion = {integer = {"" = [{PCDATA = {1}}]}},
     WebBookmarkType = {string = {WebBookmarkTypeList}},
     WebBookmarkUUID = {string = {00000000-0000-0000-0000-000000000000}}};
  children;
  assert SafAbstract

(* tidy removes from the tree the safari-specific contents  *)
(* and returns a tree following the Common.Abstract schema *)
let tidy : lens =  
  let tidy_folder : lens = 
    rename "Children" "contents"; 
    wmap {"contents" -> tidy }; 
    rename "Title" "name"; 
    filter {"name", "contents"} {} in  
  let tidy_link : lens =
    rename "URLString" "url";
    wmap  { "URIDictionary" -> (rename "title" "name"; filter {"BLANK", "name"} {})};
    hoist_nonunique "URIDictionary" {"name", "BLANK"};
    merge "url" "BLANK";
    filter {"name", "url"} {} in
  
  let skip_proxies : lens =
    ccond ({"proxy"=Any}::Any) 
      (wmap { `List.TL -> skip_proxies }; List.tl {"proxy"={}})
      (wmap { `List.TL -> skip_proxies})
  in
    skip_proxies;
    List.map (wmap {"folder" -> tidy_folder, "link" -> tidy_link};
	      acond { "link" = Any } { "link" = Any }
		id
		(hoist "folder"))
    
(* l2 is for heterogeneous synchronization of safari bookmarks *)    
let l2 : lens = l; tidy; 
  Common.rename_bookmarksbar;
  wmap { `List.TL -> 
           begin
	     List.hd [];
	     focus "contents" { "name" = {"BookmarksMenu"} }
	   end }

(* l3 uses the unordered schema Common.BushAbstract *)
let l3 : lens = l2; Common.flatten_bookmarks


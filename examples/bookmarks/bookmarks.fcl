module Bookmarks =
  
(* --------------- SCHEMAS --------------- *)

(* abstract schema for heterogeneous synchronization *)
schema Link   = { "name" = Value, "url"=Value }
schema Folder = { "name" = Value, "contents" = Contents }     
and Contents  = List.T (Folder | {"link" =  Link})
schema Abstract = { "toolbar" = Contents, "bookmarks" = Contents }

(* alternate "flattened" schema with flexible alignment *)
schema Item = { ?"folders" = {*=Item}, ?"links" = { * = Value } }
schema BushAbstract = { "toolbar" = Item, "bookmarks" = Item }
      
(* ---------------- LENSES ---------------*)

(* flatten_to_bush :: Abstract <=> BushAbstract *)
let flatten_to_bush : lens = 
  List.map 
    (ccond { "contents"=Contents, "name"=Value } 
       (pivot "name"; map (hoist "contents"; protect (flatten_to_bush)); plunge "folders")
       (rename "link" "links"; wmap { "links" -> pivot "url"; map (hoist "name") }));
  List.flatten;
  wmap { "folders" -> List.flatten; map (List.hd []),
           "links" -> List.flatten; map (List.hd []) }
    
let flatten_bookmarks : lens = map flatten_to_bush

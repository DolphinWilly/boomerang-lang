<xcard>

<vcard>
<n>** THIRD ADDRESS BOOK DEMO</n>
<note>*

Now let us look at some subtleties in the treatment of phone numbers.  In
the concrete XML format, there can be any number of (so-called) telephone
entries, with tags tel-home, tel-work, tel-cell, email, and fax.  In the
abstract tree, all the entries of each sort are collected into a list.

Check out how this works by looking at the address entries below and the
corresponding records in the abstract tree.  Try editing some of the records
and see what happens.  (Also, try editing some of the information in the
abstract tree and see how it gets propagated back to the concrete one.)

When you're done playing with this, read on to find about the remaining demos.
(They involve comma-separated-value [csv] files, so there is no convenient
place to put long notes!)

The other concrete address format that we've implemented so far is a pretty
straightforward database-like representation.  (In fact, it's exactly the
format understood by the pilot-address utility from the pilot-link suite of
PalmOS tools for Unix.)  This is a much simpler representation than the XML
one; the only tricky bit is that (following Palm's funny format for address
records) there are several columns allocated jointly to telephone numbers of
all varieties.  The particular variety of each number is represented by a
tag in front of the number itself.

Do [make demo4] to see the concrete CSV format and how it is mapped into the
same abstract tree format as we've already seen.  Play with editing both the
concrete and the abstract trees.

When you arre done playing with that, do [make demo5] to see a heterogeneous
synchronization between an XML address book and a CSV one.

*</note>
</vcard>

<vcard>
<n><given>John</given><family>Doe</family></n>
<tel-home>123-4567</tel-home>
</vcard>

<vcard>
<n><given>Joe</given><family>Jones</family></n>
<tel-home>111-1111</tel-home>
<tel-work>999-9999</tel-work>
<tel-home>222-2222</tel-home>
<tel-home>333-3333</tel-home>
</vcard>


</xcard>

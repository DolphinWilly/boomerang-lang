--- THINGS TO DO ---

BUGS 

*** Misc.format_to_string is very broken. In fact, I think the whole
    concept is bogus, given the way that Format works. Better is to
    change each format_t function to take a formatter as an
    argument. Then format_to_string simply calls the right fformat
    string with a formatter created from a fresh buffer.
** Parser needs to catch exceptions thrown in Dbschema.ml.
* fixes in examples/structuredtext/Makefile should be propagaged to other
  examples Makefiles
* I think the problem is here, in harmonize-addresses.ml:
    let _ =
      let read_tbl =
        let fixup_header s =
          (* This is pretty inefficient!! *)
          let lines = Util.splitIntoWords s '\n' in
  if I understand the following correctly (in ubase/util.ml):
    let splitIntoWords (s:string) (c:char) =
      let rec inword acc start pos =
        if pos >= String.length(s) || s.[pos] = c then
          betweenwords ((String.sub s start (pos-start)) :: acc) pos
        else inword acc start (pos+1)
      and betweenwords acc pos =
        if pos >= (String.length s) then (Safelist.rev acc)
        else if s.[pos]=c then betweenwords acc (pos+1)
        else inword acc pos pos
      in betweenwords [] 0
  consecutive separators are just dismissed. The "correct" implementation 
  may be:
    let splitIntoWords (s:string) (c:char) =
      let rec inword acc start pos =
        if pos >= String.length(s) || s.[pos] = c then
          betweenwords ((String.sub s start (pos-start)) :: acc) pos
        else inword acc start (pos+1)
      and betweenwords acc pos =
        if pos >= (String.length s) then (Safelist.rev acc)
        else if s.[pos]=c then betweenwords (""::acc) (pos+1)
        else inword acc pos pos
      in betweenwords [] 0
  but then I have a weird "List.combine error".
* The line 
    <?xml version="1.0" encoding="UTF-8"?>
  at the beginning of a plist file causes an error in PXP
  ===> Check if this is still the case; if so, email Gerd(?)
* Bug: in structured text demo, try completely emptying a replica
* why does - not work as an output file for csv (but works for meta, e.g.)?

FOCAL PROGRAMMING / DEMOS
** Get bookmark (and ical) demo ready for export and put them out on the
   harmony webpage
** Make it possible to run Harmony in "check" mode from the web interface
* more of the demos should display the sync output
* Dicts in plists should be represented unordered, not as lists
* move Thang's general concat into List module
* change the structured text lens so that it adds dummy headers all the
  time [bcp]
* Implement a "typeof" primitive that takes a lens and a source schema and
  calculates the target schema
* Add a > predicate so that we can express the dblenses example more directly
* Add a bijective probe (called what?) that only prints its abstract
  argument in the PUT direction (because the concrete one will often be
  MISSING, because of the type-based optimization in compose2)

FOCAL SYNTAX 
** Need to document all the recent additions (databases, etc.)
* Perhaps we should make '-' an illegal character in (unquoted) identifiers
  -- or perhaps just at the end of identifiers -- so that Album->Quantity
  does not get mis-lexed!  (Or perhaps the lexer can recognize this special case?)
* BCP: I am getting more and more annoyed with the way we write string
  constants sometimes with quotes and sometimes without (and the
  corresponding backquote syntax, etc.).  Makes me really start to wish for
  a more uniform syntax -- e.g., where *all* variables everywhere would be
  marked in some way, like $x or `x.  Then a bare identifier would be a
  constant in all contexts.  The $ or ` notation would also serve for
  anti-quotation of larger expressions, as in $(l foo) or `(l foo).  
* Another concrete syntax issue I just learned the hard way: The predicate
  (Quantity <> 0) does not mean what you think it does at the moment 
* Add concrete syntax for "long strings" (for big unit tests), in the
  style of bash/perl/etc:   <<<XXX ... XXX  

UNISON INTEGRATION
* make Unison permit missing archives (after confirming that it's OK).
* check for bad unison behavior
    make conflicting changes to todo.txt
    run unison/harmony twice
    note that second time no differences are reported!
  ==> Recheck and fix

SMALL IMPROVEMENTS
** metay and metal should be dead code now -- delete
** finish "omake install"
* some of the options (logfile, addprefsto) don't make sense for Harmony
  and should be suppressed
* make native assert function take a string arg

TIDYING
*** make sure GPL/whatever is stated correctly for external modules
* put LGPL notice in all files

LENSES
* new primitive:  hoistAny (which acts like hoist except that it doesn't
                    care what name the edge it's clipping out has; takes a
                    default name for the put case)
   also hoist becomes hoist_unique
* think about / implement / write down 
     swap
     join-all
     swap_consecutive_kids   
     swap_immediate_kids   [Nate]
* remove iter in favor of primitive fold_left (or reverse)  [Nate]

SYNC ALGORITHM
* memoize equality checks  (probably useful at some point, but not 
  high priority)

THINGS TO THINK ABOUT LATER
* Check "Set-Oriented Transformers," Srivastava, DBPL 2001
* Contact Doug Terry and Make Dahlin (UT Austin) and check out their current
  related research.  

DEMO IDEAS
* bibtex (XML only!); 
* group calendar 

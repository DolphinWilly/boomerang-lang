#{@}

\section{Module {\tt Plist}}
\label{sec:plist}

The @plist@ format is a generic XML representation for structured data
(strings, arrays, and finite maps).  It is heavily used in OS X---for
storage of application preference files, system configuration information,
etc.  

##module Plist =

The core of the module is a group of mutually recursive lenses that walk
over the plist structure and perform an appropriate transformation at each
node.  
#{*}
let plist_object_lens : lens =
  wmap { "dict" -> dict_lens,
         "array" -> array_lens,
         "string" -> leaf_lens }

and array_lens : lens =
  wmap {`Xml.CHILDREN -> List.map plist_object_lens};
  hoist Xml.CHILDREN

and dict_lens : lens =
  wmap {`Xml.CHILDREN -> List.groupby2; List.map (keypair_lens)};
  hoist Xml.CHILDREN

and keypair_lens : lens =
  wmap { `(List.HD) -> hoist "key"; leaf_lens, 
         `(List.TL) -> wmap { `(List.HD) -> plist_object_lens } }

and leaf_lens : lens =
  hoist Xml.CHILDREN;
  acond [] { `(List.TL)=[], `(List.HD)={` Xml.PCDATA = {"BLANK"={}, *\("BLANK")=Any}}}
    (const [{`Xml.PCDATA={"BLANK"}}] [])
    id;
  List.hd [];
  hoist Xml.PCDATA
#{@}

The module's main lens, @l@, deals with a little top-level boilerplate and
invokes @plist_object_lens@ to process the body of the file.
#{*}
let l : lens =
  List.hd [];
  hoist "plist";
  focus Xml.CHILDREN { "version" = {"1.0"} };
  List.hd [];
  plist_object_lens
#{@}
    
Finally, the utility lens @flatten_dict@ takes an ordered dictionary
structure and flattens it into a bush of the form %
@{ key1 = data1, key2 = data2, ... }@.
#{*}
let flatten_dict : lens =
  hoist "dict";
  List.map ( pivot List.HD;  map (focus List.TL {}; List.hd []) );
  List.flatten;
  map (List.hd [])
#{@}



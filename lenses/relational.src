#{#}
module Relational =

let norm (db : view) : view = Prelude.map Native.listsort / db

let bd_a = { nm = Alice, mon = June,     day = 12 }
let bd_b = { nm = Bob,   mon = December, day = 13 }
let bd_c = { nm = Carol, mon = October,  day = 31 }
let bd_d = { nm = Dave,  mon = June,     day = 13 }
let bd_e = { nm = Ellen, mon = February, day = 29 }
let bd_f = { nm = Fred , mon = August,   day = 15 }

let ph_a = { nm = Alice, ph = "555-555-5555" }
let ph_b = { nm = Bob,   ph = "123-456-7890" }
let ph_c = { nm = Carol, ph = "314-159-2653" }

let a = bd_a
let b = bd_b
let c = bd_c
let d = bd_d
let e = bd_e
let f = bd_f


(* RENAME *)

let rename : (name -> name -> name -> name -> lens) = Native.Relational.rename

(* RENAME TESTS *)

let rename_nm (n : name) (v : view) : view =
  Prelude.rename "nm" n / v

test
  norm (rename "nm" "nm" "bdays" "bdays" /
    { bdays = [ `bd_a, `bd_c ]
    , phnums = [ `ph_a, `ph_b ]
    }
  )
= norm (
    { bdays = [ `bd_a, `bd_c ]
    , phnums = [ `ph_a, `ph_b ]
    }
  )

test
  norm (rename "nm" "name" "bdays" "bdays" /
    { bdays = [ `bd_a, `bd_c ]
    , phnums = [ `ph_a, `ph_b ]
    }
  )
= norm (
    { bdays = [ `(rename_nm "name" bd_a), `(rename_nm "name" bd_c) ]
    , phnums = [ `ph_a, `ph_b ]
    }
  )

test
  norm (rename "nm" "name" "bdays" "birthdays" /
    { bdays = [ `bd_a, `bd_c ]
    , phnums = [ `ph_a, `ph_b ]
    }
  )
= norm (
    { birthdays = [ `(rename_nm "name" bd_a), `(rename_nm "name" bd_c) ]
    , phnums = [ `ph_a, `ph_b ]
    }
  )

test
  norm (rename "nm" "name" "bdays" "phnums" /
    { bdays = [ `bd_a, `bd_c ]
    , phnums = [ `ph_a, `ph_b ]
    }
  )
= error (* the table "phnums" already exsits *)

test
  norm (rename "nm" "day" "bdays" "bdays" /
    { bdays = [ `bd_a, `bd_c ]
    , phnums = [ `ph_a, `ph_b ]
    }
  )
= error (* the field "day" already exsits *)

test
  norm (rename "foo" "name" "bdays" "bdays" /
    { bdays = [ `bd_a, `bd_c ]
    , phnums = [ `ph_a, `ph_b ]
    }
  )
= error (* the field "foo" does not exsit *)

test
  norm (rename "nm" "name" "bdays" "bdays" \
    { bdays = [ `(rename_nm "name" bd_a), `(rename_nm "name" bd_b) ]
    , phnums = [ `ph_a, `ph_c ]
    , phnums2 = [ `ph_b ]
    }
    { bdays = [ `bd_a, `bd_c ]
    , phnums = [ `ph_a, `ph_b ]
    }
  )
= norm (
    { bdays = [ `bd_a, `bd_b ]
    , phnums = [ `ph_a, `ph_c ]
    , phnums2 = [ `ph_b ]
    }
  )

test
  norm (rename "nm" "name" "bdays" "bdays" \
    { bdays = [ `(rename_nm "name" bd_a), `(rename_nm "name" bd_b) ]
    , phnums = [ `ph_a, `ph_c ]
    , phnums2 = [ `ph_b ]
    }
    missing
  )
= norm (
    { bdays = [ `bd_a, `bd_b ]
    , phnums = [ `ph_a, `ph_c ]
    , phnums2 = [ `ph_b ]
    }
  )

test
  norm (rename "nm" "name" "bdays" "bdays" \
    { bdays = [ `bd_a, `bd_b ]
    , phnums = [ `ph_a, `ph_c ]
    , phnums2 = [ `ph_b ]
    }
    { bdays = [ `bd_a, `bd_c ]
    , phnums = [ `ph_a, `ph_b ]
    }
  )
= error (* "name" is not a column name in the abstract view *)

test
  norm (rename "nm" "name" "birthdays" "bdays" \
    { bdays = [ `(rename_nm "name" bd_a), `(rename_nm "name" bd_b) ]
    , phnums = [ `ph_a, `ph_c ]
    , phnums2 = [ `ph_b ]
    }
    { bdays = [ `bd_a, `bd_c ]
    , phnums = [ `ph_a, `ph_b ]
    }
  )
= error (* "birthdays" is not a table in the concrete view *)

(* Definitions for testing union, intersection, and difference. *)

  let mixed_db =
    { birthdays = [ `bd_a, `bd_b ]
    , phonebook = [ `ph_a, `ph_b ]
    }

  let bday_db_abc_bde =
    { birthdays1 = [ `bd_a, `bd_b, `bd_c ]
    , birthdays2 = [ `bd_b, `bd_d, `bd_e ]
    }

  let bday_db_abcd =
    { birthdays = [ `bd_a, `bd_b, `bd_c, `bd_d ]
    }

  let bday_db_abcde =
    { birthdays = [ `bd_a, `bd_b, `bd_c, `bd_d, `bd_e ]
    }

  let bday_db_b =
    { birthdays = [ `bd_b ]
    }

  let bday_db_b_b =
    { birthdays1 = [ `bd_b ]
    , birthdays2 = [ `bd_b ]
    }

  let bday_db_abcde_abcde =
    { birthdays1 = [ `bd_a, `bd_b, `bd_c, `bd_d, `bd_e ]
    , birthdays2 = [ `bd_a, `bd_b, `bd_c, `bd_d, `bd_e ]
    }

  let bday_db_abcde_ =
    { birthdays1 = [ `bd_a, `bd_b, `bd_c, `bd_d, `bd_e ]
    , birthdays2 = [ ]
    }

  let bday_db__abcde =
    { birthdays1 = [ ]
    , birthdays2 = [ `bd_a, `bd_b, `bd_c, `bd_d, `bd_e ]
    }

  let bday_db_cef =
    { birthdays = [ `bd_c, `bd_e, `bd_f ]
    }

  let bday_db_cf_ef =
    { birthdays1 = [ `bd_c, `bd_f ]
    , birthdays2 = [ `bd_e, `bd_f ]
    }

  let bday_db_cf_e =
    { birthdays1 = [ `bd_c, `bd_f ]
    , birthdays2 = [ `bd_e ]
    }

  let bday_db_c_ef =
    { birthdays1 = [ `bd_c ]
    , birthdays2 = [ `bd_e, `bd_f ]
    }

  let bday_db_acef_cdef =
    { birthdays1 = [ `bd_a, `bd_c, `bd_e, `bd_f ]
    , birthdays2 = [ `bd_c, `bd_d, `bd_e, `bd_f ]
    }

  let bday_db_acef_bcdef =
    { birthdays1 = [ `bd_a, `bd_c, `bd_e, `bd_f ]
    , birthdays2 = [ `bd_b, `bd_c, `bd_d, `bd_e, `bd_f ]
    }

  let bday_db_abcef_cdef =
    { birthdays1 = [ `bd_a, `bd_b, `bd_c, `bd_e, `bd_f ]
    , birthdays2 = [ `bd_c, `bd_d, `bd_e, `bd_f ]
    }


(* UNION *)

let union : (name -> name -> name -> lens) = Native.Relational.union

test
  norm (union "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl4 = [ `a, `b, `c, `d, `e ]
    }
  )

test
  norm (union "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* "tbl2" doesn't exist *)

test
  norm (union "tbl1" "tbl2" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* table domains do not match *)

test
  norm (union "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a, `b, `c, `d, `e ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    , tbl5 = [ `e, `f ]
    }
  )

test
  norm (union "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a, `b, `c, `d, `e ]
    }
    missing
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c, `d, `e ]
    , tbl3 = [ `a, `b, `c, `d, `e ]
    }
  )

test
  norm (union "tbl2" "tbl3" "tbl4" \
    { tbl4 = [ `c, `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl2 = [ `c, `f ]
    , tbl3 = [ `e, `f ]
    }
  )

test
  norm (union "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* "tbl4" does not exist in the abstract view *)

test
  norm (union "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a, `b, `c, `d, `e ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    }
  )
= error (* table "tbl3" does not exist in the concrete view *)


let unionl : (name -> name -> name -> lens) = Native.Relational.unionl

test
  norm (unionl "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl4 = [ `a, `b, `c, `d, `e ]
    }
  )

test
  norm (unionl "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* "tbl2" doesn't exist *)

test
  norm (unionl "tbl1" "tbl2" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* table domains do not match *)

test
  norm (unionl "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a, `b, `c, `d, `e ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    , tbl5 = [ `e, `f ]
    }
  )

test
  norm (unionl "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a, `b, `c, `d, `e ]
    }
    missing
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c, `d, `e ]
    , tbl3 = [ ]
    }
  )

test
  norm (unionl "tbl2" "tbl3" "tbl4" \
    { tbl4 = [ `c, `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl2 = [ `c, `f ]
    , tbl3 = [ `e ]
    }
  )

test
  norm (unionl "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* "tbl4" does not exist in the abstract view *)

test
  norm (unionl "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a, `b, `c, `d, `e ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    }
  )
= error (* table "tbl3" does not exist in the concrete view *)


let unionr : (name -> name -> name -> lens) = Native.Relational.unionr

test
  norm (unionr "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl4 = [ `a, `b, `c, `d, `e ]
    }
  )

test
  norm (unionr "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* "tbl2" doesn't exist *)

test
  norm (unionr "tbl1" "tbl2" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* table domains do not match *)

test
  norm (unionr "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a, `b, `c, `d, `e ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    , tbl5 = [ `e, `f ]
    }
  )

test
  norm (unionr "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a, `b, `c, `d, `e ]
    }
    missing
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ ]
    , tbl3 = [ `a, `b, `c, `d, `e ]
    }
  )

test
  norm (unionr "tbl2" "tbl3" "tbl4" \
    { tbl4 = [ `c, `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl2 = [ `c ]
    , tbl3 = [ `e, `f ]
    }
  )

test
  norm (unionr "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* "tbl4" does not exist in the abstract view *)

test
  norm (unionr "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a, `b, `c, `d, `e ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    }
  )
= error (* table "tbl3" does not exist in the concrete view *)


(* INTERSECTION *)

let inter : (name -> name -> name -> lens) = Native.Relational.inter

test
  norm (inter "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl4 = [ `b ]
    }
  )

test
  norm (inter "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* "tbl2" doesn't exist *)

test
  norm (inter "tbl1" "tbl2" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* table domains do not match *)

test
  norm (inter "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `b ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    , tbl5 = [ `e, `f ]
    }
  )

test
  norm (inter "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `b ]
    }
    missing
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `b ]
    , tbl3 = [ `b ]
    }
  )

test
  norm (inter "tbl2" "tbl3" "tbl4" \
    { tbl4 = [ `c, `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl2 = [ `a, `c, `e, `f ]
    , tbl3 = [ `c, `d, `e, `f ]
    }
  )

test
  norm (inter "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* "tbl4" does not exist in the abstract view *)

test
  norm (inter "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `b ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    }
  )
= error (* table "tbl3" does not exist in the concrete view *)


let interl : (name -> name -> name -> lens) = Native.Relational.interl

test
  norm (interl "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl4 = [ `b ]
    }
  )

test
  norm (interl "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* "tbl2" doesn't exist *)

test
  norm (interl "tbl1" "tbl2" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* table domains do not match *)

test
  norm (interl "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `b ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    , tbl5 = [ `e, `f ]
    }
  )

test
  norm (interl "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `b ]
    }
    missing
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `b ]
    , tbl3 = [ `b ]
    }
  )

test
  norm (interl "tbl2" "tbl3" "tbl4" \
    { tbl4 = [ `c, `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl2 = [ `a, `c, `e, `f ]
    , tbl3 = [ `b, `c, `d, `e, `f ]
    }
  )

test
  norm (interl "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* "tbl4" does not exist in the abstract view *)

test
  norm (interl "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `b ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    }
  )
= error (* table "tbl3" does not exist in the concrete view *)


let interr : (name -> name -> name -> lens) = Native.Relational.interr

test
  norm (interr "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl4 = [ `b ]
    }
  )

test
  norm (interr "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* "tbl2" doesn't exist *)

test
  norm (interr "tbl1" "tbl2" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* table domains do not match *)

test
  norm (interr "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `b ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    , tbl5 = [ `e, `f ]
    }
  )

test
  norm (interr "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `b ]
    }
    missing
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `b ]
    , tbl3 = [ `b ]
    }
  )

test
  norm (interr "tbl2" "tbl3" "tbl4" \
    { tbl4 = [ `c, `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= norm (
    { tbl2 = [ `b, `a, `c, `e, `f ]
    , tbl3 = [ `c, `d, `e, `f ]
    }
  )

test
  norm (interr "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `d, `e ]
    }
  )
= error (* "tbl4" does not exist in the abstract view *)

test
  norm (interr "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `b ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    }
  )
= error (* table "tbl3" does not exist in the concrete view *)


(* DIFFERENCE *)

let diff : (name -> name -> name -> lens) = Native.Relational.diff

test
  norm (diff "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl4 = [ `a ]
    }
  )

test
  norm (diff "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= error (* "tbl2" doesn't exist *)

test
  norm (diff "tbl1" "tbl2" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= error (* table domains do not match *)

test
  norm (diff "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    , tbl5 = [ `e, `f ]
    }
  )

test
  norm (diff "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a ]
    }
    missing
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a ]
    , tbl3 = [ ]
    }
  )

test
  norm (diff "tbl2" "tbl3" "tbl4" \
    { tbl4 = [ `c, `d, `e ]
    }
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= norm (
    { tbl2 = [ `b, `c, `d, `e ]
    , tbl3 = [ `a, `b ]
    }
  )

test
  norm (diff "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    }
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= error (* "tbl4" does not exist in the abstract view *)

test
  norm (diff "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a ]
    }
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    }
  )
= error (* "tbl3" does not exist in the concrete view *)


let diffl : (name -> name -> name -> lens) = Native.Relational.diffl

test
  norm (diffl "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl4 = [ `a ]
    }
  )

test
  norm (diffl "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= error (* "tbl2" doesn't exist *)

test
  norm (diffl "tbl1" "tbl2" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= error (* table domains do not match *)

test
  norm (diffl "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    , tbl5 = [ `e, `f ]
    }
  )

test
  norm (diffl "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a ]
    }
    missing
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a ]
    , tbl3 = [ ]
    }
  )

test
  norm (diffl "tbl2" "tbl3" "tbl4" \
    { tbl4 = [ `c, `d, `e ]
    }
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= norm (
    { tbl2 = [ `b, `c, `d, `e ]
    , tbl3 = [ `b ]
    }
  )

test
  norm (diffl "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    }
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= error (* "tbl4" does not exist in the abstract view *)

test
  norm (diffl "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a ]
    }
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    }
  )
= error (* "tbl3" does not exist in the concrete view *)


let diffr : (name -> name -> name -> lens) = Native.Relational.diffr

test
  norm (diffr "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl4 = [ `a ]
    }
  )

test
  norm (diffr "tbl2" "tbl3" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= error (* "tbl2" doesn't exist *)

test
  norm (diffr "tbl1" "tbl2" "tbl4" /
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= error (* table domains do not match *)

test
  norm (diffr "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a ]
    , tbl5 = [ `e, `f ]
    }
    { tbl1 = [ `ph_a, `ph_b ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    , tbl5 = [ `e, `f ]
    }
  )

test
  norm (diffr "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a ]
    }
    missing
  )
= norm (
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a ]
    , tbl3 = [ ]
    }
  )

test
  norm (diffr "tbl2" "tbl3" "tbl4" \
    { tbl4 = [ `c, `d, `e ]
    }
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= norm (
    { tbl2 = [ `a, `b, `c, `d, `e ]
    , tbl3 = [ `a, `b ]
    }
  )

test
  norm (diffr "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    }
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    , tbl3 = [ `b, `c, `d ]
    }
  )
= error (* "tbl4" does not exist in the abstract view *)

test
  norm (diffr "tbl2" "tbl3" "tbl4" \
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl4 = [ `a ]
    }
    { tbl1 = [ `ph_a, `ph_c ]
    , tbl2 = [ `a, `b, `c ]
    }
  )
= error (* "tbl3" does not exist in the concrete view *)


(* SELECT *)

let select : (name -> name -> name -> name -> lens) =
  Native.Relational.select
let select_eq : (name -> name -> name -> name -> lens) =
  Native.Relational.select_eq


(* PROJECT *)

let project : (view -> view -> view -> name -> name -> lens) =
  Native.Relational.project


(* JOIN *)

let join : (name -> name -> name -> lens) = Native.Relational.join
let joinl : (name -> name -> name -> lens) = Native.Relational.joinl
let joinr : (name -> name -> name -> lens) = Native.Relational.joinr


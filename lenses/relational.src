\section{Module {\tt Relational}}

#{#}
module Relational =

let norm (r : view) : view = Prelude.map Native.listsort / r

let rcd1 = { first = "Aaron", last = "Bohannon", email = "aaron@cis" }
let rcd1' = { first = "Aaron", lastname = "Bohannon", email = "aaron@cis" }
let rcd2 = { first = "Nate", last = "Foster", email = "nate@cis" }
let rcd2' = { first = "Nate", lastname = "Foster", email = "nate@cis" }
let rcd3 = { first = "Jeff", last = "Vaughan", email = "jeff@cis" }
let addrbook = {
  tbl1 = [ `rcd1, `rcd2 ],
  tbl2 = [ `rcd1, `rcd2, `rcd3 ]
}
let addrbook' = {
  tbl1 = [ `rcd1', `rcd2' ],
  tbl2 = [ `rcd1, `rcd2, `rcd3 ]
}

(*
let db = {
  birthdays = [
    { name = Alice, month = June, day = 12 },
    { name = Bob, month = December, day = 13 },
    { name = Carol, month = October, day = 31 }
  ]
}
*)

let rename : (name -> name -> name -> name -> lens) = Native.Relational.rename
test
  norm (rename "last" "lastname" "tbl1" "tbl1" / addrbook)
=
  norm addrbook'
test
  norm (rename "lastname" "last" "tbl1" "tbl1" / addrbook)
=
  error

let union : (name -> name -> name -> lens) = Native.Relational.union
let unionl : (name -> name -> name -> lens) = Native.Relational.unionl
let unionr : (name -> name -> name -> lens) = Native.Relational.unionr

let inter : (name -> name -> name -> lens) = Native.Relational.inter
let interl : (name -> name -> name -> lens) = Native.Relational.interl
let interr : (name -> name -> name -> lens) = Native.Relational.interr

let diff : (name -> name -> name -> lens) = Native.Relational.diff
let diffl : (name -> name -> name -> lens) = Native.Relational.diffl
let diffr : (name -> name -> name -> lens) = Native.Relational.diffr

let select : (name -> name -> name -> name -> lens) =
  Native.Relational.select
let select_eq : (name -> name -> name -> name -> lens) =
  Native.Relational.select_eq

let project : (view -> view -> view -> name -> name -> lens) =
  Native.Relational.project

let join : (name -> name -> name -> lens) = Native.Relational.join
let joinl : (name -> name -> name -> lens) = Native.Relational.joinl
let joinr : (name -> name -> name -> lens) = Native.Relational.joinr


#{#}
module Relational =

let norm (db : view) : view = Prelude.map Native.listsort / db

let bd_alice0 (n : name) : view =
  Prelude.rename "foo" n / { foo = Alice, month = June, day = 12 }

let bd_alice (n : name) : view = { `n = Alice, month = June,     day = 12 }
let bd_bob   (n : name) : view = { `n = Bob,   month = December, day = 13 }
let bd_carol (n : name) : view = { `n = Carol, month = October,  day = 31 }
let bd_dave  (n : name) : view = { `n = Dave,  month = June,     day = 13 }
let bd_ellen (n : name) : view = { `n = Ellen, month = February, day = 29 }

let mk_bday_db0 (n : name) : view =
  { birthdays =
    [ `(bd_alice0 n), `(bd_bob n), `(bd_carol n) ]
  }

let mk_bday_db1 (n : name) : view =
  { birthdays =
    [ `(bd_alice n), `(bd_bob n), `(bd_carol n) ]
  }

let rename : (name -> name -> name -> name -> lens) = Native.Relational.rename

test
  norm (rename "person" "nm" "birthdays" "birthdays" / mk_bday_db1 "person")
= norm (mk_bday_db1 "nm")

test
  norm (rename "person" "day" "birthdays" "birthdays" / mk_bday_db1 "person")
= error (* "day" already exists *)

test
  norm (rename "foo" "bar" "birthdays" "birthdays" / mk_bday_db1 "person")
= error (* "foo" does not exist *)

let union : (name -> name -> name -> lens) = Native.Relational.union
let unionl : (name -> name -> name -> lens) = Native.Relational.unionl
let unionr : (name -> name -> name -> lens) = Native.Relational.unionr

let inter : (name -> name -> name -> lens) = Native.Relational.inter
let interl : (name -> name -> name -> lens) = Native.Relational.interl
let interr : (name -> name -> name -> lens) = Native.Relational.interr

let diff : (name -> name -> name -> lens) = Native.Relational.diff
let diffl : (name -> name -> name -> lens) = Native.Relational.diffl
let diffr : (name -> name -> name -> lens) = Native.Relational.diffr

let select : (name -> name -> name -> name -> lens) =
  Native.Relational.select
let select_eq : (name -> name -> name -> name -> lens) =
  Native.Relational.select_eq

let project : (view -> view -> view -> name -> name -> lens) =
  Native.Relational.project

let join : (name -> name -> name -> lens) = Native.Relational.join
let joinl : (name -> name -> name -> lens) = Native.Relational.joinl
let joinr : (name -> name -> name -> lens) = Native.Relational.joinr


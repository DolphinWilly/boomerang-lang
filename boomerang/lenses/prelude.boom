module Prelude =

(* polymorphic operators *)
let copy = Native.Prelude.copy
let const = Native.Prelude.const 
let shortest = Native.Prelude.shortest
let poly_concat = Native.Prelude.poly_concat
let poly_union = Native.Prelude.poly_union
let poly_iter = Native.Prelude.poly_iter
let poly_swap = Native.Prelude.poly_swap

(* lens operations *)
let pget : lens -> string -> string = 
  Native.Prelude.get
let pput : lens -> string -> string -> string = 
  Native.Prelude.put
let pcreate : lens -> string -> string =
  Native.Prelude.create
let invert : lens -> lens =
  Native.Prelude.invert
let concat : lens -> lens -> lens =
  Native.Prelude.concat
let union : lens -> lens -> lens =
  Native.Prelude.union
let star : lens -> lens =
  Native.Prelude.star
let dmatch : string -> lens -> lens = 
  Native.Prelude.dmatch
let swap : lens -> lens -> lens =
  Native.Prelude.swap
let compose : lens -> lens -> lens =
  Native.Prelude.compose
let default : lens -> string -> lens =
  Native.Prelude.default
let key : regexp -> lens =
  Native.Prelude.key
let duplicate : lens -> lens -> lens -> lens = 
  Native.Prelude.duplicate
let duplicate_snd : lens -> lens -> lens -> lens = 
  Native.Prelude.duplicate_snd
let count : regexp -> lens =
  Native.Prelude.count
let forgetkey : lens -> lens = 
  Native.Prelude.forgetkey
let filter : regexp -> regexp -> lens = 
  Native.Prelude.filter
  
(* canonizer operations *)
let cls : canonizer -> string -> string =
  Native.Prelude.cls
let rep : canonizer -> string -> string = 
  Native.Prelude.rep
let left_quot : canonizer -> lens -> lens = 
  Native.Prelude.left_quot
let right_quot : lens -> canonizer -> lens =
  Native.Prelude.right_quot
let columnize : string -> regexp -> string -> string -> canonizer = 
  Native.Prelude.columnize

(* string operations *)
let append : string -> string -> string = 
  Native.Prelude.append
let read : string -> string = 
  Native.Prelude.read

(* regexp operations *)
let str : string -> regexp =
  Native.Prelude.str
let empty : regexp = 
  Native.Prelude.empty
let seq : regexp -> regexp -> regexp = 
  Native.Prelude.seq
let alt : regexp -> regexp -> regexp = 
  Native.Prelude.alt
let iter : regexp -> regexp = 
  Native.Prelude.iter
let inter : regexp -> regexp -> regexp = 
  Native.Prelude.inter
let diff : regexp -> regexp -> regexp = 
  Native.Prelude.diff
let equiv : regexp -> regexp -> string = 
  Native.Prelude.equiv

(* run-time checking *)
let assert : regexp -> regexp -> lens -> lens = 
  Native.Prelude.assert
let assert_ctype : regexp -> lens -> lens = 
  Native.Prelude.assert_ctype
let assert_atype  : regexp -> lens -> lens = 
  Native.Prelude.assert_atype
let ctype : lens -> regexp = 
  Native.Prelude.ctype
let atype : lens -> regexp =
  Native.Prelude.atype

(* coercions *)
let canonizer_of_lens : lens -> canonizer = 
  Native.Prelude.canonizer_of_lens
let string_of_regexp : regexp -> string = 
  Native.Prelude.string_of_regexp


(* derived forms *)
let epsilon : regexp = str ""

let ins (s:string) : lens = const (str "") s "" 
let del r = const r "" (shortest r) 
let set r s = const r s (shortest r)


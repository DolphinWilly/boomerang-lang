(*******************************************************************************)
(* The Harmony Project                                                         *)
(* harmony@lists.seas.upenn.edu                                                *)
(*******************************************************************************)
(* Copyright (C) 2007 J. Nathan Foster and Benjamin C. Pierce                  *)
(*                                                                             *)
(* This library is free software; you can redistribute it and/or               *)
(* modify it under the terms of the GNU Lesser General Public                  *)
(* License as published by the Free Software Foundation; either                *)
(* version 2.1 of the License, or (at your option) any later version.          *)
(*                                                                             *)
(* This library is distributed in the hope that it will be useful,             *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of              *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU           *)
(* Lesser General Public License for more details.                             *)
(*******************************************************************************)
(* /boomerang/examples/uniProtV2.boom                                          *)
(* UniProtKB <-> SwissProt lens                                                *)
(* $Id$ *)
(*******************************************************************************)

module UniProtV2 = 

(* [bracket s] encloses [s] in bracket. *) 
let brackets (l:lens) : lens = 
  ins "[" . l . ins "]" 

let braces (l:lens) : lens = 
  ins "(" . l . ins ")"

let quotes (l:lens) : lens = 
  ins "\"" . l . ins "\"" 

let cn : canonizer = columnize [a-z0-9 ]+ " " "\n"

test   
  let R : regexp = [a-z0-9 ]+ in 
  let cn : canonizer = columnize R " " "\n" in 
  let l : lens = right_quot R cn in 
  l get
  "alpha bravo charlie delta echo foxtrot golf hotel india juliet kilo lima mike november oscar papa quebec romeo sierra tango unicorn victor whiskey xray yankee zulu zero one two tree four five six seven eight niner 12345678901234567890123456789012345678901234567890123456789012345678901234567890123"
= 
  "alpha bravo charlie delta echo foxtrot golf hotel india juliet kilo lima mike
  |november oscar papa quebec romeo sierra tango unicorn victor whiskey xray yankee
  |zulu zero one two tree four five six seven eight niner
  |12345678901234567890123456789012345678901234567890123456789012345678901234567890123"
  
(* --------------------------------------------------------------------------- *)
(* GENERIC HELPER FUNCTIONS *)

(* booleans / conditionals *)
type bool = True | False

let cond (b:bool) (l1:lens) (l2:lens) = match b with True -> l1 | False -> l2

(* sorting *)
let sort2 (l1:lens) (l2:lens) : lens = 
  ( l1 . l2
  | l2 ~ l1)

test sort2 "a" "b" get "ab" = "ab"
test sort2 "a" "b" get "ba" = "ab"

let sort3 (l1:lens) (l2:lens) (l3:lens) : lens = 
  let s23 : lens = sort2 l2 l3 in 
  ( l1 . s23
  | (l2 ~ l1) . l3
  | l3 ~ (l1 . l2)
  | s23 ~ l1 )

test sort3 "a" "b" "c" get "abc" = "abc"
test sort3 "a" "b" "c" get "acb" = "abc"
test sort3 "a" "b" "c" get "bac" = "abc"
test sort3 "a" "b" "c" get "bca" = "abc"
test sort3 "a" "b" "c" get "cab" = "abc"
test sort3 "a" "b" "c" get "cba" = "abc"

let sort4 (l1:lens) (l2:lens) (l3:lens) (l4:lens) : lens = 
  let s12 : lens = sort2 l1 l2 in 
  let s23 : lens = sort2 l2 l3 in 
  let s34 : lens = sort2 l3 l4 in 
  let s123 : lens = sort3 l1 l2 l3 in 
  let s234 : lens = sort3 l2 l3 l4 in 
  let f1324 : lens = atype l1 . (atype l3 ~ atype l2) . atype l4 in 
  ( l1 . s234 
  | s234 ~ l1
  | ((l2 . l3) ~ l1) . l4
  | (l2 ~ l1) . s34 
  | (l3 ~ s12) . l4
  | l4 ~ (l1 . s23)
  | l4 ~ ((l2 ~ l1) . l3)
  | l4 ~ (l3 ~ (l1 . l2))
  | (l3 . l4) ~ (l1 . l2) 
  | ( (l2 . l4) ~ (l1 . l3); f1324 )
  | ( (l3 ~ l1) . (l4 ~ l2); f1324 ) )

test sort4 "a" "b" "c" "d" get "abcd" = "abcd"
test sort4 "a" "b" "c" "d" get "abdc" = "abcd"
test sort4 "a" "b" "c" "d" get "acbd" = "abcd"
test sort4 "a" "b" "c" "d" get "acdb" = "abcd"
test sort4 "a" "b" "c" "d" get "adbc" = "abcd"
test sort4 "a" "b" "c" "d" get "adcb" = "abcd"
test sort4 "a" "b" "c" "d" get "bacd" = "abcd"
test sort4 "a" "b" "c" "d" get "badc" = "abcd"
test sort4 "a" "b" "c" "d" get "bcad" = "abcd"
test sort4 "a" "b" "c" "d" get "bcda" = "abcd"
test sort4 "a" "b" "c" "d" get "bdac" = "abcd"
test sort4 "a" "b" "c" "d" get "bdca" = "abcd"
test sort4 "a" "b" "c" "d" get "cabd" = "abcd"
test sort4 "a" "b" "c" "d" get "cadb" = "abcd"
test sort4 "a" "b" "c" "d" get "cbad" = "abcd"
test sort4 "a" "b" "c" "d" get "cbda" = "abcd"
test sort4 "a" "b" "c" "d" get "cdab" = "abcd"
test sort4 "a" "b" "c" "d" get "cdba" = "abcd"
test sort4 "a" "b" "c" "d" get "dabc" = "abcd"
test sort4 "a" "b" "c" "d" get "dacb" = "abcd"
test sort4 "a" "b" "c" "d" get "dbac" = "abcd"
test sort4 "a" "b" "c" "d" get "dbca" = "abcd"
test sort4 "a" "b" "c" "d" get "dcab" = "abcd"
test sort4 "a" "b" "c" "d" get "dcba" = "abcd"

(* [qconst C A a c]: is like [const C a c], but accepts all of [A] in
   the PUT/CREATE direction. *)
let qconst (C:regexp) (A:regexp) (a:string) (c:string) : lens = 
  right_quot     
    (const C a c)
    (canonizer_of_lens (const A a a))

(* [qins E e] is like [ins e], but accepts all of [E] in the
   PUT/CREATE direction *)
let qins (E:regexp) (e:string) : { "" <-> E } = 
  qconst "" E e "" 

(* [qdel E e] is like [del E] but canonizes to [e] in the PUT/CREATE
   direction. *)
let qdel (E:regexp) (e:string) : { E <-> "" } = 
  left_quot 
    (canonizer_of_lens (default (del E) e))
    ""

(* unit tests *)
test (qdel [A-Z]+ "ZZZ" get "ABC") = ""
test (qdel [A-Z]+ "ZZZ" put "" into "ABC") = "ZZZ"
  
(* --------------------------------------------------------------------------- *)
(* CONSTANTS *)

(* [ANY] any string *)
let ANY : regexp = [^]*

(* [containing R] any string containing [R] *)
let containing (R:regexp) : regexp = ANY . R . ANY

(* [NL] newline *)
let NL :string = "\n"

(* [WS] whitespace *)
let WS : regexp = [ \n]*

(* [NWS] not white space *)
let NWS : regexp = [^ \n]

(* [WSP] positive whitespace *)
let WSP : regexp = [ \n]+

(* [S] space *)
let S : regexp = [ ]*

(* [SP] positive space *)
let SP : regexp = [ ]+

let qsp : lens = qins SP " "

let qnl : lens = qins (S.NL) "\n"

(* [DIGIT] digit *)
let DIGIT : regexp = [0-9]
let FDIGIT : regexp = [0-9]

let A : regexp = [A-Za-z0-9\-.!='[\]/] 
let AP : regexp = [A-Za-z0-9\-.!='[\]/()] 
let AC : regexp = [A-Za-z0-9\-.!='[\]/:,] 
let ALPHA : regexp = A | A.(A | " ")*.A
let ALPHAP : regexp = AP | AP.(AP | " ")*.AP
let ALPHAC : regexp = AC | AC.(AC | " ")*.AC
let NUMBER : regexp = DIGIT+ 
let FNUMBER : regexp = DIGIT* . "."? . DIGIT+ 


(* [nlX]: X^th amount of whitespace--used to canonize XML *)
let nl0 = "\n"
let nl1 = nl0 . "  "
let nl2 = nl1 . "  "
let nl3 = nl2 . "  "
let nl4 = nl3 . "  "
let nl5 = nl4 . "  "
let nl6 = nl5 . "  "

(* --------------------------------------------------------------------------- *)
(* XML functions *)

(* opens and closes *)
let xml_open (spaces:string) (tag:string) : lens = 
  qdel WS spaces . 
  del ("<" . tag) 

let xml_close : lens = del (">")

let xml_open_tag (spaces:string) (tag:string) : lens = 
  xml_open spaces tag . 
  xml_close

let xml_slash_close : lens = del ("/>")

let xml_close_tag (tag:string) : lens = del ("</" . tag . ">")

(* single_line_elt: helper for processing a single-line XML element
   o spaces: default whitespace before the element
   o tag: the element's tag
   o body: lens for handling the children
*)
let xml_simple_elt (spaces:string) (tag:string) (body:lens) : lens = 
  xml_open_tag spaces tag . 
  body . 
  xml_close_tag tag

(* xml_elt: helper for processing a multi-line XML element 
   o spaces: default whitespace after the element
   o tag: the element's tag
   o body: lens for handling the children 
*)
let xml_elt (spaces:string) (tag:string) (body:lens) : lens = 
  xml_open_tag spaces tag . 
  body . 
  qdel WS spaces . 
  xml_close_tag tag
  
let xml_attr (name:string) (value:lens) : lens = 
  qdel WSP " " . 
  del name . 
  del "=\"" . 
  value . 
  del "\""
    
let xml_attr1_elt (spaces:string) (tag:string) (name:string) (value:lens) (body:lens) : lens = 
  xml_open spaces tag . 
  xml_attr name value . 
  xml_close . 
  body . 
  qdel WS spaces . 
  xml_close_tag tag 

let xml_attr1_simple_elt (spaces:string) (tag:string) (name:string) (value:lens) (body:lens) : lens = 
  xml_open spaces tag . 
  xml_attr name value . 
  xml_close . 
  body . 
  xml_close_tag tag 

let xml_attr1_elt_no_body (spaces:string) (tag:string) (name:string) (value:lens) : lens = 
  xml_open spaces tag . 
  xml_attr name value . 
  xml_slash_close

let xml_attr2_elt_no_body (spaces:string) (tag:string) 
    (name1:string) (value1:lens) 
    (name2:string) (value2:lens) : lens = 
  xml_open spaces tag . 
  sort2
    (xml_attr name1 value1) 
    (xml_attr name2 value2) . 
  xml_slash_close 

let xml_attr3_elt_no_body (spaces:string) (tag:string) 
    (name1:string) (value1:lens) 
    (name2:string) (value2:lens) 
    (name3:string) (value3:lens) : lens = 
  xml_open spaces tag . 
  sort3 
    (xml_attr name1 value1) 
    (xml_attr name2 value2)  
    (xml_attr name3 value3) .
  xml_slash_close 

(* --------------------------------------------------------------------------- *)
(* ASCII Helpers *)

let tag (t:string) : lens = 
  qins (t . SP) (t . "  ")

let default_tag (t:string) (d:string) : lens = 
  qins (t . SP) (t . d) 

let terminate (l:lens) : lens = l . qnl 

(* --------------------------------------------------------------------------- *)
(* ID line *)
let id_tag : string = "ID"
let id_data : regexp = [A-Z0-9_]{1,12}
let id_xml : lens = 
  let STATUS : regexp = SP . ("Reviewed" | "Unreviewed") . ";" in 
  let LENGTH : regexp = SP . NUMBER . " AA" in 
  let def_sl : string = " Unreviewed; 000 AA" in 
  tag "ID" . 
  xml_simple_elt nl1 "name" 
    (key id_data .
     qins (STATUS . LENGTH) def_sl)
let id_line : lens = id_xml 

(* unit tests *)
test id_line get 
  "<name>Q56J06_HUMAN</name>" 
= 
  "ID  Q56J06_HUMAN Unreviewed; 000 AA"

test id_line create 
  "ID Q5JU06_HUMAN Reviewed; 280 AA" 
= 
  "\n  <name>Q5JU06_HUMAN</name>"


(* --------------------------------------------------------------------------- *)
(* AC line *)
let ac_tag : string = "AC"
let ac_data : regexp = [A-Z0-9]{6} 
let ac_entry : regexp = ac_data . ";" 
let ac_xml : lens =  
  let ac_elt (sep:string) : lens = 
    xml_simple_elt nl1 "accession" (ac_data . qins (sep . S) sep) in 
  tag "AC" . 
  (ac_elt "; ")* . (ac_elt ";")
let ac_cn : canonizer = columnize (atype ac_xml) " " "\nAC  "
let ac_line : lens = right_quot ac_xml ac_cn

(* unit tests *)
test ac_line get 
  "<accession>Q21234</accession>" 
= "AC  Q21234;" 

let ac_sample : string = 
  "
  |  <accession>Q92892</accession>
  |  <accession>Q92893</accession>
  |  <accession>Q92894</accession>
  |  <accession>Q92895</accession>
  |  <accession>Q93053</accession>
  |  <accession>Q96KU9</accession>
  |  <accession>Q93053</accession>
  |  <accession>Q96KV0</accession>
  |  <accession>Q93053</accession>
  |  <accession>Q93053</accession>
  |  <accession>Q93053</accession>
  |  <accession>Q96KU9</accession>" 

test ac_line get ac_sample
= 
  "AC  Q92892; Q92893; Q92894; Q92895; Q93053; Q96KU9; Q93053; Q96KV0; Q93053;
  |AC  Q93053; Q93053; Q96KU9;"

test ac_line create
  "AC    Q92892; Q92893; Q92894; Q92895; 
  |AC         Q93053; Q96KU9; Q93053; Q96KV0; Q93053;
  |AC  Q93053;   Q93053; 
  |AC  Q96KU9;"
= ac_sample

test ac_line put
  "AC    Q21234; QJNF12;"
into
  "<accession>Q92892</accession>
  |  <accession>Q92893</accession>
  |      <accession>Q92894</accession>
  | <accession>Q92895</accession>"
= 
  "
  |  <accession>Q21234</accession>
  |  <accession>QJNF12</accession>" 
 
(* --------------------------------------------------------------------------- *)
(* DT line *)

(* [date] maps between aphanumeric and numeric dates *)
let date,partial_date : lens * lens = 
  let day : regexp = DIGIT{2} in 
  let month : lens = 
    ( "01" <-> "JAN" 
    | "02" <-> "FEB" 
    | "03" <-> "MAR" 
    | "04" <-> "APR" 
    | "05" <-> "MAY" 
    | "06" <-> "JUN" 
    | "07" <-> "JUL" 
    | "08" <-> "AUG" 
    | "09" <-> "SEP" 
    | "10" <-> "OCT" 
    | "11" <-> "NOV" 
    | "12" <-> "DEC" ) in       
  let year : regexp = DIGIT{4} in 
    (default
      (year ~ (("-" . month . "-") ~ day))        
      "1900-01-01",
     default
       (year ~ (del "-" . month . ins "-"))
       "1900-01")

test date get "2009-01-20" = "20-JAN-2009"
test partial_date get "2009-01" = "JAN-2009" 

let (entry_cn,entry_xml) : canonizer * lens = 
  let entry_tag : string = "entry" in 
  let DATE : regexp = ctype date in 
  let STRING : regexp = [A-Za-z\-]+ in 
  (* helpers *)
  let cp_ws (R:regexp) : lens = WSP . R in 
  let attr  (s:string) (R:regexp) : regexp = s . "=\"" . R . "\"" in 
  (* definitions *)
  let R1 = attr "created" DATE in 
  let R2 = attr "dataset" STRING in
  let R3 = attr "modified" DATE in
  let R4 = attr "version" NUMBER in 
  let cn : canonizer = canonizer_of_lens (
    xml_open nl1 entry_tag . 
    (sort4 (cp_ws R1) (cp_ws R2) (cp_ws R3) (cp_ws R4)) . 
    xml_slash_close) in 
  let dt1a = tag "DT" . date . ins ", " in
  let dt1b = ins "integrated into UniprotKB/" . STRING . ins "." . ins NL in
  let dt3a = tag "DT" . date . ins ", " in
  let dt3b = ins "entry version" . qins S " " . NUMBER . ins "." in
  let xml : lens = 
    xml_attr "created" dt1a .
    xml_attr "dataset" dt1b .  
    xml_attr "modified" dt3a . 
    xml_attr "version" dt3b in 
  (cn,xml)

let entry_line = left_quot entry_cn entry_xml

test entry_line get 
  "<entry created=\"2006-04-18\" version=\"15\"   dataset=\"Swiss-Prot\"   modified=\"2007-02-20\"/>"
= 
  "DT  18-APR-2006, integrated into UniprotKB/Swiss-Prot.
  |DT  20-FEB-2007, entry version 15."
 
(* --------------------------------------------------------------------------- *)
(* DE line *)

let de_xml : lens = 
  let name2 : lens = xml_simple_elt nl2 "name" ALPHA in
  let name3 : lens = xml_simple_elt nl3 "name" ALPHA in 
  let domain: lens = xml_elt nl2 "domain" (name3 . (ins " (". name3 . ins ")")* ) in 
  let component: lens = xml_elt nl2 "component" (name3 . (ins " (". name3 . ins ")")* ) in 
    tag "DE" .
    xml_elt nl1 "protein" 
    (name2 .
       (qsp . ins "[Includes:" . qsp . domain. (ins ";" . qsp . domain)+ . ins "]")? . 
       (qsp . ins "[Contains:" . qsp . component. (ins ";" . qsp . component)+ . ins "]")? )
let de_cn : canonizer = columnize (atype de_xml) " " "\nDE  "

let de_sample : string = 
  "
  |  <protein>
  |    <name>Arginine biosynthesis bifunctional protein argJ</name>
  |    <domain>
  |      <name>Glutamate N-acetyltransferase</name>
  |      <name>EC 2.3.1.35</name>
  |      <name>Ornithine acetyltransferase</name>
  |      <name>Ornithine transacetylase</name>
  |      <name>OATase</name>
  |    </domain>
  |    <domain>
  |      <name>Amino-acid acetyltransferase</name>
  |      <name>EC 2.3.1.1</name>
  |      <name>N-acetylglutamate synthase</name>
  |      <name>AGS</name>
  |    </domain>
  |    <component>
  |      <name>Arginine biosynthesis bifunctional protein argJ alpha chain</name>
  |    </component>
  |    <component>
  |      <name>Arginine biosynthesis bifunctional protein argJ beta chain</name>
  |    </component>
  |  </protein>"

test right_quot de_xml de_cn get
  de_sample 
=
 "DE  Arginine biosynthesis bifunctional protein argJ [Includes: Glutamate
 |DE  N-acetyltransferase (EC 2.3.1.35) (Ornithine acetyltransferase) (Ornithine
 |DE  transacetylase) (OATase); Amino-acid acetyltransferase (EC 2.3.1.1)
 |DE  (N-acetylglutamate synthase) (AGS)] [Contains: Arginine biosynthesis bifunctional
 |DE  protein argJ alpha chain; Arginine biosynthesis bifunctional protein argJ beta
 |DE  chain]"

test right_quot de_xml de_cn create 
 "DE  Arginine biosynthesis bifunctional protein argJ [Includes: Glutamate
 |DE  N-acetyltransferase (EC 2.3.1.35) (Ornithine acetyltransferase) (Ornithine
 |DE  transacetylase) (OATase); Amino-acid acetyltransferase (EC 2.3.1.1)
 |DE  (N-acetylglutamate synthase) (AGS)] [Contains: Arginine biosynthesis bifunctional
 |DE  protein argJ alpha chain; Arginine biosynthesis bifunctional protein argJ beta
 |DE  chain]"
=
 de_sample

(* --------------------------------------------------------------------------- *)
(* GN line *)

let gn_xml : lens = 
  let gn_any_name (ty:string) (pre:string) (post:string) : lens = 
    xml_attr1_simple_elt nl2 "name" "type" (del ty) (ins pre . ALPHA . ins post) in 
  let gn_primary : lens = gn_any_name "primary" "Name=" "" in 
  let gn_fst_syn : lens = gn_any_name "synonym" "Synonyms=" "" in 
  let gn_syn : lens = gn_any_name "synonym" ", " "" in 
  let gn_fst_ordered_locus : lens = gn_any_name "ordered locus" "OrderedLocusNames=" "" in 
  let gn_ordered_locus : lens = gn_any_name "ordered locus" ", " "" in 
  let gn_fst_orf : lens = gn_any_name "ORF" "ORFNames=" "" in 
  let gn_orf : lens = gn_any_name "ORF" ", " "" in 
  let gn_names : lens = 
    gn_primary .
    ins "; " . 
    gn_fst_syn . gn_syn* .
    ins "; " . 
    gn_fst_ordered_locus . gn_ordered_locus* . 
    ins "; " . 
    gn_fst_orf . gn_orf* . 
    ins ";" in
  let gn_elt : lens = 
    tag "GN" .
    xml_elt nl1 "gene" gn_names in 
    gn_elt . (ins "\n" . tag "GN" . ins "and\n" . gn_elt)*
     
let gn_cn : canonizer = columnize (atype gn_xml) " " "\nGN  "
let gn_line : lens = right_quot gn_xml gn_cn 

test gn_line get 
  "<gene>
    <name type=\"primary\">Jon99Ciii</name>
    <name type=\"synonym\">SER5</name>
    <name type=\"synonym\">Ser99Db</name>
    <name type=\"ordered locus\">b1237</name>
    <name type=\"ordered locus\">c1701</name>
    <name type=\"ORF\">CG15519</name>
  </gene>
  <gene>
    <name type=\"primary\">Jon99Ciii</name>
    <name type=\"synonym\">SER5</name>
    <name type=\"ordered locus\">c1701</name>
    <name type=\"ORF\">CG15519</name>
  </gene>" 
= 
  "GN  Name=Jon99Ciii; Synonyms=SER5, Ser99Db; OrderedLocusNames=b1237, c1701;
  |GN  ORFNames=CG15519;
  |GN  and
  |GN  Name=Jon99Ciii; Synonyms=SER5;
  |GN  OrderedLocusNames=c1701; ORFNames=CG15519;"

(* --------------------------------------------------------------------------- *)
(* OS line *)
let names_xml (spaces:string) : lens = 
  let any_name (ty:string) (pre:string) (post:string) : lens = 
    xml_attr1_simple_elt spaces "name" "type" (del ty) (ins pre . ALPHA . ins post) in 
  let scientific : lens = any_name "scientific" "" "" in 
  let common : lens = any_name "common" "(" ")" in 
  let syn : lens = any_name "synonym" "(" ")" in 
    scientific 
  | scientific . 
    qsp . common
  | scientific . 
    qsp . common . 
    qsp . syn+

let os_xml : lens = 
  tag "OS" .
  names_xml nl2 . 
  ins "."      
let os_cn : canonizer = columnize (atype os_xml) " " "\nOS  "
let os_line : lens = right_quot os_xml os_cn 

test os_line get 
  "<name type=\"scientific\">Solanum lycopersicum</name>
  |<name type=\"common\">Tomato</name>
  |<name type=\"synonym\">Lycopersicon esculentum</name>" 
= 
  "OS  Solanum lycopersicum (Tomato) (Lycopersicon esculentum)."

test os_line create
  "OS  Passer domesticus (House sparrow)."
=
  "
  |    <name type=\"scientific\">Passer domesticus</name>
  |    <name type=\"common\">House sparrow</name>"

(* --------------------------------------------------------------------------- *)
(* OG line *)

let og_xml : lens = 
  let og_plasmid : lens = 
    xml_attr1_elt nl1 "geneLocation" "type" (del "plasmid") 
      (ins "Plasmid" . 
       qsp . 
       xml_simple_elt nl2 "name" ALPHAP) in
  let og_other : lens = 
    xml_attr1_elt_no_body nl1 "geneLocation" "type"   
      ( "hydrogenosome" <-> "Hydrogenosome" 
      | "mitochondrion" <-> "Mitochondrion" 
      | "nucleomorph"   <-> "Nucleomorph"   
      | "plastid"       <-> "Plastid"       
      | (ins "Plastid;" . qsp . 
           ( "apicoplast"  <-> "Apicoplast"  
           | "chloroplast" <-> "Chloroplast" 
           | "cyanelle"    <-> "Cyanelle"    
           | "non-photosynthetic plastid" <-> "Non-photosynthetic plastid"))) in
  let cs : lens = ins "," . qsp in 
    tag "OG" . 
      ( og_plasmid . ((cs . og_plasmid)* . (cs . ins "and" . qsp . og_plasmid))?
      | og_other) .       
      ins "." 

let og_cn : canonizer = columnize (atype og_xml) ", " ",\nOG  "
let og_line : lens = right_quot og_xml og_cn 

test og_line create 
"OG  Plasmid R6-5, Plasmid IncFII R100 (NR1),
|OG   and Plasmid IncFII R1-19 (R1 drd-19)." 
= 
"
  <geneLocation type=\"plasmid\">
    <name>R6-5</name>
  </geneLocation>
  <geneLocation type=\"plasmid\">
    <name>IncFII R100 (NR1)</name>
  </geneLocation>
  <geneLocation type=\"plasmid\">
    <name>IncFII R1-19 (R1 drd-19)</name>
  </geneLocation>" 

test og_xml get
  "<geneLocation type=\"non-photosynthetic plastid\"/>" 
= "OG  Plastid; Non-photosynthetic plastid."

(* --------------------------------------------------------------------------- *)
(* OC line *)
let oc_xml : lens = 
  let taxon (l:lens) : lens = xml_simple_elt nl3 "taxon" (ALPHA . l) in 
  tag "OC" . 
  xml_elt nl2 "lineage"
    ((taxon (ins ";" . qsp))* . 
     taxon (ins ".")) 
let oc_cn : canonizer = columnize (atype oc_xml) " " "\nOC  "
let oc_line : lens = right_quot oc_xml oc_cn 

test oc_line create
"OC   Eukaryota; Alveolata; Apicomplexa; Aconoidasida; Piroplasmida; Theileriidae; Theileria."
=
"
|    <lineage>
|      <taxon>Eukaryota</taxon>
|      <taxon>Alveolata</taxon>
|      <taxon>Apicomplexa</taxon>
|      <taxon>Aconoidasida</taxon>
|      <taxon>Piroplasmida</taxon>
|      <taxon>Theileriidae</taxon>
|      <taxon>Theileria</taxon>
|    </lineage>"

test oc_line get 
"
  <lineage>
    <taxon>Eukaryota</taxon>
    <taxon>Alveolata</taxon>
    <taxon>Apicomplexa</taxon>
    <taxon>Aconoidasida</taxon>
    <taxon>Piroplasmida</taxon>
    <taxon>Theileriidae</taxon>
    <taxon>Theileria</taxon>
  </lineage>"

= 
  "OC  Eukaryota; Alveolata; Apicomplexa; Aconoidasida; Piroplasmida; Theileriidae;
  |OC  Theileria."

(* --------------------------------------------------------------------------- *)
(* OX line *)
let ncbi_xml (spaces:string) : lens = 
  let a1 : lens = xml_attr "type" (del "NCBI Taxonomy") in 
  let a2 : lens = xml_attr "key" (del NUMBER) in 
  let a3 : lens = xml_attr "id" (ins "NCBI_TaxID=" . NUMBER . ins ";") in  
  xml_open spaces "dbReference" .
    (sort3 a1 a2 a3) . 
    xml_slash_close 

let ox_xml : lens = 
  tag "OX" . 
  ncbi_xml nl2
let ox_cn : canonizer = columnize (atype ox_xml) " " "\nOX  "
let ox_line : lens = right_quot ox_xml ox_cn

test ox_line get 
  "<dbReference type=\"NCBI Taxonomy\" key=\"1\" id=\"5874\"/>" 
= 
  "OX  NCBI_TaxID=5874;" 

test ox_line create 
  "OX  NCBI_TaxID=5874;" 
=
  "
  |    <dbReference type=\"NCBI Taxonomy\" key=\"0\" id=\"5874\"/>" 

(* --------------------------------------------------------------------------- *)
(* OH line *)
let oh_xml : lens =
  tag "OH" .
  xml_attr1_elt nl1 "organism" "key" (del NUMBER) 
  (names_xml nl2 ~ (ncbi_xml nl2 . qsp)) . 
  ins "."

let oh_cn : canonizer = columnize (atype oh_xml) " " "\nOH  "
let oh_line : lens = right_quot oh_xml oh_cn

test oh_line create
  "OH   NCBI_TaxID=9481; Callithrix." 
= 
  "
  |  <organism key=\"0\">
  |    <name type=\"scientific\">Callithrix</name>
  |    <dbReference type=\"NCBI Taxonomy\" key=\"0\" id=\"9481\"/>
  |  </organism>"

test oh_line get 
  "<organism key=\"1\">
  |  <name type=\"scientific\">Callithrix</name>
  |  <dbReference type=\"NCBI Taxonomy\" key=\"1\" id=\"9481\"/>
  |</organism>" 
= 
  "OH  NCBI_TaxID=9481; Callithrix."

(* --------------------------------------------------------------------------- *)
(* OS OG OC OX OH block *)

let os_og_oc_ox_oh_block = 
  xml_open nl1 "organism" . 
  xml_attr "key" (del NUMBER) . 
  xml_close . 
  terminate os_line . 
  (((terminate ox_line ~
    terminate oc_line) . 
   qdel WS nl1 . 
   xml_close_tag "organism" . 
   (terminate oh_line)* ) ~
  terminate og_line)

test os_og_oc_ox_oh_block get
  "<organism key=\"1\">
  |    <name type=\"scientific\">Solanum melongena</name>
  |    <name type=\"common\">Eggplant</name>
  |    <name type=\"synonym\">Aubergine</name>
  |    <dbReference type=\"NCBI Taxonomy\" key=\"1\" id=\"9606\"/>
  |    <lineage>
  |      <taxon>Mammalia</taxon>
  |      <taxon>Eutheria</taxon>
  |    </lineage>
  |  </organism>  <organism key=\"1\">
  |    <name type=\"scientific\">Callithrix</name>
  |    <dbReference type=\"NCBI Taxonomy\" key=\"1\" id=\"9481\"/>
  |  </organism>
  |  <organism key=\"1\">
  |    <name type=\"scientific\">Cercopithecus hamlyni</name>
  |    <name type=\"common\">Owl-faced monkey</name>
  |    <name type=\"synonym\">Hamlyn's monkey</name>
  |    <dbReference type=\"NCBI Taxonomy\" key=\"1\" id=\"9536\"/>
  |  </organism>
  |   <geneLocation type=\"apicoplast\"/>"
= 
  "OS  Solanum melongena (Eggplant) (Aubergine).
  |OG  Plastid; Apicoplast.
  |OC  Mammalia; Eutheria.
  |OX  NCBI_TaxID=9606;
  |OH  NCBI_TaxID=9481; Callithrix.
  |OH  NCBI_TaxID=9536; Cercopithecus hamlyni (Owl-faced monkey) (Hamlyn's monkey).
  |"

test os_og_oc_ox_oh_block create 
  "OS   Solanum melongena (Eggplant) (Aubergine).
  |OG   Plastid; Apicoplast.
  |OC   Mammalia; Eutheria.
  |OX   NCBI_TaxID=9606;
  |OH   NCBI_TaxID=9481; Callithrix.
  |OH   NCBI_TaxID=9536; Cercopithecus hamlyni (Owl-faced monkey) (Hamlyn's monkey).
  |" 
= 
"
|  <organism key=\"0\">
|    <name type=\"scientific\">Solanum melongena</name>
|    <name type=\"common\">Eggplant</name>
|    <name type=\"synonym\">Aubergine</name>
|    <dbReference type=\"NCBI Taxonomy\" key=\"0\" id=\"9606\"/>
|    <lineage>
|      <taxon>Mammalia</taxon>
|      <taxon>Eutheria</taxon>
|    </lineage>
|  </organism>
|  <organism key=\"0\">
|    <name type=\"scientific\">Callithrix</name>
|    <dbReference type=\"NCBI Taxonomy\" key=\"0\" id=\"9481\"/>
|  </organism>
|  <organism key=\"0\">
|    <name type=\"scientific\">Cercopithecus hamlyni</name>
|    <name type=\"common\">Owl-faced monkey</name>
|    <name type=\"synonym\">Hamlyn's monkey</name>
|    <dbReference type=\"NCBI Taxonomy\" key=\"0\" id=\"9536\"/>
|  </organism>
|  <geneLocation type=\"apicoplast\"/>"


(* --------------------------------------------------------------------------- *)
(* RN line *)
let rn_xml : lens = 
  tag "RN" . 
  xml_open nl1 "reference" . 
  xml_attr "key" (brackets NUMBER) . 
  xml_close 
let rn_line : lens = rn_xml
test rn_line create 
  "RN [1]"  = 
  "
  |  <reference key=\"1\">" 

(* --------------------------------------------------------------------------- *)
(* RP line *)
let rp_xml : lens = 
  tag "RP" . 
  xml_simple_elt nl2 "scope" ALPHA . 
  ins "." 
let rp_cn : canonizer = 
  columnize (atype rp_xml) " " "\nRP  "
let rp_line : lens = right_quot rp_xml rp_cn

test rp_line create 
  "RP   NUCLEOTIDE SEQUENCE [GENOMIC DNA]." 
= 
  "
  |    <scope>NUCLEOTIDE SEQUENCE [GENOMIC DNA]</scope>"

(* --------------------------------------------------------------------------- *)
(* RC line *)
let rc_xml : lens = 
  let aux (xml:string) (ascii:string) : lens = 
    let l : lens = xml_simple_elt nl3 xml ALPHAP in 
    ins ascii . 
    ins "=" . 
    l . 
    ((ins "," . qsp . l)* . 
     (ins "," . qsp . ins "and" . qsp . l))? . 
    ins ";" in 
  let strain : lens =  aux "strain" "STRAIN" in 
  let tissue : lens =  aux "tissue" "TISSUE" in 
  let plasmid : lens =  aux "plasmid" "PLASMID" in 
  let transposon : lens =  aux "transposon" "TRANSPPSON" in 
  let final_plasmid : lens = (strain . qsp)? . plasmid in 
  let final_transposon : lens = ((strain | final_plasmid) . qsp)? . transposon in 
  let final_tissue : lens = ((strain | final_plasmid | final_transposon) . qsp)? . tissue in 
  let all = strain | final_tissue | final_plasmid | final_transposon in 
  tag "RC" . 
  xml_elt nl2 "source" all 

let rc_cn : canonizer = 
  columnize (atype rc_xml) " " "\nRC  "

let rc_line : lens = right_quot rc_xml rc_cn 

test rc_line create 
  "RC   STRAIN=AL.012, AZ.026, AZ.180, DC.005, GA.039, GA2181, IL.014, and IL2.17;" 
= 
  "
  |    <source>
  |      <strain>AL.012</strain>
  |      <strain>AZ.026</strain>
  |      <strain>AZ.180</strain>
  |      <strain>DC.005</strain>
  |      <strain>GA.039</strain>
  |      <strain>GA2181</strain>
  |      <strain>IL.014</strain>
  |      <strain>IL2.17</strain>
  |    </source>"

test rc_line get
  "      <source>
  |        <plasmid>R1 (R7268)</plasmid>
  |        <transposon>Tn3</transposon>
  |      </source>" 
= 
  "RC  PLASMID=R1 (R7268); TRANSPPSON=Tn3;" 

(* --------------------------------------------------------------------------- *)
(* RX line *)
let rx_xml : lens = 
  let aux (db:string) : lens = 
    let l : lens = xml_attr3_elt_no_body nl2 "dbReference" 
      "type" (del db)
      "key" (del NUMBER) 
      "id" ALPHAP in 
    ins db . 
    ins "=" . 
    l . 
    ins ";" in 
  let medline : lens =  aux "MEDLINE" in 
  let pubmed : lens = aux "PubMed" in 
  let doi : lens = aux "DOI" in 
  let all = (medline | pubmed | doi) in 
  tag "RX" . 
  all . (qsp . all)*
let rx_cn : canonizer = 
  columnize (atype rx_xml) " " "\nRX  "
let rx_line : lens = right_quot rx_xml rx_cn 

test rx_line create 
  "RX   MEDLINE=90158697; PubMed=1689460; DOI=10.1016/0166-6851(90)90007-9;" 
=
   "
   |    <dbReference type=\"MEDLINE\" key=\"0\" id=\"90158697\"/>
   |    <dbReference type=\"PubMed\" key=\"0\" id=\"1689460\"/>
   |    <dbReference type=\"DOI\" key=\"0\" id=\"10.1016/0166-6851(90)90007-9\"/>" 

test rx_line get 
   "     <dbReference type=\"DOI\" key=\"1\" id=\"10.1016/0166-6851(90)90007-9\"/>
   |     <dbReference type=\"MEDLINE\" key=\"1\" id=\"90158697\"/>
   |     <dbReference type=\"PubMed\" key=\"1\" id=\"1689460\"/>"
=
  "RX  DOI=10.1016/0166-6851(90)90007-9; MEDLINE=90158697; PubMed=1689460;"

(* --------------------------------------------------------------------------- *)
(* RG line *)
let rg_xml : lens = 
  tag "RG" . 
  xml_attr1_elt_no_body nl3 "consortium" "name" ALPHA .
  ins ";" 
let rg_cn : canonizer = 
  columnize (atype rg_xml) " " "\nRG  "
let rg_line : lens = right_quot rg_xml rg_cn

test rg_line create 
  "RG  The C. elegans sequencing consortium;" 
= 
  "
  |      <consortium name=\"The C. elegans sequencing consortium\"/>"

(* --------------------------------------------------------------------------- *)
(* RA line *)
let person (spaces:string) : lens = xml_attr1_elt_no_body spaces "person" "name" ALPHA 

let ra_xml : lens = 
  tag "RA" . 
  person nl3 . (ins "," . qsp . person nl3)* .
  ins ";" 

let ra_cn : canonizer = 
  columnize (atype ra_xml) ", " ",\nRA " 
let ra_line : lens = right_quot ra_xml ra_cn 

test ra_line get 
  "
   |      <person name=\"Iams K.P.\"/>
   |      <person name=\"Young J.R.\"/>
   |      <person name=\"Nene V.\"/>
   |      <person name=\"Desai J.\"/>
   |      <person name=\"Webster P.\"/>
   |      <person name=\"Ole-Moiyoi O.K.\"/>
   |      <person name=\"Musoke A.J.\"/>"
=
  "RA  Iams K.P., Young J.R., Nene V., Desai J., Webster P., Ole-Moiyoi O.K.,
  |RA  Musoke A.J.;"

test ra_line create 
  "RA   Iams K.P., Young J.R., Nene V., Desai J., Webster P., Ole-Moiyoi O.K., Musoke A.J.;"
=
  "
   |      <person name=\"Iams K.P.\"/>
   |      <person name=\"Young J.R.\"/>
   |      <person name=\"Nene V.\"/>
   |      <person name=\"Desai J.\"/>
   |      <person name=\"Webster P.\"/>
   |      <person name=\"Ole-Moiyoi O.K.\"/>
   |      <person name=\"Musoke A.J.\"/>"

(* --------------------------------------------------------------------------- *)
(* RT line *)

let rt_xml : lens = 
  tag "RT" . 
  xml_simple_elt nl2 "title" (quotes (ALPHAC . [.!])) . 
  ins ";"

let rt_cn : canonizer = 
  columnize (atype rt_xml) " " "\nRT  " 
let rt_line : lens = right_quot rt_xml rt_cn 

test rt_line get
  "
  |  <title>Boomerang: resourceful lenses for ordered data.</title>" 
=
  "RT  \"Boomerang: resourceful lenses for ordered data.\";"

test rt_line create
  "RT  \"Regulation of nitrogen metabolism in Bacillus subtilis: vive la difference!\";" 
= 
  "
  |    <title>Regulation of nitrogen metabolism in Bacillus subtilis: vive la difference!</title>"

(* --------------------------------------------------------------------------- *)
(* RL line *)

let journal_xml : lens = 
  xml_open nl1 "citation" . 
  xml_attr "type" (del "journal article") . 
  xml_attr "name" (ALPHA . qsp) . 
  xml_attr "volume" (NUMBER . ins ":") . 
  xml_attr "first" (NUMBER . ins "-") . 
  xml_attr "last" (NUMBER ) . 
  xml_attr "date" (braces NUMBER) . 
  xml_slash_close . 
  ins "." 

test journal_xml get 
"<citation type=\"journal article\" name=\"Science\" volume=\"309\" first=\"131\" last=\"133\" date=\"2005\"/>" 
=
"Science 309:131-133(2005)."

let electronic_xml : lens = 
  xml_open nl1 "citation" . 
  xml_attr "type" (del "online journal article" . ins "(er)" . qsp) . 
  xml_attr "name" ALPHA . 
  xml_slash_close . 
  ins "." 

test electronic_xml get
  "<citation type=\"online journal article\" name=\"Plant Gene Register PGR98-023\"/>" 
= 
  "(er) Plant Gene Register PGR98-023."

let editors_xml : lens = 
  ins "(In)" . qsp . 
  xml_elt nl2 "editorList"
  (person nl3 . (ins "," . qsp . person nl3)* . qsp . ins "(eds.);" . qsp)

test editors_xml create 
 "(In) Rich D.H., Gross E. (eds.); " 
=
"
|    <editorList>
|      <person name=\"Rich D.H.\"/>
|      <person name=\"Gross E.\"/>
|    </editorList>"


let book_xml : lens = 
  (xml_open nl1 "citation" . 
   xml_attr "type" (del "book") . 
   xml_attr "name" (ALPHA . ins "," . qsp) . 
   (xml_attr "volume" (NUMBER . ins ":"))? . 
   xml_attr "first" (ins "pp." . NUMBER . ins "-") . 
   xml_attr "last" (NUMBER . ins "," . qsp) . 
   xml_attr "publisher" (ALPHA . ins "," . qsp) . 
   xml_attr "city" (ALPHA . qsp) . 
   xml_attr "date" (braces NUMBER) . 
   xml_close . 
   ins ".") ~
  editors_xml . 
  qdel WS nl1 .     
  xml_close_tag "citation" 

test book_xml create
"(In) Rich D.H., Gross E. (eds.); Proceedings of the 7th American peptide symposium, pp.69-72, Pierce Chemical Co., Rockford Il. (1981)."
=
"
|  <citation type=\"book\" name=\"Proceedings of the 7th American peptide symposium\" first=\"69\" last=\"72\" publisher=\"Pierce Chemical Co.\" city=\"Rockford Il.\" date=\"1981\">
|    <editorList>
|      <person name=\"Rich D.H.\"/>
|      <person name=\"Gross E.\"/>
|    </editorList>
|  </citation>"

let unpublished_xml : lens = 
  ins "Unpublished observations" . qsp . 
  xml_open nl1 "citation" . 
  xml_attr "type" (del "unpulished observations") . 
  xml_attr "date" (braces partial_date) . 
  xml_slash_close . 
  ins "." 

test unpublished_xml create 
  "Unpublished observations (JAN-2009)." 
= 
  "
  |  <citation type=\"unpulished observations\" date=\"2009-01\"/>"

let thesis_xml : lens = 
  ins "Thesis" . qsp . 
  xml_open nl1 "citation" . 
  xml_attr "type" (del "thesis") . 
  xml_attr "date" (braces NUMBER . ins "," . qsp) . 
  xml_attr "institute" (ALPHA . ins "," . qsp) . 
  xml_attr "country" (ALPHA) . 
  xml_slash_close . 
  ins "." 

test thesis_xml create 
  "Thesis (1977), University of Geneva, Switzerland." 
= 
  "
  |  <citation type=\"thesis\" date=\"1977\" institute=\"University of Geneva\" country=\"Switzerland\"/>"

let patent_xml : lens = 
  ins "Patent number" . qsp . 
  xml_open nl1 "citation" . 
  xml_attr "type" (del "patent") . 
  xml_attr "number" (ALPHA . ins "," . qsp) . 
  xml_attr "date" date . 
  xml_slash_close . 
  ins "." 

test patent_xml create
  "Patent number WO9010703, 20-SEP-1990." 
= 
  "
  |  <citation type=\"patent\" number=\"WO9010703\" date=\"1990-09-20\"/>"

let submitted_xml : lens = 
  ins "Submitted" . qsp . 
  xml_open nl1 "citation" . 
  xml_attr "type" (del "submission") . 
  xml_attr "date" (braces partial_date) . 
  qsp . ins "to" . qsp . 
  xml_attr "db"
    ("the EMBL/GenBank/DDBJ databases"
    |"UniProtKB"
    |"the PDB data bank"
    |"the PIR data bank") . 
  xml_slash_close . 
  ins "." 

test submitted_xml create 
  "Submitted (OCT-1995) to the EMBL/GenBank/DDBJ databases." 
= 
  "
  |  <citation type=\"submission\" date=\"1995-10\" db=\"the EMBL/GenBank/DDBJ databases\"/>"

let rl_xml : lens = 
  tag "RL" . 
  (journal_xml | electronic_xml | book_xml | unpublished_xml | thesis_xml | submitted_xml) 
let rl_cn : canonizer = 
  columnize (atype rl_xml) " " "\nRL  "
let rl_line : lens = 
  right_quot rl_xml rl_cn 

(* --------------------------------------------------------------------------- *)
(* Reference block *)

let rp_rc_rx_block : lens = 
  (terminate rx_line)? ~
  (terminate rp_line . 
  (terminate rc_line)? )

let rg_ra_block : lens = 
  xml_elt nl2 "authorList" 
    ( terminate rg_line
    | (terminate ra_line) . 
      (terminate rg_line)? )  

let rg_ra_rt_block : lens = 
  (terminate rt_line)? ~ rg_ra_block 

let reference_block : lens = 
  (terminate rn_line) . 
  (rg_ra_rt_block ~ 
   rp_rc_rx_block) . 
  qdel WS nl1 . 
  xml_close_tag "reference"

test reference_block create
  "RN   [1]
  |RP   NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA].
  |RC   STRAIN=Ankara;
  |RX   PubMed=15994557; DOI=10.1126/science.1110418;
  |RA   Pain A., Renauld H.;
  |RT   \"Genome of the host-cell transforming parasite Theileria annulata compared with T. parva.\";
  |" 
=
  "
  |  <reference key=\"1\">
  |    <title>Genome of the host-cell transforming parasite Theileria annulata compared with T. parva.</title>
  |    <authorList>
  |      <person name=\"Pain A.\"/>
  |      <person name=\"Renauld H.\"/>
  |    </authorList>
  |    <dbReference type=\"PubMed\" key=\"0\" id=\"15994557\"/>
  |    <dbReference type=\"DOI\" key=\"0\" id=\"10.1126/science.1110418\"/>
  |    <scope>NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA]</scope>
  |    <source>
  |      <strain>Ankara</strain>
  |    </source>
  |  </reference>"
  
(* --------------------------------------------------------------------------- *)
(* CC line *)

let cc_break : lens = ins "\nCC      "  

let cc_fix (l:lens) : lens = right_quot l (columnize (atype l) "; " ";\nCC      ") 

let cc_status : lens = 
  xml_attr "status"     
    ( "By similarity" <-> "(By similarity)"
    | "Potential"     <-> "(Potential)"    
    | "Probable"      <-> "(Probable)" )

let CC_DATA : regexp = (NWS . ANY  . NWS) - (containing ([<>&\n] | "-!-" | atype cc_status))

let cc_generic_xml (ty:lens) : lens = 
  tag "CC" . 
  ins "-!-" . qsp . 
  xml_open nl1 "comment" . 
  xml_attr "type" ty . 
  ((cc_status? . xml_close) ~
  (ins ":" . qsp . CC_DATA)) . 
  xml_close_tag "comment" . 
  ins "." 

let cc_unstructured_xml : lens = 
  cc_generic_xml
    ( "allergen"             <-> "ALLERGEN"
    | "biotechnology"        <->  "BIOTECHNOLOGY"       
    | "catalytic activity"   <->  "CATALYTIC ACTIVITY"  
    | "cofactor"             <->  "COFACTOR"            
    | "developmental stage"  <->  "DEVELOPMENTAL STAGE" 
    | "disease"              <->  "DISEASE"             
    | "domain"               <->  "DOMAIN"              
    | "enzyme regulation"    <->  "ENZYME REGULATION"   
    | "function"             <->  "FUNCTION"            
    | "induction"            <->  "INDUCTION"           
    | "miscellaneous"        <->  "MISCELLANEOUS"       
    | "pathway"              <->  "PATHWAY"             
    | "pharmaceutical"       <->  "PHARMACEUTICAL"      
    | "polymorphism"         <->  "POLYMORPHISM"        
    | "PTM"                  <->  "PTM"                 
    | "RNA editing"          <->  "RNA EDITING"         
    | "similarity"           <->  "SIMILARITY"          
    | "subcellular location" <->  "SUBCELLULAR LOCATION"
    | "subunit"              <->  "SUBUNIT"             
    | "tissue specificity"   <->  "TISSUE SPECIFICITY"  
    | "toxic dose"           <->  "TOXIC DOSE" )

test cc_unstructured_xml create 
  ("CC   -!- ALLERGEN: Causes an allergic reaction in human. Binds to IgE. " . 
   "Partially heat-labile allergen that may cause both respiratory and " . 
   "food-allergy symptoms in patients with the bird-egg syndrome.") = 
  "
  |  <comment type=\"allergen\">Causes an allergic reaction in human. Binds to IgE. Partially heat-labile allergen that may cause both respiratory and food-allergy symptoms in patients with the bird-egg syndrome</comment>"

let cc_biophysicochemical_properties_xml : lens = 
  let absorption : lens = 
    ins " Absorption: " .
    xml_elt nl2 "absorption"
      (xml_simple_elt nl3 "max" (ins "Abs(max)=" . ALPHAP . ins "; ") . qsp . 
       xml_simple_elt nl3 "text" (ins "Note=" . ALPHAP . ins ";")) in 
  let kinetic_parameters : lens = 
    ins " Kinetic parameters: " . 
    xml_elt nl2 "kinetics" 
      (xml_simple_elt nl3 "KM" (ins "KM=" . ALPHAP . ins "; ") . qsp . 
       xml_simple_elt nl3 "Vmax" (ins "Vmax=" . ALPHAP . ins "; ") . qsp . 
       xml_simple_elt nl3 "text" (ins "Note=" . ALPHAP . ins ";"))  in 
  let generic (xml:string) (ascii:string) : lens = 
    ins " " . ins ascii . ins ": " . 
    xml_elt nl2 xml (ALPHAP . ins ";" . qsp ) in 
  let ph_dependence : lens = 
    generic "phDependence" "pH dependence" in
  let redox_potential : lens = 
    generic "redoxPotential" "Redox potential" in
  let temperature_dependence : lens = 
    generic "temperatureDependence" "Temperature dependence" in       
  tag "CC" . 
  ins "-!-" . qsp . 
  xml_open nl1 "comment" . 
  xml_attr "type" ("biophysicochemical properties" <-> "BIOPHYSICOCHEMICAL PROPERTIES") . 
  xml_close . 
  ins ":"  . qsp . 
  absorption? . 
  kinetic_parameters? . 
  ph_dependence? . 
  redox_potential? . 
  temperature_dependence? . 
  qdel WS nl1 . 
  xml_close_tag "comment" 

test cc_biophysicochemical_properties_xml get 
"  <comment type=\"biophysicochemical properties\">
    <absorption>
      <max>465 nm</max>
      <text>The above maximum is for the oxidized form. Shows a maximal peak at 330 nm in the reduced form. These absorption peaks are for the tryptophylquinone cofactor</text>
    </absorption>
    <kinetics>
      <KM>5.4 uM for tyramine</KM>
      <Vmax>17 umol/min/mg enzyme</Vmax>
      <text>The enzyme is substrate inhibited at high substrate concentrations (Ki=1.08 mM for tyramine)</text>
    </kinetics>
  </comment>" 
= 
  "CC  -!- BIOPHYSICOCHEMICAL PROPERTIES:  Absorption: Abs(max)=465 nm;  Note=The above maximum is for the oxidized form. Shows a maximal peak at 330 nm in the reduced form. These absorption peaks are for the tryptophylquinone cofactor; Kinetic parameters: KM=5.4 uM for tyramine;  Vmax=17 umol/min/mg enzyme;  Note=The enzyme is substrate inhibited at high substrate concentrations (Ki=1.08 mM for tyramine);"

let interaction : lens = 
  let experiments : lens = 
    ins "NbExp=" . 
    xml_simple_elt nl2 "experiments" NUMBER . 
    ins ";" . qsp in
  let self_rest : lens = 
    ins "Self" . 
    xml_slash_close .     
    xml_simple_elt nl2 "organismsDiffer" (del "false") in
  let id_rest : lens = 
    xml_close . 
    xml_simple_elt nl3 "id" ALPHA . 
    ins ":" . 
    (xml_simple_elt nl3 "label" ALPHA | ins "-") . 
    qdel WS nl2 . 
    xml_close_tag "interactant" . 
    xml_simple_elt nl2 "organismsDiffer" ( del "true". qsp . ins "(xeno)" | del "false") in    
  default_tag "CC" "      " . 
  xml_attr1_elt nl1 "comment" "type" (del "interaction") 
    begin  
      ( ins "IntAct=" . 
        xml_attr1_elt_no_body nl2 "interactant" "intactId" ALPHA . 
        ins "," . qsp . 
        xml_open nl2 "interactant" . 
        xml_attr "intactId" ALPHA . 
        ins ";") ~
      (( self_rest | id_rest ) . 
       ins ";" . qsp .
      experiments)
    end

test interaction get 
"  <comment type=\"interaction\">
    <interactant intactId=\"EBI-1043398\"/>
    <interactant intactId=\"EBI-1050185\">
      <id>Q8NBH6</id>
    </interactant>
    <organismsDiffer>false</organismsDiffer>
    <experiments>1</experiments>
  </comment>" = 
"CC      Q8NBH6:-; NbExp=1; IntAct=EBI-1043398, EBI-1050185;" 

let cc_interaction_xml : lens =        
  tag "CC" . 
  ins "-!- " . qins WS "" . 
  ins "INTERACTION:" . qins WS "\n" .
  (interaction . qins WS "\n")* . interaction  

test cc_interaction_xml get 
"  <comment type=\"interaction\">
    <interactant intactId=\"EBI-1043398\"/>
    <interactant intactId=\"EBI-1043398\"/>
    <organismsDiffer>false</organismsDiffer>
    <experiments>1</experiments>
  </comment>
  <comment type=\"interaction\">
    <interactant intactId=\"EBI-1043398\"/>
    <interactant intactId=\"EBI-1050185\">
      <id>Q8NBH6</id>
    </interactant>
    <organismsDiffer>false</organismsDiffer>
    <experiments>1</experiments>
  </comment>
  <comment type=\"interaction\">
    <interactant intactId=\"EBI-1043398\"/>
    <interactant intactId=\"EBI-350350\">
      <id>P21266</id>
      <label>GSTM3</label>
    </interactant>
    <organismsDiffer>false</organismsDiffer>
    <experiments>1</experiments>
  </comment>" 
= 
  "CC  -!- INTERACTION:
  |CC      Self; NbExp=1; IntAct=EBI-1043398, EBI-1043398;
  |CC      Q8NBH6:-; NbExp=1; IntAct=EBI-1043398, EBI-1050185;
  |CC      P21266:GSTM3; NbExp=1; IntAct=EBI-1043398, EBI-350350;"

test cc_interaction_xml create
  "CC   -!- INTERACTION:
  |CC       Self; NbExp=1; IntAct=EBI-476263, EBI-476263;
  |CC       P31749:AKT1; NbExp=2; IntAct=EBI-476263, EBI-296087;
  |CC       Q9UER7:DAXX; NbExp=3; IntAct=EBI-476263, EBI-77321;
  |CC       P25445:FAS; NbExp=1; IntAct=EBI-476263, EBI-494743;
  |CC       P15626:Gstm2 (xeno); NbExp=1; IntAct=EBI-476263, EBI-1209729;
  |CC       P09211:GSTP1; NbExp=1; IntAct=EBI-476263, EBI-353467;
  |CC       Q9WTR2:Map3k6 (xeno); NbExp=1; IntAct=EBI-476263, EBI-1254790;
  |CC       O08815:Slk (xeno); NbExp=1; IntAct=EBI-476263, EBI-986112;
  |CC       Q12933:TRAF2; NbExp=1; IntAct=EBI-476263, EBI-355744;
  |CC       P63104:YWHAZ; NbExp=1; IntAct=EBI-476263, EBI-347088;" 
= 
  "
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-476263\"/>
  |    <organismsDiffer>false</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-296087\">
  |      <id>P31749</id>
  |      <label>AKT1</label>
  |    </interactant>
  |    <organismsDiffer>false</organismsDiffer>
  |    <experiments>2</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-77321\">
  |      <id>Q9UER7</id>
  |      <label>DAXX</label>
  |    </interactant>
  |    <organismsDiffer>false</organismsDiffer>
  |    <experiments>3</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-494743\">
  |      <id>P25445</id>
  |      <label>FAS</label>
  |    </interactant>
  |    <organismsDiffer>false</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-1209729\">
  |      <id>P15626</id>
  |      <label>Gstm2</label>
  |    </interactant>
  |    <organismsDiffer>true</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-353467\">
  |      <id>P09211</id>
  |      <label>GSTP1</label>
  |    </interactant>
  |    <organismsDiffer>false</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-1254790\">
  |      <id>Q9WTR2</id>
  |      <label>Map3k6</label>
  |    </interactant>
  |    <organismsDiffer>true</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-986112\">
  |      <id>O08815</id>
  |      <label>Slk</label>
  |    </interactant>
  |    <organismsDiffer>true</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-355744\">
  |      <id>Q12933</id>
  |      <label>TRAF2</label>
  |    </interactant>
  |    <organismsDiffer>false</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-347088\">
  |      <id>P63104</id>
  |      <label>YWHAZ</label>
  |    </interactant>
  |    <organismsDiffer>false</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>"

let cc_alternative_products_line : lens = 
  let event : lens = 
    xml_attr1_elt_no_body nl2 "event" "type" 
      ( "alternative promoter"    <-> "Alternative promoter usage" 
      | "alternative splicing"    <-> "Alternative splicing"       
      | "alternative initiation"  <-> "Alternative initiation"     
      | "ribosomal frameshifting" <-> "Ribosomal frameshifting") in 
  let events : lens = 
    ins "Event=" . 
    event . (ins "," . qsp . event)* . 
    ins ";" in
  let named_isos : lens = 
    ins "Named isoforms=" . qins NUMBER "0" . 
    ins ";" in
  let generic (xml:string) (ascii:string) : lens = 
    ins ascii . ins "=" . 
    xml_simple_elt nl2 xml ALPHA . 
    ins ";" in 
  let sequence : lens = 
    let vsp : lens = "VSP_" . NUMBER in 
    ins "Sequence=" . 
    ( xml_attr1_elt_no_body nl2 "sequence" "type"
        ( "displayed"     <-> "Displayed"
        | "external"      <-> "External"
        | "not described" <-> "Not described")
    | xml_attr2_elt_no_body nl2 "sequence" 
        "type" (del "described")
        "ref"  (vsp . (ins "," . qsp . vsp)* )) . 
    ins ";" in 
  let synonyms : lens = 
    let s : lens = xml_simple_elt nl3 "name" ALPHA in
    ins "Synonyms=" . 
    s . (ins "," . qsp . s)* .
    ins ";" in
  let name : lens =     
    xml_elt nl2 "isoform" 
      begin 
        ((ins "IsoId=" . 
          xml_simple_elt nl3 "id" (ALPHA) . 
          ins ";" . qsp ) ~
         (ins "Name=" . 
          xml_simple_elt nl3 "name" (ALPHA) . 
          ins ";" . qsp . 
          (synonyms . qsp )? )) . 
        sequence . 
        (generic "note" "Note")? 
      end in 
  tag "CC" . 
  ins "-!-" . qsp . 
  ins "ALTERNATIVE_PRODUCTS:" . 
  cc_break . 
  xml_attr1_elt nl1 "comment" "type" (del "alternative products") 
    begin 
      cc_fix (events . qsp . 
           named_isos . qsp . 
           (generic "comment" "Comment")? ) . 
      (cc_break . cc_fix name)*
    end

test cc_alternative_products_line get
  "<comment type=\"alternative products\">
  |     <event type=\"alternative splicing\"/>
  |     <comment>This is a rather lengthy comment.</comment>
  |     <isoform>
  |       <id>P48347-1</id>
  |       <name>1</name>
  |       <name>D</name>
  |       <name>E</name>
  |       <sequence type=\"displayed\"/>
  |     </isoform>
  |     <isoform>
  |       <id>P48347-2</id>
  |       <name>2</name>
  |       <sequence type=\"described\" ref=\"VSP_008972\"/>
  |     </isoform>
  |   </comment>" 
= 
  "CC  -!- ALTERNATIVE_PRODUCTS:
  |CC      Event=Alternative splicing; Named isoforms=0;
  |CC       Comment=This is a rather lengthy comment.;
  |CC      Name=1; Synonyms=D, E; IsoId=P48347-1; Sequence=Displayed;
  |CC      Name=2; IsoId=P48347-2; Sequence=VSP_008972;"
  
let cc_mass_spectrometry_xml : lens = 
  let err : lens = xml_attr "error" (ins "Mass_error=" . FNUMBER . ins ";" . qsp) in 
  let mass : lens = xml_attr "mass" (ins "Mass=" . FNUMBER . ins ";" . qsp) in
  let meth : lens = xml_attr "method" (ins "Method=" . ALPHA . ins ";" . qsp) in
  let src : lens = qins (WSP . "Source=" . ALPHAC . ";")? "" in 
  tag "CC" . 
  ins "-!-" . qsp . 
  ins "MASS SPECTROMETRY:" . 
  qsp . 
  xml_open nl1 "comment" .
  xml_attr "type" (del "mass spectrometry") . 
  mass . 
  err? . 
  meth . 
  xml_close . 
  ins "Range=" . 
  xml_open nl2 "location" . 
  ( (xml_attr "sequence" (qsp . braces ALPHA))? ~    
    (xml_close . 
     xml_attr1_elt_no_body nl3 "begin" "position" NUMBER . 
     ins "-" . 
     xml_attr1_elt_no_body nl3 "end" "position" NUMBER) ) . 
  qdel WS nl2 . 
  xml_close_tag "location" . 
  ins ";" . qsp . 
  ins "Note=" . 
  xml_simple_elt nl2 "note" ALPHAC . 
  ins ";" . 
  qdel WS nl1 . 
  xml_close_tag "comment" . 
  src

let cc_mass_spectrometry_line : lens = 
  cc_fix cc_mass_spectrometry_xml

test cc_mass_spectrometry_line create
  "CC   -!- MASS SPECTROMETRY: Mass=23290.2; Mass_error=2.9; Method=Electrospray;
  |CC       Range=16-214 (P04653-2); Note=Allele D, with 6 phosphate groups;
  |CC       Source=PubMed:7601973;" 
=
  "
  |  <comment type=\"mass spectrometry\" mass=\"23290.2\" error=\"2.9\" method=\"Electrospray\">
  |    <location sequence=\"P04653-2\">
  |      <begin position=\"16\"/>
  |      <end position=\"214\"/>
  |    </location>
  |    <note>Allele D, with 6 phosphate groups</note>
  |  </comment>"
  
test cc_mass_spectrometry_line get 
  "  <comment type=\"mass spectrometry\" mass=\"29440\" error=\"2\" method=\"MALDI\">
  |      <location>
  |        <begin position=\"1\"/>
  |        <end position=\"255\"/>
  |      </location>
  |      <note>Ref.2</note>
  |    </comment>" 
= 
  "CC  -!- MASS SPECTROMETRY: Mass=29440; Mass_error=2; Method=MALDI; Range=1-255;
  |CC       Note=Ref.2;"

let cc_sequence_caution_xml : lens = 
  let err : lens = xml_attr "error" (ins "Mass_error=" . FNUMBER . ins ";" . qsp) in 
  let mass : lens = xml_attr "mass" (ins "Mass=" . FNUMBER . ins ";" . qsp) in
  let meth : lens = xml_attr "method" (ins "Method=" . ALPHA . ins ";" . qsp) in
  tag "CC" . 
  ins "-!-" . qsp . 
  ins "SEQUENCE CAUTION:" . 
  cc_break . 
  xml_attr1_elt nl1 "comment" "type" (del "sequence caution") 
    begin
      ((ins "Type=" . 
       xml_open nl2 "conflict" . 
       xml_attr "type"
         ( "frameshift" <-> "Frameshift"
         | "erroneous initiation" <-> "Erroneous initiation"             
         | "erroneous termination" <-> "Erroneous termination" 
         | "erroneous gene model prediction" <-> "Erroneous gene model prediction"
         | "erroneous translation" <-> "Erroneous translation"
         | "miscellaneous discrepancy" <-> "Miscellaneous discrepancy") . 
       xml_close . 
       ins ";") ~
      (ins "Sequence=" . 
       xml_attr3_elt_no_body nl2 "sequence"
         "resource" (del ("EMBL-CDS" | "EMBL"))
         "id" (ALPHA) 
         "version" (ins "." . NUMBER) . 
       ins ";" . qsp)) . 
     qdel WS nl2 . 
     xml_close_tag "conflict" . 
     (qins ("Positions=Several;" . WSP)? "" 
     | ins "Positions=" . 
       xml_elt nl2 "location"
         begin           
           let p : lens = xml_attr1_elt_no_body nl3 "position" "position" (NUMBER) in 
           p . (ins "," . qsp . p)* 
         end . 
       ins ";" . qsp) . 
     (ins "Note=" . 
     xml_simple_elt nl2 "note" ALPHA . 
     ins ";")?
    end

let cc_sequence_caution_line : lens = 
  cc_fix cc_sequence_caution_xml

test cc_sequence_caution_line get
  "<comment type=\"sequence caution\">
  |<conflict type=\"erroneous termination\">
  |<sequence resource=\"EMBL-CDS\" id=\"AAN42076\" version=\"1\"/>
  |</conflict>
  |<location>
  |<position position=\"273\"/>
  |</location>
  |<note>Translated as Gln.</note>
  |</comment>" 
= 
  "CC  -!- SEQUENCE CAUTION:
  |CC      Sequence=AAN42076.1; Type=Erroneous termination;
  |CC      Positions=273; Note=Translated as Gln.;" 


(*******************************************************************************)
(* The Harmony Project                                                         *)
(* harmony@lists.seas.upenn.edu                                                *)
(*******************************************************************************)
(* Copyright (C) 2007 J. Nathan Foster and Benjamin C. Pierce                  *)
(*                                                                             *)
(* This library is free software; you can redistribute it and/or               *)
(* modify it under the terms of the GNU Lesser General Public                  *)
(* License as published by the Free Software Foundation; either                *)
(* version 2.1 of the License, or (at your option) any later version.          *)
(*                                                                             *)
(* This library is distributed in the hope that it will be useful,             *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of              *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU           *)
(* Lesser General Public License for more details.                             *)
(*******************************************************************************)
(* /boomerang/examples/uniProtV2.boom                                          *)
(* UniProtKB <-> SwissProt lens                                                *)
(* $Id$ *)
(*******************************************************************************)

module UniProtV2 = 

(* shorthand for backward compatibility. to be removed. *)
let columnize : regexp -> string -> string -> canonizer = 
  columnize "75"

(* --------------------------------------------------------------------------- *)
(* GENERIC HELPER FUNCTIONS *)

(* [bracket l] inserts enclosing square bracket. *) 
let brackets (l:lens) : lens = 
  ins "[" . l . ins "]" 

(* [braces l] inserts enclosing braces (i.e., parentheses). *) 
let braces (l:lens) : lens = 
  ins "(" . l . ins ")"

(* [quotes s] inserts enclosing quotation marks. *) 
let quotes (l:lens) : lens = 
  ins "\"" . l . ins "\"" 

(* sorting *)
let sort2 (l1:lens) (l2:lens) : lens = 
  ( l1 . l2
  | l2 ~ l1)

test sort2 "a" "b" get "ab" = "ab"
test sort2 "a" "b" get "ba" = "ab"

let sort3 (l1:lens) (l2:lens) (l3:lens) : lens = 
  let s23 : lens = sort2 l2 l3 in 
  ( l1 . s23
  | (l2 ~ l1) . l3
  | l3 ~ (l1 . l2)
  | s23 ~ l1 )

test sort3 "a" "b" "c" get "abc" = "abc"
test sort3 "a" "b" "c" get "acb" = "abc"
test sort3 "a" "b" "c" get "bac" = "abc"
test sort3 "a" "b" "c" get "bca" = "abc"
test sort3 "a" "b" "c" get "cab" = "abc"
test sort3 "a" "b" "c" get "cba" = "abc"

let sort4 (l1:lens) (l2:lens) (l3:lens) (l4:lens) : lens = 
  let s12 : lens = sort2 l1 l2 in 
  let s23 : lens = sort2 l2 l3 in 
  let s34 : lens = sort2 l3 l4 in 
  let s123 : lens = sort3 l1 l2 l3 in 
  let s234 : lens = sort3 l2 l3 l4 in 
  let f1324 : lens = atype l1 . (atype l3 ~ atype l2) . atype l4 in 
  ( l1 . s234 
  | s234 ~ l1
  | ((l2 . l3) ~ l1) . l4
  | (l2 ~ l1) . s34 
  | (l3 ~ s12) . l4
  | l4 ~ (l1 . s23)
  | l4 ~ ((l2 ~ l1) . l3)
  | l4 ~ (l3 ~ (l1 . l2))
  | (l3 . l4) ~ (l1 . l2) 
  | ( (l2 . l4) ~ (l1 . l3); f1324 )
  | ( (l3 ~ l1) . (l4 ~ l2); f1324 ) )

test sort4 "a" "b" "c" "d" get "abcd" = "abcd"
test sort4 "a" "b" "c" "d" get "abdc" = "abcd"
test sort4 "a" "b" "c" "d" get "acbd" = "abcd"
test sort4 "a" "b" "c" "d" get "acdb" = "abcd"
test sort4 "a" "b" "c" "d" get "adbc" = "abcd"
test sort4 "a" "b" "c" "d" get "adcb" = "abcd"
test sort4 "a" "b" "c" "d" get "bacd" = "abcd"
test sort4 "a" "b" "c" "d" get "badc" = "abcd"
test sort4 "a" "b" "c" "d" get "bcad" = "abcd"
test sort4 "a" "b" "c" "d" get "bcda" = "abcd"
test sort4 "a" "b" "c" "d" get "bdac" = "abcd"
test sort4 "a" "b" "c" "d" get "bdca" = "abcd"
test sort4 "a" "b" "c" "d" get "cabd" = "abcd"
test sort4 "a" "b" "c" "d" get "cadb" = "abcd"
test sort4 "a" "b" "c" "d" get "cbad" = "abcd"
test sort4 "a" "b" "c" "d" get "cbda" = "abcd"
test sort4 "a" "b" "c" "d" get "cdab" = "abcd"
test sort4 "a" "b" "c" "d" get "cdba" = "abcd"
test sort4 "a" "b" "c" "d" get "dabc" = "abcd"
test sort4 "a" "b" "c" "d" get "dacb" = "abcd"
test sort4 "a" "b" "c" "d" get "dbac" = "abcd"
test sort4 "a" "b" "c" "d" get "dbca" = "abcd"
test sort4 "a" "b" "c" "d" get "dcab" = "abcd"
test sort4 "a" "b" "c" "d" get "dcba" = "abcd"

(* [qconst C A a c]: is like [const C a c], but accepts all of [A] in
   the PUT/CREATE direction. *)
let qconst (C:regexp) (A:regexp) (a:string) (c:string) : lens = 
  right_quot     
    (const C a c)
    (canonizer_of_lens (const A a a))

(* [qins E e] is like [ins e], but accepts all of [E] in the
   PUT/CREATE direction *)
let qins (E:regexp) (e:string) : { "" <-> E } = 
  qconst "" E e "" 

(* qins unit tests *)
test qins [A-Z]+ "A" get "" = "A"
test qins [A-Z]+ "A" create "ABC" = ""

(* [qdel E e] is like [del E] but canonizes to [e] in the PUT/CREATE
   direction. *)
let qdel (E:regexp) (e:string) : { E <-> "" } = 
  left_quot 
    (canonizer_of_lens (default (del E) e))
    ""
(* qdel unit tests *)
test (qdel [A-Z]+ "ZZZ" get "ABC") = ""
test (qdel [A-Z]+ "ZZZ" put "" into "ABC") = "ZZZ"
  
(* --------------------------------------------------------------------------- *)
(* CONSTANTS *)

(* [ANY] any string *)
let ANY : regexp = [^]*

(* [containing R] any string containing [R] *)
let containing (R:regexp) : regexp = ANY . R . ANY

(* [NL] newline *)
let NL :string = "\n"

(* [WS] whitespace *)
let WS : regexp = [ \n]*

(* [NWS] not white space *)
let NWS : regexp = [^ \n]

(* [WSP] positive whitespace *)
let WSP : regexp = [ \n]+

(* [S] space *)
let S : regexp = [ ]*

(* [SP] positive space *)
let SP : regexp = [ ]+

(* [DIGIT] digit *)
let DIGIT : regexp = [0-9]

(* [nlX]: X^th amount of whitespace--used to canonize XML *)
let nl0 = "\n"
let nl1 = nl0 . "  "
let nl2 = nl1 . "  "
let nl3 = nl2 . "  "
let nl4 = nl3 . "  "
let nl5 = nl4 . "  "
let nl6 = nl5 . "  "
let nl7 = nl6 . "  " 
let nl8 = nl7 . "  "
let nl9 = nl8 . "  "
let nl10 = nl9 . "  "

(* --------------------------------------------------------------------------- *)
(* XML functions *)

(* [xml_esc_char ex] maps an XML symbol -- either a character or an
   escaped characeter -- to its equivalent representation in ASCII.
   o [ex] is the set of excluded characters
 *)
let xml_esc_char (excl_chars:regexp) : lens = 
  ( [^&<>\n] - excl_chars
  | "&gt;" <-> ">"
  | "&lt;" <-> "<"
  | "&amp;" <-> "&" )

(* [xml_esc_string_ends ex ends_ex] maps an XML-escaped string
   beginning and ending with characters not in [ex] or [ends_ex], to
   its equivalent representation in ASCII.
   o [ex] the set of excluded characters.       
   o [ends_ex] the set of excluded characters at the end points.
*)
let xml_esc_string_ends (excl_chars:regexp) (ends_excl_chars:regexp) : lens = 
  let esc_char : lens = xml_esc_char excl_chars in 
  let esc_char_ends : lens = xml_esc_char (excl_chars | ends_excl_chars) in 
    esc_char_ends . (esc_char . esc_char_ends)* 

(* [xml_esc_string ex] maps an XML-escaped string starting and
   beginning with a non-space character, to its equivalent
   representation in ASCII.
   o [ex] the set of excluded characters.  
*)
let xml_esc_string (excl_chars:regexp) : lens = 
  xml_esc_string_ends excl_chars [ ] 

(* [xml_open sp t] recognizes and deletes a string consisting of
   whitespace and the start of an XML open tag.
   o [sp] is used to canonize the leading whitespace.
   o [t] is the tag.
*)
let xml_open (spaces:string) (tag:string) : lens = 
  qdel WS spaces . 
  del ("<" . tag) 

(* [xml_close] recognizes and deletes the string ">" *)
let xml_close : lens = 
  del ">"

(* [xml_slash_close] recognizes and deletes strings consisting of
   whitespace followed by "/>", which is used to terminate XML
   elements whose children are all attributes.
*)
let xml_slash_close : lens = 
  qdel (WS . "/>") "/>"

(* [xml_open_tag sp t] recognizes and deletes a string consisting of
   whitespace followed by an XML open tag.
   o [sp] canonical leading whitespace.
   o [t] element tag.
*)
let xml_open_tag (spaces:string) (tag:string) : lens = 
  xml_open spaces tag . 
  xml_close

(* [xml_simple_close_tag t] recognizes and deletes a string consisting
   of an XML close tag.
   o [t] element tag.   
*)
let xml_simple_close_tag (tag:string) : lens = 
  del ("</" . tag . ">")

(* [xml_close_tag sp t] recognizes and deletes a string consisting of
   whitespace followed by an XML close tag. 
   o [sp] canonical leading whitespace.
   o [t] element tag.
*)
let xml_close_tag (spaces:string) (tag:string) : lens = 
  qdel WS spaces . 
  xml_simple_close_tag tag

(* [xml_simple_elt sp t l] proecesses a single-line XML element.
   o [sp] canonical leading whitespace.
   o [t] element tag.
   o [l] lens for processing the children.
*)
let xml_simple_elt (spaces:string) (tag:string) (body:lens) : lens = 
  xml_open_tag spaces tag . 
  body . 
  xml_simple_close_tag tag

(* [xml_elt sp t l] processes a multi-line XML element.
   o [sp] canonical leading whitespace.
   o [t] element tag.
   o [l] lens for processing children.
*)
let xml_elt (spaces:string) (tag:string) (body:lens) : lens = 
  xml_open_tag spaces tag . 
  body . 
  xml_close_tag spaces tag
  
(* [xml_attr n l] proceses a string consiting of whitespace and a
   single XML attribute. Leading whitespace is canonized to a single
   space.
   o [n] attribute name.
   o [l] lens for processing value.
*)
let xml_attr (name:string) (value:lens) : lens = 
  qdel WSP " " . 
  del name . 
  del "=\"" . 
  value . 
  del "\""
    
(* [xml_attr1_elt sp t n v l] processes a multi-line XML element with
   one attribute.
   o [sp] canonical leading whitespace.
   o [t] element tag.
   o [n] attribute name.
   o [v] lens for processing attribute value.
   o [l] lens for processing element children.
*)
let xml_attr1_elt (spaces:string) (tag:string) 
    (name:string) (value:lens) 
    (body:lens) : lens = 
  xml_open spaces tag . 
  xml_attr name value . 
  xml_close . 
  body . 
  xml_close_tag spaces tag 
    
(* [xml_attr1_simple_elt sp t n v l] processes a single-line XML element with
   one attribute.
   o [sp] canonical leading whitespace.
   o [t] element tag.
   o [n] attribute name.
   o [v] lens for processing attribute value.
   o [l] lens for processing element children.
*)
let xml_attr1_simple_elt (spaces:string) (tag:string) 
    (name:string) (value:lens) 
    (body:lens) : lens = 
  xml_open spaces tag . 
    xml_attr name value . 
    xml_close . 
    body . 
    xml_simple_close_tag tag 

(* [xml_attr1_elt_no_kids sp t n v] processes a single-line XML element with
   no children (other than its single attribute.)
   o [sp] canonical leading whitespace.
   o [t] element tag.
   o [n] attribute name.
   o [v] lens for processing attribute value.
*)
let xml_attr1_elt_no_kids (spaces:string) (tag:string) (name:string) (value:lens) : lens = 
  xml_open spaces tag . 
  xml_attr name value . 
  xml_slash_close

(* [xml_attr2_elt sp t n1 v1 n2 v2 l] processes a multi-line XML
   element with two attributes.
   o [sp] canonical leading whitespace.
   o [t] element tag.
   o [ni] ith attribute name.
   o [vi] lens for processing ith attribute value.
   o [l] lens for processing element children.
*)
let xml_attr2_elt (spaces:string) (tag:string) 
    (name1:string) (value1:lens) 
    (name2:string) (value2:lens) 
    (body:lens) : lens = 
  xml_open spaces tag . 
  sort2 
    (xml_attr name1 value1) 
    (xml_attr name2 value2) . 
  xml_close . 
  body . 
  xml_close_tag spaces tag 

(* [xml_attr1_elt_no_kids sp t n1 v1 n2 v2] processes a single-line
   XML element with no children (other than its two attributes.)
   o [sp] canonical leading whitespace.
   o [t] element tag.
   o [ni] ith attribute name.
   o [vi] lens for processing ith attribute value.
*)
let xml_attr2_elt_no_kids (spaces:string) (tag:string) 
    (name1:string) (value1:lens) 
    (name2:string) (value2:lens) : lens = 
  xml_open spaces tag . 
  sort2
    (xml_attr name1 value1) 
    (xml_attr name2 value2) . 
  xml_slash_close 

(* [xml_attr3_elt_no_kids sp t n1 v1 n2 v2 n3 v3] processes a
   single-line XML element with no children (other than its three
   attributes.)
   o [sp] canonical leading whitespace.
   o [t] element tag.
   o [ni] ith attribute name.
   o [vi] lens for processing ith attribute value.
*)
let xml_attr3_elt_no_body (spaces:string) (tag:string) 
    (name1:string) (value1:lens) 
    (name2:string) (value2:lens) 
    (name3:string) (value3:lens) : lens = 
  xml_open spaces tag . 
  sort3 
    (xml_attr name1 value1) 
    (xml_attr name2 value2)  
    (xml_attr name3 value3) .
  xml_slash_close 

(* --------------------------------------------------------------------------- *)
(* ASCII Helpers *)

(* [tag t] formats a UniProtKB format and standard three spaces. 
   o [t] tag. 
*)
let tag (t:string) : lens = 
  ins (t . "   ")

(* [terminate l] wraps [l] so that it also inserts [NL]. 
   o [l] lens
*)
let terminate (l:lens) : lens = l . ins NL

let space : lens = ins " " 
let qspace : lens = qins S " "
let semi : lens = ins ";"
let dot : lens = ins "." 
let comma : lens = ins "," 

(* --------------------------------------------------------------------------- *)
(* ID line *)

(* an entry is either SwissProt (human annotated) or TrEMBL (computer generated) *)
type entry = SwissProt | TrEMBL

let id_xml (ty:entry) : lens = 
  let id_tag : string = "ID" in 
  let EntryName : lens = [A-Z0-9_]{1,12} in 
  let Status : lens = 
    ( match ty with 
    | SwissProt -> ins "Reviewed"
    | TrEMBL    -> ins "Unreviewed" ) . 
    semi in 
  let SequenceLength : lens = 
    qins DIGIT+ "000" . 
    qspace . 
    ins "AA" . 
    dot in 
  (* id_xml body *)
  tag id_tag . 
  xml_simple_elt nl1 "name" 
    begin 
      key EntryName . qspace . 
      Status . qspace .
      SequenceLength
end

let id_line (ty:entry) : lens = terminate (id_xml ty)

(* ID line unit tests *)
test id_line SwissProt get 
  "<name>Q56J06_9FLAV</name>" 
= 
  "ID   Q56J06_9FLAV Reviewed; 000 AA.\n"

test id_line TrEMBL create 
  "ID   Q5JU06_HUMAN Unreviewed; 280 AA.\n" 
=  
  "\n  <name>Q5JU06_HUMAN</name>"

(*
(* --------------------------------------------------------------------------- *)
(* AC line *)
let ac_tag : string = "AC"
let ac_data : regexp = [A-Z0-9]{6} 
let ac_entry : regexp = ac_data . ";" 
let ac_xml : lens =  
  let ac_elt (sep:string) : lens = 
    xml_simple_elt nl1 "accession" (ac_data . qins (sep . S) sep) in 
  tag "AC" . 
  (ac_elt "; ")* . (ac_elt ";")
let ac_cn : canonizer = columnize (atype ac_xml) " " "\nAC  "
let ac_line : lens = right_quot ac_xml ac_cn

(* unit tests *)
test ac_line get 
  "<accession>Q21234</accession>" 
= "AC  Q21234;" 

let ac_sample : string = 
  "
  |  <accession>Q92892</accession>
  |  <accession>Q92893</accession>
  |  <accession>Q92894</accession>
  |  <accession>Q92895</accession>
  |  <accession>Q93053</accession>
  |  <accession>Q96KU9</accession>
  |  <accession>Q93053</accession>
  |  <accession>Q96KV0</accession>
  |  <accession>Q93053</accession>
  |  <accession>Q93053</accession>
  |  <accession>Q93053</accession>
  |  <accession>Q96KU9</accession>" 

test ac_line get ac_sample
= 
  "AC  Q92892; Q92893; Q92894; Q92895; Q93053; Q96KU9; Q93053; Q96KV0; Q93053;
  |AC  Q93053; Q93053; Q96KU9;"

test ac_line create
  "AC    Q92892; Q92893; Q92894; Q92895; 
  |AC         Q93053; Q96KU9; Q93053; Q96KV0; Q93053;
  |AC  Q93053;   Q93053; 
  |AC  Q96KU9;"
= ac_sample

test ac_line put
  "AC    Q21234; QJNF12;"
into
  "<accession>Q92892</accession>
  |  <accession>Q92893</accession>
  |      <accession>Q92894</accession>
  | <accession>Q92895</accession>"
= 
  "
  |  <accession>Q21234</accession>
  |  <accession>QJNF12</accession>" 
 
(* --------------------------------------------------------------------------- *)
(* DT line *)

(* [date] maps between aphanumeric and numeric dates *)
let date,partial_date : lens * lens = 
  let day : regexp = DIGIT{2} in 
  let month : lens = 
    ( "01" <-> "JAN" 
    | "02" <-> "FEB" 
    | "03" <-> "MAR" 
    | "04" <-> "APR" 
    | "05" <-> "MAY" 
    | "06" <-> "JUN" 
    | "07" <-> "JUL" 
    | "08" <-> "AUG" 
    | "09" <-> "SEP" 
    | "10" <-> "OCT" 
    | "11" <-> "NOV" 
    | "12" <-> "DEC" ) in       
  let year : regexp = DIGIT{4} in 
    (default
      (year ~ (("-" . month . "-") ~ day))        
      "1900-01-01",
     default
       (year ~ (del "-" . month . ins "-"))
       "1900-01")

test date get "2009-01-20" = "20-JAN-2009"
test partial_date get "2009-01" = "JAN-2009" 

let (entry_cn,entry_xml) : canonizer * lens = 
  let entry_tag : string = "entry" in 
  let DATE : regexp = ctype date in 
  let STRING : regexp = [A-Za-z\-]+ in 
  (* helpers *)
  let cp_ws (R:regexp) : lens = WSP . R in 
  let attr  (s:string) (R:regexp) : regexp = s . "=\"" . R . "\"" in 
  (* definitions *)
  let R1 = attr "created" DATE in 
  let R2 = attr "dataset" STRING in
  let R3 = attr "modified" DATE in
  let R4 = attr "version" NUMBER in 
  let cn : canonizer = canonizer_of_lens (
    xml_open nl1 entry_tag . 
    (sort4 (cp_ws R1) (cp_ws R2) (cp_ws R3) (cp_ws R4)) . 
    xml_slash_close) in 
  let dt1a = tag "DT" . date . ins ", " in
  let dt1b = ins "integrated into UniprotKB/" . STRING . ins "." . ins NL in
  let dt3a = tag "DT" . date . ins ", " in
  let dt3b = ins "entry version" . qins S " " . NUMBER . ins "." in
  let xml : lens = 
    xml_attr "created" dt1a .
    xml_attr "dataset" dt1b .  
    xml_attr "modified" dt3a . 
    xml_attr "version" dt3b in 
  (cn,xml)

let entry_line = left_quot entry_cn entry_xml

test entry_line get 
  "<entry created=\"2006-04-18\" version=\"15\"   dataset=\"Swiss-Prot\"   modified=\"2007-02-20\"/>"
= 
  "DT  18-APR-2006, integrated into UniprotKB/Swiss-Prot.
  |DT  20-FEB-2007, entry version 15."
 
(* --------------------------------------------------------------------------- *)
(* DE line *)

let de_xml : lens = 
  let name2 : lens = xml_simple_elt nl2 "name" ALPHA in
  let name3 : lens = xml_simple_elt nl3 "name" ALPHA in 
  let domain: lens = xml_elt nl2 "domain" (name3 . (ins " (". name3 . ins ")")* ) in 
  let component: lens = xml_elt nl2 "component" (name3 . (ins " (". name3 . ins ")")* ) in 
    tag "DE" .
    xml_elt nl1 "protein" 
    (name2 .
       (qsp . ins "[Includes:" . qsp . domain. (ssp . domain)+ . ins "]")? . 
       (qsp . ins "[Contains:" . qsp . component. (ssp. component)+ . ins "]")? )
let de_cn : canonizer = columnize (atype de_xml) " " "\nDE  "

let de_sample : string = 
  "
  |  <protein>
  |    <name>Arginine biosynthesis bifunctional protein argJ</name>
  |    <domain>
  |      <name>Glutamate N-acetyltransferase</name>
  |      <name>EC 2.3.1.35</name>
  |      <name>Ornithine acetyltransferase</name>
  |      <name>Ornithine transacetylase</name>
  |      <name>OATase</name>
  |    </domain>
  |    <domain>
  |      <name>Amino-acid acetyltransferase</name>
  |      <name>EC 2.3.1.1</name>
  |      <name>N-acetylglutamate synthase</name>
  |      <name>AGS</name>
  |    </domain>
  |    <component>
  |      <name>Arginine biosynthesis bifunctional protein argJ alpha chain</name>
  |    </component>
  |    <component>
  |      <name>Arginine biosynthesis bifunctional protein argJ beta chain</name>
  |    </component>
  |  </protein>"

test right_quot de_xml de_cn get
  de_sample 
=
 "DE  Arginine biosynthesis bifunctional protein argJ [Includes: Glutamate
 |DE  N-acetyltransferase (EC 2.3.1.35) (Ornithine acetyltransferase) (Ornithine
 |DE  transacetylase) (OATase); Amino-acid acetyltransferase (EC 2.3.1.1)
 |DE  (N-acetylglutamate synthase) (AGS)] [Contains: Arginine biosynthesis bifunctional
 |DE  protein argJ alpha chain; Arginine biosynthesis bifunctional protein argJ beta
 |DE  chain]"

test right_quot de_xml de_cn create 
 "DE  Arginine biosynthesis bifunctional protein argJ [Includes: Glutamate
 |DE  N-acetyltransferase (EC 2.3.1.35) (Ornithine acetyltransferase) (Ornithine
 |DE  transacetylase) (OATase); Amino-acid acetyltransferase (EC 2.3.1.1)
 |DE  (N-acetylglutamate synthase) (AGS)] [Contains: Arginine biosynthesis bifunctional
 |DE  protein argJ alpha chain; Arginine biosynthesis bifunctional protein argJ beta
 |DE  chain]"
=
 de_sample

(* --------------------------------------------------------------------------- *)
(* GN line *)

let gn_xml : lens = 
  let gn_any_name (ty:string) (pre:string) (post:string) : lens = 
    xml_attr1_simple_elt nl2 "name" "type" (del ty) (ins pre . ALPHA . ins post) in 
  let gn_primary : lens = gn_any_name "primary" "Name=" "" in 
  let gn_fst_syn : lens = gn_any_name "synonym" "Synonyms=" "" in 
  let gn_syn : lens = gn_any_name "synonym" ", " "" in 
  let gn_fst_ordered_locus : lens = gn_any_name "ordered locus" "OrderedLocusNames=" "" in 
  let gn_ordered_locus : lens = gn_any_name "ordered locus" ", " "" in 
  let gn_fst_orf : lens = gn_any_name "ORF" "ORFNames=" "" in 
  let gn_orf : lens = gn_any_name "ORF" ", " "" in 
  let gn_names : lens = 
    gn_primary .
    ins "; " . 
    gn_fst_syn . gn_syn* .
    ins "; " . 
    gn_fst_ordered_locus . gn_ordered_locus* . 
    ins "; " . 
    gn_fst_orf . gn_orf* . 
    ins ";" in
  let wrap (l:lens) : lens = right_quot l (columnize (atype l) " " "\nGN  ") in
  let gn_elt : lens = 
    tag "GN" .
    xml_elt nl1 "gene" gn_names in 
    wrap gn_elt . (ins "\n" . tag "GN" . ins "and\n" . wrap gn_elt)*
     
let gn_line : lens = gn_xml 

test gn_line get 
  "<gene>
    <name type=\"primary\">Jon99Ciii</name>
    <name type=\"synonym\">SER5</name>
    <name type=\"synonym\">Ser99Db</name>
    <name type=\"ordered locus\">b1237</name>
    <name type=\"ordered locus\">c1701</name>
    <name type=\"ORF\">CG15519</name>
  </gene>
  <gene>
    <name type=\"primary\">Jon99Ciii</name>
    <name type=\"synonym\">SER5</name>
    <name type=\"ordered locus\">c1701</name>
    <name type=\"ORF\">CG15519</name>
  </gene>" 
= 
  "GN  Name=Jon99Ciii; Synonyms=SER5, Ser99Db; OrderedLocusNames=b1237, c1701;
  |GN  ORFNames=CG15519;
  |GN  and
  |GN  Name=Jon99Ciii; Synonyms=SER5; OrderedLocusNames=c1701; ORFNames=CG15519;"

(* --------------------------------------------------------------------------- *)
(* OS line *)
let names_xml (spaces:string) : lens = 
  let any_name (ty:string) (pre:string) (post:string) : lens = 
    xml_attr1_simple_elt spaces "name" "type" (del ty) (ins pre . ALPHA . ins post) in 
  let scientific : lens = any_name "scientific" "" "" in 
  let common : lens = any_name "common" "(" ")" in 
  let syn : lens = any_name "synonym" "(" ")" in 
    scientific 
  | scientific . 
    qsp . common
  | scientific . 
    qsp . common . 
    qsp . syn+

let os_xml : lens = 
  tag "OS" .
  names_xml nl2 . 
  ins "."      
let os_cn : canonizer = columnize (atype os_xml) " " "\nOS  "
let os_line : lens = right_quot os_xml os_cn 

test os_line get 
  "<name type=\"scientific\">Solanum lycopersicum</name>
  |<name type=\"common\">Tomato</name>
  |<name type=\"synonym\">Lycopersicon esculentum</name>" 
= 
  "OS  Solanum lycopersicum (Tomato) (Lycopersicon esculentum)."

test os_line create
  "OS  Passer domesticus (House sparrow)."
=
  "
  |    <name type=\"scientific\">Passer domesticus</name>
  |    <name type=\"common\">House sparrow</name>"

(* --------------------------------------------------------------------------- *)
(* OG line *)

let og_xml : lens = 
  let og_plasmid : lens = 
    xml_attr1_elt nl1 "geneLocation" "type" (del "plasmid") 
      (ins "Plasmid" . 
       qsp . 
       xml_simple_elt nl2 "name" ALPHAP) in
  let og_other : lens = 
    xml_attr1_elt_no_body nl1 "geneLocation" "type"   
      ( "hydrogenosome" <-> "Hydrogenosome" 
      | "mitochondrion" <-> "Mitochondrion" 
      | "nucleomorph"   <-> "Nucleomorph"   
      | "plastid"       <-> "Plastid"       
      | (ins "Plastid;" . qsp . 
           ( "apicoplast"  <-> "Apicoplast"  
           | "chloroplast" <-> "Chloroplast" 
           | "cyanelle"    <-> "Cyanelle"    
           | "non-photosynthetic plastid" <-> "Non-photosynthetic plastid"))) in
    tag "OG" . 
      ( og_plasmid . ((csp . og_plasmid)* . (csp . ins "and" . qsp . og_plasmid))?
      | og_other) .       
      ins "." 

let og_cn : canonizer = columnize (atype og_xml) " " "\nOG  "
let og_line : lens = right_quot og_xml og_cn 

test og_line create 
"OG  Plasmid R6-5, Plasmid IncFII R100 (NR1),
|OG   and Plasmid IncFII R1-19 (R1 drd-19)." 
= 
"
  <geneLocation type=\"plasmid\">
    <name>R6-5</name>
  </geneLocation>
  <geneLocation type=\"plasmid\">
    <name>IncFII R100 (NR1)</name>
  </geneLocation>
  <geneLocation type=\"plasmid\">
    <name>IncFII R1-19 (R1 drd-19)</name>
  </geneLocation>" 

test og_xml get
  "<geneLocation type=\"non-photosynthetic plastid\"/>" 
= "OG  Plastid; Non-photosynthetic plastid."

(* --------------------------------------------------------------------------- *)
(* OC line *)
let oc_xml : lens = 
  let taxon (l:lens) : lens = xml_simple_elt nl3 "taxon" (ALPHA . l) in 
  tag "OC" . 
  xml_elt nl2 "lineage"
    ((taxon (ins ";" . qsp))* . 
     taxon (ins ".")) 
let oc_cn : canonizer = columnize (atype oc_xml) " " "\nOC  "
let oc_line : lens = right_quot oc_xml oc_cn 

test oc_line create
"OC   Eukaryota; Alveolata; Apicomplexa; Aconoidasida; Piroplasmida; Theileriidae; Theileria."
=
"
|    <lineage>
|      <taxon>Eukaryota</taxon>
|      <taxon>Alveolata</taxon>
|      <taxon>Apicomplexa</taxon>
|      <taxon>Aconoidasida</taxon>
|      <taxon>Piroplasmida</taxon>
|      <taxon>Theileriidae</taxon>
|      <taxon>Theileria</taxon>
|    </lineage>"

test oc_line get 
"
  <lineage>
    <taxon>Eukaryota</taxon>
    <taxon>Alveolata</taxon>
    <taxon>Apicomplexa</taxon>
    <taxon>Aconoidasida</taxon>
    <taxon>Piroplasmida</taxon>
    <taxon>Theileriidae</taxon>
    <taxon>Theileria</taxon>
  </lineage>"

= 
  "OC  Eukaryota; Alveolata; Apicomplexa; Aconoidasida; Piroplasmida; Theileriidae;
  |OC  Theileria."

(* --------------------------------------------------------------------------- *)
(* OX line *)
let ncbi_xml (spaces:string) : lens = 
  let a1 : lens = xml_attr "type" (del "NCBI Taxonomy") in 
  let a2 : lens = xml_attr "key" (del NUMBER) in 
  let a3 : lens = xml_attr "id" (ins "NCBI_TaxID=" . NUMBER . ins ";") in  
  xml_open spaces "dbReference" .
    (sort3 a1 a2 a3) . 
    xml_slash_close 

let ox_xml : lens = 
  tag "OX" . 
  ncbi_xml nl2
let ox_cn : canonizer = columnize (atype ox_xml) " " "\nOX  "
let ox_line : lens = right_quot ox_xml ox_cn

test ox_line get 
  "<dbReference type=\"NCBI Taxonomy\" key=\"1\" id=\"5874\"/>" 
= 
  "OX  NCBI_TaxID=5874;" 

test ox_line create 
  "OX  NCBI_TaxID=5874;" 
=
  "
  |    <dbReference type=\"NCBI Taxonomy\" key=\"0\" id=\"5874\"/>" 

(* --------------------------------------------------------------------------- *)
(* OH line *)
let oh_xml : lens =
  tag "OH" .
  xml_attr1_elt nl1 "organism" "key" (del NUMBER) 
  (names_xml nl2 ~ (ncbi_xml nl2 . qsp)) . 
  ins "."

let oh_cn : canonizer = columnize (atype oh_xml) " " "\nOH  "
let oh_line : lens = right_quot oh_xml oh_cn

test oh_line create
  "OH   NCBI_TaxID=9481; Callithrix." 
= 
  "
  |  <organism key=\"0\">
  |    <name type=\"scientific\">Callithrix</name>
  |    <dbReference type=\"NCBI Taxonomy\" key=\"0\" id=\"9481\"/>
  |  </organism>"

test oh_line get 
  "<organism key=\"1\">
  |  <name type=\"scientific\">Callithrix</name>
  |  <dbReference type=\"NCBI Taxonomy\" key=\"1\" id=\"9481\"/>
  |</organism>" 
= 
  "OH  NCBI_TaxID=9481; Callithrix."

(* --------------------------------------------------------------------------- *)
(* OS OG OC OX OH block *)

let os_og_oc_ox_oh_block = 
  xml_open nl1 "organism" . 
  xml_attr "key" (del NUMBER) . 
  xml_close . 
  terminate os_line . 
  (((terminate ox_line ~
    terminate oc_line) . 
   qdel WS nl1 . 
   xml_close_tag "organism" . 
   (terminate oh_line)* ) ~
  terminate og_line)

test os_og_oc_ox_oh_block get
  "<organism key=\"1\">
  |    <name type=\"scientific\">Solanum melongena</name>
  |    <name type=\"common\">Eggplant</name>
  |    <name type=\"synonym\">Aubergine</name>
  |    <dbReference type=\"NCBI Taxonomy\" key=\"1\" id=\"9606\"/>
  |    <lineage>
  |      <taxon>Mammalia</taxon>
  |      <taxon>Eutheria</taxon>
  |    </lineage>
  |  </organism>  <organism key=\"1\">
  |    <name type=\"scientific\">Callithrix</name>
  |    <dbReference type=\"NCBI Taxonomy\" key=\"1\" id=\"9481\"/>
  |  </organism>
  |  <organism key=\"1\">
  |    <name type=\"scientific\">Cercopithecus hamlyni</name>
  |    <name type=\"common\">Owl-faced monkey</name>
  |    <name type=\"synonym\">Hamlyn's monkey</name>
  |    <dbReference type=\"NCBI Taxonomy\" key=\"1\" id=\"9536\"/>
  |  </organism>
  |   <geneLocation type=\"apicoplast\"/>"
= 
  "OS  Solanum melongena (Eggplant) (Aubergine).
  |OG  Plastid; Apicoplast.
  |OC  Mammalia; Eutheria.
  |OX  NCBI_TaxID=9606;
  |OH  NCBI_TaxID=9481; Callithrix.
  |OH  NCBI_TaxID=9536; Cercopithecus hamlyni (Owl-faced monkey) (Hamlyn's monkey).
  |"

test os_og_oc_ox_oh_block create 
  "OS   Solanum melongena (Eggplant) (Aubergine).
  |OG   Plastid; Apicoplast.
  |OC   Mammalia; Eutheria.
  |OX   NCBI_TaxID=9606;
  |OH   NCBI_TaxID=9481; Callithrix.
  |OH   NCBI_TaxID=9536; Cercopithecus hamlyni (Owl-faced monkey) (Hamlyn's monkey).
  |" 
= 
"
|  <organism key=\"0\">
|    <name type=\"scientific\">Solanum melongena</name>
|    <name type=\"common\">Eggplant</name>
|    <name type=\"synonym\">Aubergine</name>
|    <dbReference type=\"NCBI Taxonomy\" key=\"0\" id=\"9606\"/>
|    <lineage>
|      <taxon>Mammalia</taxon>
|      <taxon>Eutheria</taxon>
|    </lineage>
|  </organism>
|  <organism key=\"0\">
|    <name type=\"scientific\">Callithrix</name>
|    <dbReference type=\"NCBI Taxonomy\" key=\"0\" id=\"9481\"/>
|  </organism>
|  <organism key=\"0\">
|    <name type=\"scientific\">Cercopithecus hamlyni</name>
|    <name type=\"common\">Owl-faced monkey</name>
|    <name type=\"synonym\">Hamlyn's monkey</name>
|    <dbReference type=\"NCBI Taxonomy\" key=\"0\" id=\"9536\"/>
|  </organism>
|  <geneLocation type=\"apicoplast\"/>"


(* --------------------------------------------------------------------------- *)
(* RN line *)
let rn_xml : lens = 
  tag "RN" . 
  xml_open nl1 "reference" . 
  xml_attr "key" (brackets NUMBER) . 
  xml_close 
let rn_line : lens = rn_xml
test rn_line create 
  "RN [1]"  = 
  "
  |  <reference key=\"1\">" 

(* --------------------------------------------------------------------------- *)
(* RP line *)
let rp_xml : lens = 
  tag "RP" . 
  xml_simple_elt nl2 "scope" ALPHA . 
  ins "." 
let rp_cn : canonizer = 
  columnize (atype rp_xml) " " "\nRP  "
let rp_line : lens = right_quot rp_xml rp_cn

test rp_line create 
  "RP   NUCLEOTIDE SEQUENCE [GENOMIC DNA]." 
= 
  "
  |    <scope>NUCLEOTIDE SEQUENCE [GENOMIC DNA]</scope>"

(* --------------------------------------------------------------------------- *)
(* RC line *)
let rc_xml : lens = 
  let aux (xml:string) (ascii:string) : lens = 
    let l : lens = xml_simple_elt nl3 xml ALPHAP in 
    ins ascii . 
    ins "=" . 
    l . 
    ((csp . l)* . 
     (csp . ins "and" . qsp . l))? . 
    ins ";" in 
  let strain : lens =  aux "strain" "STRAIN" in 
  let tissue : lens =  aux "tissue" "TISSUE" in 
  let plasmid : lens =  aux "plasmid" "PLASMID" in 
  let transposon : lens =  aux "transposon" "TRANSPPSON" in 
  let final_plasmid : lens = (strain . qsp)? . plasmid in 
  let final_transposon : lens = ((strain | final_plasmid) . qsp)? . transposon in 
  let final_tissue : lens = ((strain | final_plasmid | final_transposon) . qsp)? . tissue in 
  let all = strain | final_tissue | final_plasmid | final_transposon in 
  tag "RC" . 
  xml_elt nl2 "source" all 

let rc_cn : canonizer = 
  columnize (atype rc_xml) " " "\nRC  "

let rc_line : lens = right_quot rc_xml rc_cn 

test rc_line create 
  "RC   STRAIN=AL.012, AZ.026, AZ.180, DC.005, GA.039, GA2181, IL.014, and IL2.17;" 
= 
  "
  |    <source>
  |      <strain>AL.012</strain>
  |      <strain>AZ.026</strain>
  |      <strain>AZ.180</strain>
  |      <strain>DC.005</strain>
  |      <strain>GA.039</strain>
  |      <strain>GA2181</strain>
  |      <strain>IL.014</strain>
  |      <strain>IL2.17</strain>
  |    </source>"

test rc_line get
  "      <source>
  |        <plasmid>R1 (R7268)</plasmid>
  |        <transposon>Tn3</transposon>
  |      </source>" 
= 
  "RC  PLASMID=R1 (R7268); TRANSPPSON=Tn3;" 

(* --------------------------------------------------------------------------- *)
(* RX line *)
let rx_xml : lens = 
  let aux (db:string) : lens = 
    let l : lens = xml_attr3_elt_no_body nl2 "dbReference" 
      "type" (del db)
      "key" (del NUMBER) 
      "id" ALPHAP in 
    ins db . 
    ins "=" . 
    l . 
    ins ";" in 
  let medline : lens =  aux "MEDLINE" in 
  let pubmed : lens = aux "PubMed" in 
  let doi : lens = aux "DOI" in 
  let all = (medline | pubmed | doi) in 
  tag "RX" . 
  all . (qsp . all)*
let rx_cn : canonizer = 
  columnize (atype rx_xml) " " "\nRX  "
let rx_line : lens = right_quot rx_xml rx_cn 

test rx_line create 
  "RX   MEDLINE=90158697; PubMed=1689460; DOI=10.1016/0166-6851(90)90007-9;" 
=
   "
   |    <dbReference type=\"MEDLINE\" key=\"0\" id=\"90158697\"/>
   |    <dbReference type=\"PubMed\" key=\"0\" id=\"1689460\"/>
   |    <dbReference type=\"DOI\" key=\"0\" id=\"10.1016/0166-6851(90)90007-9\"/>" 

test rx_line get 
   "     <dbReference type=\"DOI\" key=\"1\" id=\"10.1016/0166-6851(90)90007-9\"/>
   |     <dbReference type=\"MEDLINE\" key=\"1\" id=\"90158697\"/>
   |     <dbReference type=\"PubMed\" key=\"1\" id=\"1689460\"/>"
=
  "RX  DOI=10.1016/0166-6851(90)90007-9; MEDLINE=90158697; PubMed=1689460;"

(* --------------------------------------------------------------------------- *)
(* RG line *)
let rg_xml : lens = 
  tag "RG" . 
  xml_attr1_elt_no_body nl3 "consortium" "name" ALPHA .
  ins ";" 
let rg_cn : canonizer = 
  columnize (atype rg_xml) " " "\nRG  "
let rg_line : lens = right_quot rg_xml rg_cn

test rg_line create 
  "RG  The C. elegans sequencing consortium;" 
= 
  "
  |      <consortium name=\"The C. elegans sequencing consortium\"/>"

(* --------------------------------------------------------------------------- *)
(* RA line *)
let person (spaces:string) : lens = xml_attr1_elt_no_body spaces "person" "name" ALPHA 

let ra_xml : lens = 
  tag "RA" . 
  person nl3 . (csp . person nl3)* .
  ins ";" 

let ra_cn : canonizer = 
  columnize (atype ra_xml) " " "\nRA  " 
let ra_line : lens = right_quot ra_xml ra_cn 

test ra_line get 
  "
   |      <person name=\"Iams K.P.\"/>
   |      <person name=\"Young J.R.\"/>
   |      <person name=\"Nene V.\"/>
   |      <person name=\"Desai J.\"/>
   |      <person name=\"Webster P.\"/>
   |      <person name=\"Ole-Moiyoi O.K.\"/>
   |      <person name=\"Musoke A.J.\"/>"
=
  "RA  Iams K.P., Young J.R., Nene V., Desai J., Webster P., Ole-Moiyoi O.K., Musoke
  |RA  A.J.;"

test ra_line create 
  "RA   Iams K.P., Young J.R., Nene V., Desai J., Webster P., Ole-Moiyoi O.K., Musoke A.J.;"
=
  "
   |      <person name=\"Iams K.P.\"/>
   |      <person name=\"Young J.R.\"/>
   |      <person name=\"Nene V.\"/>
   |      <person name=\"Desai J.\"/>
   |      <person name=\"Webster P.\"/>
   |      <person name=\"Ole-Moiyoi O.K.\"/>
   |      <person name=\"Musoke A.J.\"/>"

(* --------------------------------------------------------------------------- *)
(* RT line *)

let rt_xml : lens = 
  tag "RT" . 
  xml_simple_elt nl2 "title" (quotes (ALPHAC . [.!])) . 
  ins ";"

let rt_cn : canonizer = 
  columnize (atype rt_xml) " " "\nRT  " 
let rt_line : lens = right_quot rt_xml rt_cn 

test rt_line get
  "
  |  <title>Boomerang: resourceful lenses for ordered data.</title>" 
=
  "RT  \"Boomerang: resourceful lenses for ordered data.\";"

test rt_line create
  "RT  \"Regulation of nitrogen metabolism in Bacillus subtilis: vive la difference!\";" 
= 
  "
  |    <title>Regulation of nitrogen metabolism in Bacillus subtilis: vive la difference!</title>"

(* --------------------------------------------------------------------------- *)
(* RL line *)

let journal_xml : lens = 
  xml_open nl1 "citation" . 
  xml_attr "type" (del "journal article") . 
  xml_attr "name" (ALPHA . qsp) . 
  xml_attr "volume" (NUMBER . ins ":") . 
  xml_attr "first" (NUMBER . ins "-") . 
  xml_attr "last" (NUMBER ) . 
  xml_attr "date" (braces NUMBER) . 
  xml_slash_close . 
  ins "." 

test journal_xml get 
"<citation type=\"journal article\" name=\"Science\" volume=\"309\" first=\"131\" last=\"133\" date=\"2005\"/>" 
=
"Science 309:131-133(2005)."

let electronic_xml : lens = 
  xml_open nl1 "citation" . 
  xml_attr "type" (del "online journal article" . ins "(er)" . qsp) . 
  xml_attr "name" ALPHA . 
  xml_slash_close . 
  ins "." 

test electronic_xml get
  "<citation type=\"online journal article\" name=\"Plant Gene Register PGR98-023\"/>" 
= 
  "(er) Plant Gene Register PGR98-023."

let editors_xml : lens = 
  ins "(In)" . qsp . 
  xml_elt nl2 "editorList"
  (person nl3 . (csp . person nl3)* . qsp . ins "(eds.);" . qsp)

test editors_xml create 
 "(In) Rich D.H., Gross E. (eds.); " 
=
"
|    <editorList>
|      <person name=\"Rich D.H.\"/>
|      <person name=\"Gross E.\"/>
|    </editorList>"


let book_xml : lens = 
  (xml_open nl1 "citation" . 
   xml_attr "type" (del "book") . 
   xml_attr "name" (ALPHA . csp) . 
   (xml_attr "volume" (NUMBER . ins ":"))? . 
   xml_attr "first" (ins "pp." . NUMBER . ins "-") . 
   xml_attr "last" (NUMBER . csp) . 
   xml_attr "publisher" (ALPHA . csp) . 
   xml_attr "city" (ALPHA . qsp) . 
   xml_attr "date" (braces NUMBER) . 
   xml_close . 
   ins ".") ~
  editors_xml . 
  qdel WS nl1 .     
  xml_close_tag "citation" 

test book_xml create
"(In) Rich D.H., Gross E. (eds.); Proceedings of the 7th American peptide symposium, pp.69-72, Pierce Chemical Co., Rockford Il. (1981)."
=
"
|  <citation type=\"book\" name=\"Proceedings of the 7th American peptide symposium\" first=\"69\" last=\"72\" publisher=\"Pierce Chemical Co.\" city=\"Rockford Il.\" date=\"1981\">
|    <editorList>
|      <person name=\"Rich D.H.\"/>
|      <person name=\"Gross E.\"/>
|    </editorList>
|  </citation>"

let unpublished_xml : lens = 
  ins "Unpublished observations" . qsp . 
  xml_open nl1 "citation" . 
  xml_attr "type" (del "unpulished observations") . 
  xml_attr "date" (braces partial_date) . 
  xml_slash_close . 
  ins "." 

test unpublished_xml create 
  "Unpublished observations (JAN-2009)." 
= 
  "
  |  <citation type=\"unpulished observations\" date=\"2009-01\"/>"

let thesis_xml : lens = 
  ins "Thesis" . qsp . 
  xml_open nl1 "citation" . 
  xml_attr "type" (del "thesis") . 
  xml_attr "date" (braces NUMBER . csp) . 
  xml_attr "institute" (ALPHA . csp) . 
  xml_attr "country" (ALPHA) . 
  xml_slash_close . 
  ins "." 

test thesis_xml create 
  "Thesis (1977), University of Geneva, Switzerland." 
= 
  "
  |  <citation type=\"thesis\" date=\"1977\" institute=\"University of Geneva\" country=\"Switzerland\"/>"

let patent_xml : lens = 
  ins "Patent number" . qsp . 
  xml_open nl1 "citation" . 
  xml_attr "type" (del "patent") . 
  xml_attr "number" (ALPHA . csp) . 
  xml_attr "date" date . 
  xml_slash_close . 
  ins "." 

test patent_xml create
  "Patent number WO9010703, 20-SEP-1990." 
= 
  "
  |  <citation type=\"patent\" number=\"WO9010703\" date=\"1990-09-20\"/>"

let submitted_xml : lens = 
  ins "Submitted" . qsp . 
  xml_open nl1 "citation" . 
  xml_attr "type" (del "submission") . 
  xml_attr "date" (braces partial_date) . 
  qsp . ins "to" . qsp . 
  xml_attr "db"
    ("the EMBL/GenBank/DDBJ databases"
    |"UniProtKB"
    |"the PDB data bank"
    |"the PIR data bank") . 
  xml_slash_close . 
  ins "." 

test submitted_xml create 
  "Submitted (OCT-1995) to the EMBL/GenBank/DDBJ databases." 
= 
  "
  |  <citation type=\"submission\" date=\"1995-10\" db=\"the EMBL/GenBank/DDBJ databases\"/>"

let rl_xml : lens = 
  tag "RL" . 
  (journal_xml | electronic_xml | book_xml | unpublished_xml | thesis_xml | submitted_xml) 
let rl_cn : canonizer = 
  columnize (atype rl_xml) " " "\nRL  "
let rl_line : lens = 
  right_quot rl_xml rl_cn 

(* --------------------------------------------------------------------------- *)
(* Reference block *)

let rp_rc_rx_block : lens = 
  (terminate rx_line)? ~
  (terminate rp_line . 
  (terminate rc_line)? )

let rg_ra_block : lens = 
  xml_elt nl2 "authorList" 
    ( terminate rg_line
    | (terminate ra_line) . 
      (terminate rg_line)? )  

let rg_ra_rt_block : lens = 
  (terminate rt_line)? ~ rg_ra_block 

let reference_block : lens = 
  (terminate rn_line) . 
  (rg_ra_rt_block ~ 
   rp_rc_rx_block) . 
  qdel WS nl1 . 
  xml_close_tag "reference"

test reference_block create
  "RN   [1]
  |RP   NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA].
  |RC   STRAIN=Ankara;
  |RX   PubMed=15994557; DOI=10.1126/science.1110418;
  |RA   Pain A., Renauld H.;
  |RT   \"Genome of the host-cell transforming parasite Theileria annulata compared with T. parva.\";
  |" 
=
  "
  |  <reference key=\"1\">
  |    <title>Genome of the host-cell transforming parasite Theileria annulata compared with T. parva.</title>
  |    <authorList>
  |      <person name=\"Pain A.\"/>
  |      <person name=\"Renauld H.\"/>
  |    </authorList>
  |    <dbReference type=\"PubMed\" key=\"0\" id=\"15994557\"/>
  |    <dbReference type=\"DOI\" key=\"0\" id=\"10.1126/science.1110418\"/>
  |    <scope>NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA]</scope>
  |    <source>
  |      <strain>Ankara</strain>
  |    </source>
  |  </reference>"
  
(* --------------------------------------------------------------------------- *)
(* CC line *)

let cc_break : lens = ins "\nCC      "  

let cc_fix (l:lens) : lens = right_quot l (columnize (atype l) " " "\nCC        ") 

let cc_status : lens = 
  xml_attr "status"
    ( "by similarity" <-> " (By similarity)"
    | "potential"     <-> " (Potential)"    
    | "probable"      <-> " (Probable)" )

let CC_DATA : regexp = 
  (NWS . ANY  . NWS) - (containing ([<>&\n] | "-!-") | ANY . (atype cc_status | ".")) 

let cc_generic_xml (ty:lens) : lens = 
  tag "CC" . 
  ins "-!-" . qsp . 
  xml_open nl1 "comment" . 
  xml_attr "type" ty . 
  ((cc_status? . xml_close) ~
  (ins ":" . qsp . CC_DATA)) . 
  xml_close_tag "comment" . 
  ins "." 

let cc_unstructured_xml : lens = 
  cc_generic_xml
    ( "allergen"             <-> "ALLERGEN"
    | "biotechnology"        <->  "BIOTECHNOLOGY"       
    | "catalytic activity"   <->  "CATALYTIC ACTIVITY"  
    | "cofactor"             <->  "COFACTOR"            
    | "developmental stage"  <->  "DEVELOPMENTAL STAGE" 
    | "disease"              <->  "DISEASE"             
    | "domain"               <->  "DOMAIN"              
    | "enzyme regulation"    <->  "ENZYME REGULATION"   
    | "function"             <->  "FUNCTION"            
    | "induction"            <->  "INDUCTION"           
    | "miscellaneous"        <->  "MISCELLANEOUS"       
    | "pathway"              <->  "PATHWAY"             
    | "pharmaceutical"       <->  "PHARMACEUTICAL"      
    | "polymorphism"         <->  "POLYMORPHISM"        
    | "PTM"                  <->  "PTM"                 
    | "RNA editing"          <->  "RNA EDITING"         
    | "similarity"           <->  "SIMILARITY"          
    | "subcellular location" <->  "SUBCELLULAR LOCATION"
    | "subunit"              <->  "SUBUNIT"             
    | "tissue specificity"   <->  "TISSUE SPECIFICITY"  
    | "toxic dose"           <->  "TOXIC DOSE" )

test cc_unstructured_xml create 
  ("CC   -!- ALLERGEN: Causes an allergic reaction in humans. Binds to IgE. " . 
   "Partially heat-labile allergen that may cause both respiratory and " . 
   "food-allergy symptoms in patients with the bird-egg syndrome.") = 
  "
  |  <comment type=\"allergen\">Causes an allergic reaction in humans. Binds to IgE. Partially heat-labile allergen that may cause both respiratory and food-allergy symptoms in patients with the bird-egg syndrome</comment>"

test cc_unstructured_xml create
  "CC    -!- SUBCELLULAR LOCATION: Golgi apparatus (By similarity)." 
= 
  "
  |  <comment type=\"subcellular location\" status=\"by similarity\">Golgi apparatus</comment>" 

let cc_biophysicochemical_properties_xml : lens = 
  let absorption : lens = 
    ins " Absorption: " .
    xml_elt nl2 "absorption"
      (xml_simple_elt nl3 "max" (ins "Abs(max)=" . ALPHAP . ins "; ") . qsp . 
       xml_simple_elt nl3 "text" (ins "Note=" . ALPHAP . ins ";")) in 
  let kinetic_parameters : lens = 
    ins " Kinetic parameters: " . 
    xml_elt nl2 "kinetics" 
      (xml_simple_elt nl3 "KM" (ins "KM=" . ALPHAP . ins "; ") . qsp . 
       xml_simple_elt nl3 "Vmax" (ins "Vmax=" . ALPHAP . ins "; ") . qsp . 
       xml_simple_elt nl3 "text" (ins "Note=" . ALPHAP . ins ";"))  in 
  let generic (xml:string) (ascii:string) : lens = 
    ins " " . ins ascii . ins ": " . 
    xml_elt nl2 xml (ALPHAP . ssp ) in 
  let ph_dependence : lens = 
    generic "phDependence" "pH dependence" in
  let redox_potential : lens = 
    generic "redoxPotential" "Redox potential" in
  let temperature_dependence : lens = 
    generic "temperatureDependence" "Temperature dependence" in       
  tag "CC" . 
  ins "-!-" . qsp . 
  xml_open nl1 "comment" . 
  xml_attr "type" ("biophysicochemical properties" <-> "BIOPHYSICOCHEMICAL PROPERTIES") . 
  xml_close . 
  ins ":"  . qsp . 
  absorption? . 
  kinetic_parameters? . 
  ph_dependence? . 
  redox_potential? . 
  temperature_dependence? . 
  qdel WS nl1 . 
  xml_close_tag "comment" 

test cc_biophysicochemical_properties_xml get 
"  <comment type=\"biophysicochemical properties\">
    <absorption>
      <max>465 nm</max>
      <text>The above maximum is for the oxidized form. Shows a maximal peak at 330 nm in the reduced form. These absorption peaks are for the tryptophylquinone cofactor</text>
    </absorption>
    <kinetics>
      <KM>5.4 uM for tyramine</KM>
      <Vmax>17 umol/min/mg enzyme</Vmax>
      <text>The enzyme is substrate inhibited at high substrate concentrations (Ki=1.08 mM for tyramine)</text>
    </kinetics>
  </comment>" 
= 
  "CC  -!- BIOPHYSICOCHEMICAL PROPERTIES:  Absorption: Abs(max)=465 nm;  Note=The above maximum is for the oxidized form. Shows a maximal peak at 330 nm in the reduced form. These absorption peaks are for the tryptophylquinone cofactor; Kinetic parameters: KM=5.4 uM for tyramine;  Vmax=17 umol/min/mg enzyme;  Note=The enzyme is substrate inhibited at high substrate concentrations (Ki=1.08 mM for tyramine);"

let interaction : lens = 
  let experiments : lens = 
    ins "NbExp=" . 
    xml_simple_elt nl2 "experiments" NUMBER . 
    ssp in
  let self_rest : lens = 
    ins "Self" . 
    xml_slash_close .     
    xml_simple_elt nl2 "organismsDiffer" (del "false") in
  let id_rest : lens = 
    xml_close . 
    xml_simple_elt nl3 "id" ALPHA . 
    ins ":" . 
    (xml_simple_elt nl3 "label" ALPHA | ins "-") . 
    qdel WS nl2 . 
    xml_close_tag "interactant" . 
    xml_simple_elt nl2 "organismsDiffer" ( del "true". qsp . ins "(xeno)" | del "false") in    
  default_tag "CC" "      " . 
  xml_attr1_elt nl1 "comment" "type" (del "interaction") 
    begin  
      ( ins "IntAct=" . 
        xml_attr1_elt_no_body nl2 "interactant" "intactId" ALPHA . 
        csp . 
        xml_open nl2 "interactant" . 
        xml_attr "intactId" ALPHA . 
        ins ";") ~
      (( self_rest | id_rest ) . 
       ssp .
      experiments)
    end

test interaction get 
"  <comment type=\"interaction\">
    <interactant intactId=\"EBI-1043398\"/>
    <interactant intactId=\"EBI-1050185\">
      <id>Q8NBH6</id>
    </interactant>
    <organismsDiffer>false</organismsDiffer>
    <experiments>1</experiments>
  </comment>" = 
"CC      Q8NBH6:-; NbExp=1; IntAct=EBI-1043398, EBI-1050185;" 

let cc_interaction_xml : lens =        
  tag "CC" . 
  ins "-!- " . qins WS "" . 
  ins "INTERACTION:" . qins WS "\n" .
  (interaction . qins WS "\n")* . interaction  

test cc_interaction_xml get 
"  <comment type=\"interaction\">
    <interactant intactId=\"EBI-1043398\"/>
    <interactant intactId=\"EBI-1043398\"/>
    <organismsDiffer>false</organismsDiffer>
    <experiments>1</experiments>
  </comment>
  <comment type=\"interaction\">
    <interactant intactId=\"EBI-1043398\"/>
    <interactant intactId=\"EBI-1050185\">
      <id>Q8NBH6</id>
    </interactant>
    <organismsDiffer>false</organismsDiffer>
    <experiments>1</experiments>
  </comment>
  <comment type=\"interaction\">
    <interactant intactId=\"EBI-1043398\"/>
    <interactant intactId=\"EBI-350350\">
      <id>P21266</id>
      <label>GSTM3</label>
    </interactant>
    <organismsDiffer>false</organismsDiffer>
    <experiments>1</experiments>
  </comment>" 
= 
  "CC  -!- INTERACTION:
  |CC      Self; NbExp=1; IntAct=EBI-1043398, EBI-1043398;
  |CC      Q8NBH6:-; NbExp=1; IntAct=EBI-1043398, EBI-1050185;
  |CC      P21266:GSTM3; NbExp=1; IntAct=EBI-1043398, EBI-350350;"

test cc_interaction_xml create
  "CC   -!- INTERACTION:
  |CC       Self; NbExp=1; IntAct=EBI-476263, EBI-476263;
  |CC       P31749:AKT1; NbExp=2; IntAct=EBI-476263, EBI-296087;
  |CC       Q9UER7:DAXX; NbExp=3; IntAct=EBI-476263, EBI-77321;
  |CC       P25445:FAS; NbExp=1; IntAct=EBI-476263, EBI-494743;
  |CC       P15626:Gstm2 (xeno); NbExp=1; IntAct=EBI-476263, EBI-1209729;
  |CC       P09211:GSTP1; NbExp=1; IntAct=EBI-476263, EBI-353467;
  |CC       Q9WTR2:Map3k6 (xeno); NbExp=1; IntAct=EBI-476263, EBI-1254790;
  |CC       O08815:Slk (xeno); NbExp=1; IntAct=EBI-476263, EBI-986112;
  |CC       Q12933:TRAF2; NbExp=1; IntAct=EBI-476263, EBI-355744;
  |CC       P63104:YWHAZ; NbExp=1; IntAct=EBI-476263, EBI-347088;" 
= 
  "
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-476263\"/>
  |    <organismsDiffer>false</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-296087\">
  |      <id>P31749</id>
  |      <label>AKT1</label>
  |    </interactant>
  |    <organismsDiffer>false</organismsDiffer>
  |    <experiments>2</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-77321\">
  |      <id>Q9UER7</id>
  |      <label>DAXX</label>
  |    </interactant>
  |    <organismsDiffer>false</organismsDiffer>
  |    <experiments>3</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-494743\">
  |      <id>P25445</id>
  |      <label>FAS</label>
  |    </interactant>
  |    <organismsDiffer>false</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-1209729\">
  |      <id>P15626</id>
  |      <label>Gstm2</label>
  |    </interactant>
  |    <organismsDiffer>true</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-353467\">
  |      <id>P09211</id>
  |      <label>GSTP1</label>
  |    </interactant>
  |    <organismsDiffer>false</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-1254790\">
  |      <id>Q9WTR2</id>
  |      <label>Map3k6</label>
  |    </interactant>
  |    <organismsDiffer>true</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-986112\">
  |      <id>O08815</id>
  |      <label>Slk</label>
  |    </interactant>
  |    <organismsDiffer>true</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-355744\">
  |      <id>Q12933</id>
  |      <label>TRAF2</label>
  |    </interactant>
  |    <organismsDiffer>false</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>
  |  <comment type=\"interaction\">
  |    <interactant intactId=\"EBI-476263\"/>
  |    <interactant intactId=\"EBI-347088\">
  |      <id>P63104</id>
  |      <label>YWHAZ</label>
  |    </interactant>
  |    <organismsDiffer>false</organismsDiffer>
  |    <experiments>1</experiments>
  |  </comment>"

let cc_alternative_products_xml : lens = 
  let event : lens = 
    xml_attr1_elt_no_body nl2 "event" "type" 
      ( "alternative promoter"    <-> "Alternative promoter usage" 
      | "alternative splicing"    <-> "Alternative splicing"       
      | "alternative initiation"  <-> "Alternative initiation"     
      | "ribosomal frameshifting" <-> "Ribosomal frameshifting") in 
  let events : lens = 
    ins "Event=" . 
    event . (csp . event)* . 
    ins ";" in
  let named_isos : lens = 
    ins "Named isoforms=" . qins NUMBER "0" . 
    ins ";" in
  let generic (xml:string) (ascii:string) : lens = 
    ins ascii . ins "=" . 
    xml_simple_elt nl2 xml ALPHA . 
    ins ";" in 
  let name : lens =     
    let id : lens = xml_simple_elt nl3 "id" (ALPHA) in
    let synonyms : lens = 
      let s : lens = xml_simple_elt nl3 "name" ALPHA in
      ins "Synonyms=" . 
      s . (csp . s)* .
      ins ";" in
    let sequence : lens = 
      let vsp : lens = "VSP_" . NUMBER in 
      ins "Sequence=" . 
      ( xml_attr1_elt_no_body nl2 "sequence" "type"
          ( "displayed"     <-> "Displayed"
          | "external"      <-> "External"
          | "not described" <-> "Not described")
      | xml_attr2_elt_no_body nl2 "sequence" 
          "type" (del "described")
          "ref"  (vsp . (csp . vsp)* )) . 
      ins ";" in 
    xml_elt nl2 "isoform" 
      begin 
        ((ins "IsoId=" . 
          id . (csp . id)* . 
          ssp ) ~
         (ins "Name=" . 
          xml_simple_elt nl3 "name" (ALPHA) . 
          ssp . 
          (synonyms . qsp )? )) . 
        sequence . 
        (generic "note" "Note")? 
      end in 
  let prelude : lens = 
    tag "CC" . 
    ins "-!-" . qsp . 
    ins "ALTERNATIVE_PRODUCTS:" . 
    cc_break in     
  let named_isos : lens = qsp . ins "Named isoforms=" . count (ctype name) . ins ";" in
  let names : lens = (cc_break . cc_fix name)* in 
  let comment : lens = (qsp . generic "comment" "Comment")? in 
  let entry : lens = 
    prelude . 
    xml_attr1_elt nl1 "comment" "type" (del "alternative products") 
      begin 
        events . 
        comment .
        duplicate_snd named_isos names 
      end in 
  let cn : canonizer = 
    canonizer_of_lens 
      (invert 
         begin 
           atype prelude . 
           cc_fix 
             (atype events . 
              (atype comment ~ atype named_isos)) . 
             atype names
         end) in 
    right_quot entry cn

let cc_alternative_products_line : lens =   
  cc_alternative_products_xml 

test cc_alternative_products_line get
  "<comment type=\"alternative products\">
  |     <event type=\"alternative splicing\"/>
  |     <comment>This is a rather lengthy comment.</comment>
  |     <isoform>
  |       <id>P48347-1</id>
  |       <name>1</name>
  |       <name>D</name>
  |       <name>E</name>
  |       <sequence type=\"displayed\"/>
  |     </isoform>
  |     <isoform>
  |       <id>P48347-2</id>
  |       <name>2</name>
  |       <sequence type=\"described\" ref=\"VSP_008972\"/>
  |     </isoform>
  |   </comment>" 
= 
  "CC  -!- ALTERNATIVE_PRODUCTS:
  |CC      Event=Alternative splicing; Named isoforms=2; Comment=This is a rather lengthy
  |CC        comment.;
  |CC      Name=1; Synonyms=D, E; IsoId=P48347-1; Sequence=Displayed;
  |CC      Name=2; IsoId=P48347-2; Sequence=VSP_008972;"

test cc_alternative_products_line create
  "CC  -!- ALTERNATIVE_PRODUCTS:
  |CC      Event=Alternative splicing; Named isoforms=100; Comment=This is a rather lengthy comment.;
  |CC      Name=1; Synonyms=D, E; IsoId=P48347-1; Sequence=Displayed;
  |CC      Name=2; IsoId=P48347-2; Sequence=VSP_008972;" 
=
  "
  |  <comment type=\"alternative products\">
  |    <event type=\"alternative splicing\"/>
  |    <comment>This is a rather lengthy comment.</comment>
  |    <isoform>
  |      <id>P48347-1</id>
  |      <name>1</name>
  |      <name>D</name>
  |      <name>E</name>
  |    <sequence type=\"displayed\"/>
  |    </isoform>
  |    <isoform>
  |      <id>P48347-2</id>
  |      <name>2</name>
  |    <sequence type=\"described\" ref=\"VSP_008972\"/>
  |    </isoform>
  |  </comment>"

let cc_mass_spectrometry_xml : lens = 
  let err : lens = xml_attr "error" (ins "Mass_error=" . FNUMBER . ssp) in 
  let mass : lens = xml_attr "mass" (ins "Mass=" . FNUMBER . ssp) in
  let meth : lens = xml_attr "method" (ins "Method=" . ALPHA . ssp) in
  let src : lens = qins (WSP . "Source=" . ALPHAC . ";")? "" in 
  tag "CC" . 
  ins "-!-" . qsp . 
  ins "MASS SPECTROMETRY:" . 
  qsp . 
  xml_open nl1 "comment" .
  xml_attr "type" (del "mass spectrometry") . 
  mass . 
  err? . 
  meth . 
  xml_close . 
  ins "Range=" . 
  xml_open nl2 "location" . 
  ( (xml_attr "sequence" (qsp . braces ALPHA))? ~    
    (xml_close . 
     xml_attr1_elt_no_body nl3 "begin" "position" NUMBER . 
     ins "-" . 
     xml_attr1_elt_no_body nl3 "end" "position" NUMBER) ) . 
  qdel WS nl2 . 
  xml_close_tag "location" . 
  ssp . 
  ins "Note=" . 
  xml_simple_elt nl2 "note" ALPHAC . 
  ins ";" . 
  qdel WS nl1 . 
  xml_close_tag "comment" . 
  src

let cc_mass_spectrometry_line : lens = 
  cc_fix cc_mass_spectrometry_xml

test cc_mass_spectrometry_line create
  "CC   -!- MASS SPECTROMETRY: Mass=23290.2; Mass_error=2.9; Method=Electrospray;
  |CC        Range=16-214 (P04653-2); Note=Allele D, with 6 phosphate groups;
  |CC        Source=PubMed:7601973;" 
=
  "
  |  <comment type=\"mass spectrometry\" mass=\"23290.2\" error=\"2.9\" method=\"Electrospray\">
  |    <location sequence=\"P04653-2\">
  |      <begin position=\"16\"/>
  |      <end position=\"214\"/>
  |    </location>
  |    <note>Allele D, with 6 phosphate groups</note>
  |  </comment>"
  
test cc_mass_spectrometry_line get 
  "  <comment type=\"mass spectrometry\" mass=\"29440\" error=\"2\" method=\"MALDI\">
  |      <location>
  |        <begin position=\"1\"/>
  |        <end position=\"255\"/>
  |      </location>
  |      <note>Ref.2</note>
  |    </comment>" 
= 
  "CC  -!- MASS SPECTROMETRY: Mass=29440; Mass_error=2; Method=MALDI; Range=1-255;
  |CC        Note=Ref.2;"

let cc_sequence_caution_xml : lens = 
  let err : lens = xml_attr "error" (ins "Mass_error=" . FNUMBER . ssp) in 
  let mass : lens = xml_attr "mass" (ins "Mass=" . FNUMBER . ssp) in
  let meth : lens = xml_attr "method" (ins "Method=" . ALPHA . ssp) in
  tag "CC" . 
  ins "-!-" . qsp . 
  ins "SEQUENCE CAUTION:" . 
  cc_break . 
  cc_fix (
  xml_attr1_elt nl1 "comment" "type" (del "sequence caution") 
    begin
      ((qsp . ins "Type=" . 
       xml_open nl2 "conflict" . 
       xml_attr "type"
         ( "frameshift" <-> "Frameshift"
         | "erroneous initiation" <-> "Erroneous initiation"             
         | "erroneous termination" <-> "Erroneous termination" 
         | "erroneous gene model prediction" <-> "Erroneous gene model prediction"
         | "erroneous translation" <-> "Erroneous translation"
         | "miscellaneous discrepancy" <-> "Miscellaneous discrepancy") . 
       xml_close . 
       ins ";") ~
      (ins "Sequence=" . 
       xml_attr3_elt_no_body nl2 "sequence"
         "resource" (del ("EMBL-CDS" | "EMBL"))
         "id" (ALPHA) 
         "version" (ins "." . NUMBER) . 
       ins ";")) . 
     qdel WS nl2 . 
     xml_close_tag "conflict" . 
     ( qins (WSP . "Positions=Several;")? ""
     | qsp . ins "Positions=" . 
       xml_elt nl2 "location"
         begin           
           let p : lens = xml_attr1_elt_no_body nl3 "position" "position" (NUMBER) in 
           p . (csp . p)* 
         end . 
       ins ";") . 
     (qsp . ins "Note=" . 
     xml_simple_elt nl2 "note" ALPHA . 
     ins ";")?
    end)

let cc_sequence_caution_line : lens = 
 cc_sequence_caution_xml

test cc_sequence_caution_line get
  "<comment type=\"sequence caution\">
  |<conflict type=\"erroneous termination\">
  |<sequence resource=\"EMBL-CDS\" id=\"AAN42076\" version=\"1\"/>
  |</conflict>
  |<location>
  |<position position=\"273\"/>
  |</location>
  |<note>Translated as Gln.</note>
  |</comment>" 
= 
  "CC  -!- SEQUENCE CAUTION:
  |CC      Sequence=AAN42076.1; Type=Erroneous termination; Positions=273; Note=Translated
  |CC        as Gln.;" 
  

let cc_web_resource_xml : lens = 
  tag "CC" . 
  ins "-!-" . qsp . 
  ins "WEB RESOURCE:" . qsp . 
  xml_attr2_elt nl1 "comment" 
    "type" (del "online information") 
    "name" (ins "Name=" . ALPHA . ssp)
    begin
      let url : lens = 
        ins "URL=" . 
          xml_attr1_elt_no_body nl2 "link" "uri" (quotes ALPHAC) . 
          ins ";" in 
      let note : lens = 
        ins "Note=" . 
        xml_simple_elt nl2 "note" ALPHA . 
        ssp in 
      url ~ note
    end

let cc_web_resource_line : lens = 
  cc_fix cc_web_resource_xml

test cc_web_resource_line get
  "<comment type=\"online information\" name=\"IARC TP53 mutation database\">
  |<link uri=\"http://www-p53.iarc.fr/\"/>
  |<note>Somatic and germline TP53 mutations in human cancers</note>
  |</comment>" 
= 
  "CC  -!- WEB RESOURCE: Name=IARC TP53 mutation database; Note=Somatic and germline
  |CC        TP53 mutations in human cancers; URL=\"http://www-p53.iarc.fr/\";" 

test cc_web_resource_line create
  "CC  -!- WEB RESOURCE: Name=IARC TP53 mutation database; Note=Somatic and germline
  |CC        TP53 mutations in human cancers; URL=\"http://www-p53.iarc.fr/\";" 
= 
  "
  |  <comment type=\"online information\" name=\"IARC TP53 mutation database\">
  |    <link uri=\"http://www-p53.iarc.fr/\"/>
  |    <note>Somatic and germline TP53 mutations in human cancers</note>
  |  </comment>" 

let cc_block : lens = 
  let non_interaction : lens = 
      ( cc_unstructured_xml 
      | cc_biophysicochemical_properties_xml     
      | cc_alternative_products_line 
      | cc_mass_spectrometry_line 
      | cc_sequence_caution_line 
      | cc_web_resource_line) . ins "\n" in 
    ( cc_interaction_xml . ins "\n"
    | non_interaction*
    | (non_interaction* . cc_interaction_xml . ins "\n" . non_interaction)+ )

test cc_block create
  "CC  -!- ALTERNATIVE_PRODUCTS:
  |CC      Event=Alternative splicing; Named isoforms=2; Comment=Additional isoforms seem to exist;
  |CC      Name=1; Synonyms=Ash-L; IsoId=P62993-1, P29354-1; Sequence=Displayed;
  |CC      Name=GRB3-3; IsoId=P62993-2, P29354-2; Sequence=VSP_001839;
  |CC   -!- SUBCELLULAR LOCATION: Golgi apparatus (By similarity).
  |CC   -!- DOMAIN: The SH3 domains mediate interaction with SHB.
  |CC   -!- SIMILARITY: Belongs to the GRB2/sem-5/DRK family.
  |" 
= 
  "
  |  <comment type=\"alternative products\">
  |    <event type=\"alternative splicing\"/>
  |    <comment>Additional isoforms seem to exist</comment>
  |    <isoform>
  |      <id>P62993-1</id>
  |      <id>P29354-1</id>
  |      <name>1</name>
  |      <name>Ash-L</name>
  |    <sequence type=\"displayed\"/>
  |    </isoform>
  |    <isoform>
  |      <id>P62993-2</id>
  |      <id>P29354-2</id>
  |      <name>GRB3-3</name>
  |    <sequence type=\"described\" ref=\"VSP_001839\"/>
  |    </isoform>
  |  </comment>
  |  <comment type=\"subcellular location\" status=\"by similarity\">Golgi apparatus</comment>
  |  <comment type=\"domain\">The SH3 domains mediate interaction with SHB</comment>
  |  <comment type=\"similarity\">Belongs to the GRB2/sem-5/DRK family</comment>"

(* --------------------------------------------------------------------------- *)
(* DR block *)

let sspd = ssp . ins "-" 

let start_dr (db:regexp) : lens = 
  xml_attr "type" (db . ssp) .
  xml_attr "key" (del NUMBER) . 
  xml_attr "id" (ALPHAC)
    

let property (ty:string) : lens = 
  ssp . 
  xml_attr2_elt_no_body nl2 "property" 
    "value" ALPHAC
    "type" (del ty) 

let optional_dr2 (db:regexp) (ty:string) : lens = 
    start_dr db . 
      ( (xml_slash_close . sspd)
      | (xml_close . 
         property ty . 
         qdel WS nl1 . 
         xml_close_tag "dbReference") )

let optional_dr3 (db:regexp) (ty1:string) (ty2:string) : lens = 
  start_dr db . 
    ( (xml_slash_close . sspd{2})
    | (xml_close . 
         ( (property ty1 . (property ty2 | sspd))
          | (sspd | property ty2) ) . 
       qdel WS nl1 . 
       xml_close_tag "dbReference") )

let optional_dr4 (db:regexp) (ty1:string) (ty2:string) (ty3:string) : lens = 
  start_dr db . 
    ( (xml_slash_close . sspd{3})
    | (xml_close . 
         ( (property ty1 . (property ty2 | sspd) . (property ty3 | sspd))
         | (sspd . property ty2 . (property ty3 | sspd))
         | (sspd{2} . property ty3) ) . 
       qdel WS nl1 . 
       xml_close_tag "dbReference") )

let dr_2_1 =
  optional_dr2 ( "HIV" | "InterPro" | "PIR" | "PRINTS" | "REBASE")
    "entry name"

let dr_2_1_3_1 =
  optional_dr3 
    ("Gene3D" | "PANTHER" | "Pfam" | "ProDom" | "SMART" | "TIGRFAMs") 
    "entry name" "match status"

let dr_2_2_3_3_4_1 = 
  optional_dr4 "PDB" "method" "resolution" "chains"


(* !!! pb with HGNC ! the XML file has "entry name" instead of "gene designation" !!! *)
let dr_2_3 =
  optional_dr2 ("DictyBase" | "EcoGene" | "FlyBase" | "HGNC" | "MGI" | "RGD" | "SGD" 
        | "StyGene" | "SubtiList" | "WormBase" | "ZFIN" ) "gene designation"

let dr_2_4_3_2 = 
  optional_dr3 "GO" "term" "evidence"

(* look at dr   HAMAP; MF_01546; atypical; 1. *)
let dr_2_5_3_1 = 
  optional_dr3 "HAMAP" "flag" "match status"

let dr_2_6 = 
  optional_dr2 "ECO2DBASE" "edition"

let dr_2_7 = 
  optional_dr2 ("Cornea-2DPAGE" | "DOSAC-COBS-2DPAGE" | "HSC-2DPAGE" | "REPRODUCTION-2DPAGE" 
        | "SWISS-2DPAGE") "organism name"

let dr_2_8 = 
  optional_dr2 "Ensembl" "organism name"

let dr_2_9_3_1 = 
  optional_dr3 "PIRSF" "entry name" "match status"
  

(* no AARHUS exemple found *)
(*let DR_2_10 = 
  optional_dr2 "AARHUS/GHENT-2DPAGE" "" *)
  
let dr_2_11 = 
  optional_dr2 "WormPep" "accession"
  
let dr_2_12 = 
  start_dr 
    ("AGD" | "ANU-2DPAGE" | "ArrayExpress" | "BioCyc" | "CleanEx" 
    | "COMPLUYEAST-2DPAGE" | "CYGD" | "DIP" | "DisProt" | "EchoBASE" 
    | "GeneDB_Spombe" | "GeneID" | "GlycoSuiteDB" | "Gramene" | "H-InvDB" 
    | "HPA" | "IntAct" | "KEGG" | "LegioList" | "Leproma" | "LinkHub" 
    | "ListiList" | "MaizeGDB" | "MEROPS" | "MypuList" | "OGP" | "PeptideAtlas" 
    | "PharmGKB" | "PHCI-2DPAGE" | "PhosSite" | "PhotoList" | "PMMA-2DPAGE" 
    | "PptaseDB" | "PseudoCAP" | "Rat-heart-2DPAGE" | "RefSeq" | "SagaList" 
    | "Siena-2DPAGE" | "TAIR" | "TIGR" | "TRANSFAC" | "TubercuList or UniGene") .
  xml_slash_close . 
  sspd

let dr_2_13 = 
  optional_dr2 "HSSP" "PDB accession"
    
let dr_2_14 = 
  optional_dr2 "GeneFarm" "family number"
    
let dr_2_15 = 
  optional_dr2 "SMR" "residue range"
  
let dr_2_16 = 
  optional_dr2 "MIM" "type"
  
(* for now, the second identifier seems to be dropped away. I'm waiting for an answer of the uniprot help list *)
(*let dr_2_17 = 
  optional_dr2 "Orphanet" ""*)
  
let dr_2_18 = 
  optional_dr2 "GenomeReviews" "gene designation"
  
let dr_2_19 = 
  optional_dr2 "GermOnline" "organism name"
  
let dr_2_20 = 
  optional_dr2 "PeroxiBase" "entry name"
  
let dr_2_21 = 
  optional_dr2 "Reactome" "pathway name"
  
let dr_2_22 = 
  optional_dr2 "DrugBank" "generic name"
  
let dr_EMBL = 
  optional_dr4 "EMBL" "protein sequence ID" "status" "molecule type"

let dr_PROSITE = 
  optional_dr3 "PROSITE" "entry name" "match status"

let dr_xml = 
  tag "DR" . 
  xml_open nl1 "dbReference" . 
  (dr_2_1 | dr_2_1_3_1 | dr_2_2_3_3_4_1 | dr_2_3 | dr_2_4_3_2 | dr_2_5_3_1 
  | dr_2_6 | dr_2_7 | dr_2_8 | dr_2_9_3_1 | dr_2_11 | dr_2_12 | dr_2_13
  | dr_2_14 | dr_2_15 | dr_2_16 | dr_2_18 | dr_2_19 | dr_2_20 | dr_2_21 
  | dr_2_22 | dr_EMBL | dr_PROSITE) .
  ins "."

test (terminate dr_xml)* get
  "  <dbReference type=\"EMBL\" key=\"1\" id=\"X83468\">
  |    <property value=\"CAA58470.1\" type=\"protein sequence ID\"/>
  |    <property value=\"JOINED\" type=\"status\"/>
  |    <property value=\"Genomic_DNA\" type=\"molecule type\"/>
  |  </dbReference>
  |  <dbReference type=\"PROSITE\" key=\"1\" id=\"PS00940\">
  |    <property value=\"GAMMA_THIONIN\" type=\"entry name\"/>
  |    <property value=\"1\" type=\"match status\"/>
  |  </dbReference>
  |  <dbReference type=\"EMBL\" key=\"1\" id=\"CR940353\">
  |    <property value=\"CAI76474.1\" type=\"protein sequence ID\"/>
  |    <property value=\"Genomic_DNA\" type=\"molecule type\"/>
  |  </dbReference>
  |  <dbReference type=\"KEGG\" key=\"1\" id=\"tan:TA08425\"/>
  |  <dbReference type=\"InterPro\" key=\"1\" id=\"IPR007480\">
  |    <property value=\"DUF529\" type=\"entry name\"/>
  |  </dbReference>
  |  <dbReference type=\"Pfam\" key=\"1\" id=\"PF04385\">
  |    <property value=\"FAINT\" type=\"entry name\"/>
  |    <property value=\"4\" type=\"match status\"/>
  |  </dbReference>" 
= 
  "DR  EMBL; X83468; CAA58470.1; JOINED; Genomic_DNA.
  |DR  PROSITE; PS00940; GAMMA_THIONIN; 1.
  |DR  EMBL; CR940353; CAI76474.1; -; Genomic_DNA.
  |DR  KEGG; tan:TA08425; -.
  |DR  InterPro; IPR007480; DUF529.
  |DR  Pfam; PF04385; FAINT; 4.
  |"

test dr_xml create 
  "DR   EMBL; X83467; CAA58470.1; -; Genomic_DNA." 
= 
  "
  |  <dbReference type=\"EMBL\" key=\"0\" id=\"X83467\">
  |    <property value=\"CAA58470.1\" type=\"protein sequence ID\"/>
  |    <property value=\"-\" type=\"status\"/>
  |    <property value=\"Genomic_DNA\" type=\"molecule type\"/>
  |  </dbReference>"

(* --------------------------------------------------------------------------- *)
(* PE line *)

let pe_xml : lens = 
  tag "PE" . 
  xml_attr1_elt_no_body nl1 "proteinExistence" 
    "type" 
    ( "Evidence at protein level"    <-> "1: Evidence at protein level"   
    | "Evidence at transcript level" <-> "2: Evidence at transcript level"
    | "Inferred from homology"       <-> "3: Inferred from homology"      
    | "Predicted"                    <-> "4: Predicted"                   
    | "Uncertain"                    <-> "5: Uncertain"                   ) . 
  ins ";" 

test pe_xml get 
  "  <proteinExistence type=\"Uncertain\"/>"
= 
  "PE  5: Uncertain;"

test pe_xml create
  "PE   3: Inferred from homology;" 
= 
  "
  |  <proteinExistence type=\"Inferred from homology\"/>"
  
(* --------------------------------------------------------------------------- *)
(* KW line *)

let kw_trans : lens = 
  let mid : lens = del "\">" in 
  ( del "KW-0001" . mid . "2Fe-2S"
  | del "KW-0002" . mid . "3D-structure"
  | del "KW-0003" . mid . "3Fe-4S"
  | del "KW-0004" . mid . "4Fe-4S"
  | del "KW-0937" . mid . "Abscisic acid biosynthesis"
  | del "KW-0938" . mid . "Abscisic acid signaling pathway"
  | del "KW-0005" . mid . "Acetoin biosynthesis"
  | del "KW-0006" . mid . "Acetoin catabolism"
  | del "KW-0007" . mid . "Acetylation"
  | del "KW-0008" . mid . "Acetylcholine receptor inhibitor"
  | del "KW-0009" . mid . "Actin-binding"
  | del "KW-0117" . mid . "Actin capping"
  | del "KW-0010" . mid . "Activator"
  | del "KW-0011" . mid . "Acute phase"
  | del "KW-0012" . mid . "Acyltransferase"
  | del "KW-0013" . mid . "ADP-ribosylation"
  | del "KW-0913" . mid . "Age-related macular degeneration"
  | del "KW-0948" . mid . "Aicardi-Goutieres syndrome"
  | del "KW-0014" . mid . "AIDS"
  | del "KW-0015" . mid . "Albinism"
  | del "KW-0016" . mid . "Alginate biosynthesis"
  | del "KW-0017" . mid . "Alkaloid metabolism"
  | del "KW-0019" . mid . "Alkylphosphonate uptake"
  | del "KW-0020" . mid . "Allergen"
  | del "KW-0021" . mid . "Allosteric enzyme"
  | del "KW-0022" . mid . "Alpha-amylase inhibitor"
  | del "KW-0023" . mid . "Alport syndrome"
  | del "KW-0024" . mid . "Alternative initiation"
  | del "KW-0877" . mid . "Alternative promoter usage"
  | del "KW-0025" . mid . "Alternative splicing"
  | del "KW-0026" . mid . "Alzheimer disease"
  | del "KW-0027" . mid . "Amidation"
  | del "KW-0028" . mid . "Amino-acid biosynthesis"
  | del "KW-0029" . mid . "Amino-acid transport"
  | del "KW-0030" . mid . "Aminoacyl-tRNA synthetase"
  | del "KW-0031" . mid . "Aminopeptidase"
  | del "KW-0032" . mid . "Aminotransferase"
  | del "KW-0924" . mid . "Ammonia transport"
  | del "KW-0878" . mid . "Amphibian defense peptide"
  | del "KW-0034" . mid . "Amyloid"
  | del "KW-0035" . mid . "Amyloplast"
  | del "KW-0036" . mid . "Amyotrophic lateral sclerosis"
  | del "KW-0037" . mid . "Angiogenesis"
  | del "KW-0039" . mid . "Anion exchange"
  | del "KW-0040" . mid . "ANK repeat"
  | del "KW-0041" . mid . "Annexin"
  | del "KW-0042" . mid . "Antenna complex"
  | del "KW-0045" . mid . "Antibiotic biosynthesis"
  | del "KW-0044" . mid . "Antibiotic"
  | del "KW-0046" . mid . "Antibiotic resistance"
  | del "KW-0047" . mid . "Antifreeze protein"
  | del "KW-0929" . mid . "Antimicrobial"
  | del "KW-0043" . mid . "Anti-oncogene"
  | del "KW-0049" . mid . "Antioxidant"
  | del "KW-0050" . mid . "Antiport"
  | del "KW-0051" . mid . "Antiviral defense"
  | del "KW-0930" . mid . "Antiviral protein"
  | del "KW-0933" . mid . "Apicoplast"
  | del "KW-0052" . mid . "Apoplast"
  | del "KW-0053" . mid . "Apoptosis"
  | del "KW-0054" . mid . "Arabinose catabolism"
  | del "KW-0055" . mid . "Arginine biosynthesis"
  | del "KW-0056" . mid . "Arginine metabolism"
  | del "KW-0057" . mid . "Aromatic amino acid biosynthesis"
  | del "KW-0058" . mid . "Aromatic hydrocarbons catabolism"
  | del "KW-0059" . mid . "Arsenical resistance"
  | del "KW-0060" . mid . "Ascorbate biosynthesis"
  | del "KW-0061" . mid . "Asparagine biosynthesis"
  | del "KW-0062" . mid . "Aspartic protease inhibitor"
  | del "KW-0063" . mid . "Aspartyl esterase"
  | del "KW-0064" . mid . "Aspartyl protease"
  | del "KW-0065" . mid . "Atherosclerosis"
  | del "KW-0067" . mid . "ATP-binding"
  | del "KW-0066" . mid . "ATP synthesis"
  | del "KW-0068" . mid . "Autocatalytic cleavage"
  | del "KW-0069" . mid . "Autoimmune encephalomyelitis"
  | del "KW-0070" . mid . "Autoimmune uveitis"
  | del "KW-0071" . mid . "Autoinducer synthesis"
  | del "KW-0072" . mid . "Autophagy"
  | del "KW-0073" . mid . "Auxin biosynthesis"
  | del "KW-0927" . mid . "Auxin signaling pathway"
  | del "KW-0875" . mid . "Bacterial capsule"
  | del "KW-0077" . mid . "Bacteriochlorophyll biosynthesis"
  | del "KW-0076" . mid . "Bacteriochlorophyll"
  | del "KW-0871" . mid . "Bacteriocin biosynthesis"
  | del "KW-0079" . mid . "Bacteriocin immunity"
  | del "KW-0078" . mid . "Bacteriocin"
  | del "KW-0080" . mid . "Bacteriocin transport"
  | del "KW-0081" . mid . "Bacteriolytic enzyme"
  | del "KW-0082" . mid . "Bait region"
  | del "KW-0083" . mid . "Bardet-Biedl syndrome"
  | del "KW-0910" . mid . "Bartter syndrome"
  | del "KW-0084" . mid . "Basement membrane"
  | del "KW-0075" . mid . "B-cell activation"
  | del "KW-0085" . mid . "Behavior"
  | del "KW-0086" . mid . "Bence-Jones protein"
  | del "KW-0087" . mid . "Bernard Soulier syndrome"
  | del "KW-0088" . mid . "Bile acid catabolism"
  | del "KW-0089" . mid . "Bile pigment"
  | del "KW-0090" . mid . "Biological rhythms"
  | del "KW-0091" . mid . "Biomineralization"
  | del "KW-0093" . mid . "Biotin biosynthesis"
  | del "KW-0092" . mid . "Biotin"
  | del "KW-0094" . mid . "Blood coagulation"
  | del "KW-0095" . mid . "Blood group antigen"
  | del "KW-0100" . mid . "Branched-chain amino acid biosynthesis"
  | del "KW-0101" . mid . "Branched-chain amino acid catabolism"
  | del "KW-0102" . mid . "Bromination"
  | del "KW-0103" . mid . "Bromodomain"
  | del "KW-0104" . mid . "Cadmium"
  | del "KW-0105" . mid . "Cadmium resistance"
  | del "KW-0108" . mid . "Calcium channel inhibitor"
  | del "KW-0107" . mid . "Calcium channel"
  | del "KW-0106" . mid . "Calcium"
  | del "KW-0111" . mid . "Calcium/phospholipid-binding"
  | del "KW-0109" . mid . "Calcium transport"
  | del "KW-0112" . mid . "Calmodulin-binding"
  | del "KW-0113" . mid . "Calvin cycle"
  | del "KW-0116" . mid . "cAMP-binding"
  | del "KW-0115" . mid . "cAMP biosynthesis"
  | del "KW-0114" . mid . "cAMP"
  | del "KW-0118" . mid . "Capsid assembly"
  | del "KW-0917" . mid . "Capsid maturation"
  | del "KW-0167" . mid . "Capsid protein"
  | del "KW-0119" . mid . "Carbohydrate metabolism"
  | del "KW-0120" . mid . "Carbon dioxide fixation"
  | del "KW-0121" . mid . "Carboxypeptidase"
  | del "KW-0122" . mid . "Cardiomyopathy"
  | del "KW-0123" . mid . "Cardiotoxin"
  | del "KW-0124" . mid . "Carnitine biosynthesis"
  | del "KW-0125" . mid . "Carotenoid biosynthesis"
  | del "KW-0898" . mid . "Cataract"
  | del "KW-0127" . mid . "Catecholamine biosynthesis"
  | del "KW-0128" . mid . "Catecholamine metabolism"
  | del "KW-0129" . mid . "CBS domain"
  | del "KW-0130" . mid . "Cell adhesion"
  | del "KW-0131" . mid . "Cell cycle"
  | del "KW-0132" . mid . "Cell division"
  | del "KW-0133" . mid . "Cell shape"
  | del "KW-0135" . mid . "Cellulose biosynthesis"
  | del "KW-0136" . mid . "Cellulose degradation"
  | del "KW-0134" . mid . "Cell wall"
  | del "KW-0137" . mid . "Centromere"
  | del "KW-0138" . mid . "CF(0)"
  | del "KW-0139" . mid . "CF(1)"
  | del "KW-0142" . mid . "cGMP-binding"
  | del "KW-0141" . mid . "cGMP biosynthesis"
  | del "KW-0140" . mid . "cGMP"
  | del "KW-0143" . mid . "Chaperone"
  | del "KW-0144" . mid . "Charcot-Marie-Tooth disease"
  | del "KW-0145" . mid . "Chemotaxis"
  | del "KW-0147" . mid . "Chitin-binding"
  | del "KW-0146" . mid . "Chitin degradation"
  | del "KW-0870" . mid . "Chloride channel inhibitor"
  | del "KW-0869" . mid . "Chloride channel"
  | del "KW-0868" . mid . "Chloride"
  | del "KW-0149" . mid . "Chlorophyll biosynthesis"
  | del "KW-0881" . mid . "Chlorophyll catabolism"
  | del "KW-0148" . mid . "Chlorophyll"
  | del "KW-0150" . mid . "Chloroplast"
  | del "KW-0151" . mid . "Chlorosome"
  | del "KW-0152" . mid . "Cholesterol biosynthesis"
  | del "KW-0153" . mid . "Cholesterol metabolism"
  | del "KW-0891" . mid . "Chondrogenesis"
  | del "KW-0155" . mid . "Chromate resistance"
  | del "KW-0156" . mid . "Chromatin regulator"
  | del "KW-0157" . mid . "Chromophore"
  | del "KW-0957" . mid . "Chromoplast"
  | del "KW-0158" . mid . "Chromosomal protein"
  | del "KW-0160" . mid . "Chromosomal rearrangement"
  | del "KW-0159" . mid . "Chromosome partition"
  | del "KW-0161" . mid . "Chronic granulomatous disease"
  | del "KW-0162" . mid . "Chylomicron"
  | del "KW-0163" . mid . "Citrate utilization"
  | del "KW-0164" . mid . "Citrullination"
  | del "KW-0165" . mid . "Cleavage on pair of basic residues"
  | del "KW-0168" . mid . "Coated pits"
  | del "KW-0169" . mid . "Cobalamin biosynthesis"
  | del "KW-0846" . mid . "Cobalamin"
  | del "KW-0170" . mid . "Cobalt"
  | del "KW-0171" . mid . "Cobalt transport"
  | del "KW-0172" . mid . "Cockayne syndrome"
  | del "KW-0173" . mid . "Coenzyme A biosynthesis"
  | del "KW-0174" . mid . "Coenzyme M biosynthesis"
  | del "KW-0175" . mid . "Coiled coil"
  | del "KW-0177" . mid . "Collagen degradation"
  | del "KW-0176" . mid . "Collagen"
  | del "KW-0178" . mid . "Competence"
  | del "KW-0179" . mid . "Complement alternate pathway"
  | del "KW-0180" . mid . "Complement pathway"
  | del "KW-0181" . mid . "Complete proteome"
  | del "KW-0182" . mid . "Cone-rod dystrophy"
  | del "KW-0954" . mid . "Congenital adrenal hyperplasia"
  | del "KW-0900" . mid . "Congenital disorder of glycosylation"
  | del "KW-0912" . mid . "Congenital muscular dystrophy"
  | del "KW-0183" . mid . "Conidiation"
  | del "KW-0184" . mid . "Conjugation"
  | del "KW-0186" . mid . "Copper"
  | del "KW-0187" . mid . "Copper transport"
  | del "KW-0188" . mid . "Copulatory plug"
  | del "KW-0189" . mid . "Core protein"
  | del "KW-0190" . mid . "Covalent protein-DNA linkage"
  | del "KW-0191" . mid . "Covalent protein-RNA linkage"
  | del "KW-0192" . mid . "Crown gall tumor"
  | del "KW-0885" . mid . "CTQ"
  | del "KW-0193" . mid . "Cuticle"
  | del "KW-0194" . mid . "Cyanelle"
  | del "KW-0195" . mid . "Cyclin"
  | del "KW-0196" . mid . "Cycloheximide resistance"
  | del "KW-0197" . mid . "Cyclosporin"
  | del "KW-0198" . mid . "Cysteine biosynthesis"
  | del "KW-0199" . mid . "Cystinuria"
  | del "KW-0200" . mid . "Cytadherence"
  | del "KW-0201" . mid . "Cytochrome c-type biogenesis"
  | del "KW-0202" . mid . "Cytokine"
  | del "KW-0203" . mid . "Cytokinin biosynthesis"
  | del "KW-0932" . mid . "Cytokinin signaling pathway"
  | del "KW-0204" . mid . "Cytolysis"
  | del "KW-0205" . mid . "Cytosine metabolism"
  | del "KW-0206" . mid . "Cytoskeleton"
  | del "KW-0208" . mid . "D-amino acid"
  | del "KW-0209" . mid . "Deafness"
  | del "KW-0210" . mid . "Decarboxylase"
  | del "KW-0211" . mid . "Defensin"
  | del "KW-0213" . mid . "Dejerine-Sottas syndrome"
  | del "KW-0214" . mid . "Dental caries"
  | del "KW-0215" . mid . "Deoxyribonucleotide synthesis"
  | del "KW-0911" . mid . "Desmin-related myopathy"
  | del "KW-0216" . mid . "Detoxification"
  | del "KW-0217" . mid . "Developmental protein"
  | del "KW-0218" . mid . "Diabetes insipidus"
  | del "KW-0219" . mid . "Diabetes mellitus"
  | del "KW-0220" . mid . "Diaminopimelate biosynthesis"
  | del "KW-0221" . mid . "Differentiation"
  | del "KW-0222" . mid . "Digestion"
  | del "KW-0223" . mid . "Dioxygenase"
  | del "KW-0224" . mid . "Dipeptidase"
  | del "KW-0903" . mid . "Direct protein sequencing"
  | del "KW-0225" . mid . "Disease mutation"
  | del "KW-0238" . mid . "DNA-binding"
  | del "KW-0226" . mid . "DNA condensation"
  | del "KW-0227" . mid . "DNA damage"
  | del "KW-0239" . mid . "DNA-directed DNA polymerase"
  | del "KW-0240" . mid . "DNA-directed RNA polymerase"
  | del "KW-0228" . mid . "DNA excision"
  | del "KW-0229" . mid . "DNA integration"
  | del "KW-0230" . mid . "DNA invertase"
  | del "KW-0231" . mid . "DNA packaging"
  | del "KW-0233" . mid . "DNA recombination"
  | del "KW-0234" . mid . "DNA repair"
  | del "KW-0236" . mid . "DNA replication inhibitor"
  | del "KW-0235" . mid . "DNA replication"
  | del "KW-0237" . mid . "DNA synthesis"
  | del "KW-0241" . mid . "Down syndrome"
  | del "KW-0242" . mid . "Dwarfism"
  | del "KW-0243" . mid . "Dynein"
  | del "KW-0244" . mid . "Early protein"
  | del "KW-0038" . mid . "Ectodermal dysplasia"
  | del "KW-0245" . mid . "EGF-like domain"
  | del "KW-0248" . mid . "Ehlers-Danlos syndrome"
  | del "KW-0249" . mid . "Electron transport"
  | del "KW-0250" . mid . "Elliptocytosis"
  | del "KW-0251" . mid . "Elongation factor"
  | del "KW-0254" . mid . "Endocytosis"
  | del "KW-0255" . mid . "Endonuclease"
  | del "KW-0256" . mid . "Endoplasmic reticulum"
  | del "KW-0257" . mid . "Endorphin"
  | del "KW-0259" . mid . "Enterobactin biosynthesis"
  | del "KW-0260" . mid . "Enterotoxin"
  | del "KW-0261" . mid . "Envelope protein"
  | del "KW-0263" . mid . "Epidermolysis bullosa"
  | del "KW-0887" . mid . "Epilepsy"
  | del "KW-0931" . mid . "ER-Golgi transport"
  | del "KW-0895" . mid . "ERV"
  | del "KW-0265" . mid . "Erythrocyte maturation"
  | del "KW-0266" . mid . "Ethylene biosynthesis"
  | del "KW-0936" . mid . "Ethylene signaling pathway"
  | del "KW-0267" . mid . "Excision nuclease"
  | del "KW-0268" . mid . "Exocytosis"
  | del "KW-0269" . mid . "Exonuclease"
  | del "KW-0270" . mid . "Exopolysaccharide synthesis"
  | del "KW-0271" . mid . "Exosome"
  | del "KW-0952" . mid . "Extinct organism protein"
  | del "KW-0272" . mid . "Extracellular matrix"
  | del "KW-0273" . mid . "Eye lens protein"
  | del "KW-0274" . mid . "FAD"
  | del "KW-0951" . mid . "Familial hemophagocytic lymphohistiocytosis"
  | del "KW-0923" . mid . "Fanconi anemia"
  | del "KW-0275" . mid . "Fatty acid biosynthesis"
  | del "KW-0276" . mid . "Fatty acid metabolism"
  | del "KW-0278" . mid . "Fertilization"
  | del "KW-0279" . mid . "Fiber protein"
  | del "KW-0280" . mid . "Fibrinolysis"
  | del "KW-0281" . mid . "Fimbria"
  | del "KW-0283" . mid . "Flagellar rotation"
  | del "KW-0282" . mid . "Flagellum"
  | del "KW-0284" . mid . "Flavonoid biosynthesis"
  | del "KW-0285" . mid . "Flavoprotein"
  | del "KW-0286" . mid . "Flight"
  | del "KW-0287" . mid . "Flowering"
  | del "KW-0288" . mid . "FMN"
  | del "KW-0290" . mid . "Folate-binding"
  | del "KW-0289" . mid . "Folate biosynthesis"
  | del "KW-0291" . mid . "Formylation"
  | del "KW-0293" . mid . "Fruiting body"
  | del "KW-0292" . mid . "Fruit ripening"
  | del "KW-0294" . mid . "Fucose metabolism"
  | del "KW-0295" . mid . "Fungicide"
  | del "KW-0296" . mid . "Fusion protein"
  | del "KW-0298" . mid . "Galactitol metabolism"
  | del "KW-0299" . mid . "Galactose metabolism"
  | del "KW-0301" . mid . "Gamma-carboxyglutamic acid"
  | del "KW-0303" . mid . "Gap junction"
  | del "KW-0302" . mid . "Gap protein"
  | del "KW-0305" . mid . "Gaseous exchange"
  | del "KW-0306" . mid . "Gastrulation"
  | del "KW-0304" . mid . "Gas vesicle"
  | del "KW-0307" . mid . "Gaucher disease"
  | del "KW-0308" . mid . "Genetically modified food"
  | del "KW-0309" . mid . "Germination"
  | del "KW-0939" . mid . "Gibberellin signaling pathway"
  | del "KW-0955" . mid . "Glaucoma"
  | del "KW-0311" . mid . "Gluconate utilization"
  | del "KW-0312" . mid . "Gluconeogenesis"
  | del "KW-0313" . mid . "Glucose metabolism"
  | del "KW-0314" . mid . "Glutamate biosynthesis"
  | del "KW-0315" . mid . "Glutamine amidotransferase"
  | del "KW-0316" . mid . "Glutaricaciduria"
  | del "KW-0317" . mid . "Glutathione biosynthesis"
  | del "KW-0318" . mid . "Glutathionylation"
  | del "KW-0319" . mid . "Glycerol metabolism"
  | del "KW-0320" . mid . "Glycogen biosynthesis"
  | del "KW-0321" . mid . "Glycogen metabolism"
  | del "KW-0322" . mid . "Glycogen storage disease"
  | del "KW-0323" . mid . "Glycolate pathway"
  | del "KW-0324" . mid . "Glycolysis"
  | del "KW-0325" . mid . "Glycoprotein"
  | del "KW-0326" . mid . "Glycosidase"
  | del "KW-0327" . mid . "Glycosome"
  | del "KW-0328" . mid . "Glycosyltransferase"
  | del "KW-0329" . mid . "Glyoxylate bypass"
  | del "KW-0330" . mid . "Glyoxysome"
  | del "KW-0331" . mid . "GM2-gangliosidosis"
  | del "KW-0332" . mid . "GMP biosynthesis"
  | del "KW-0333" . mid . "Golgi apparatus"
  | del "KW-0334" . mid . "Gonadal differentiation"
  | del "KW-0335" . mid . "Gout"
  | del "KW-0337" . mid . "GPI-anchor biosynthesis"
  | del "KW-0336" . mid . "GPI-anchor"
  | del "KW-0297" . mid . "G-protein coupled receptor"
  | del "KW-0338" . mid . "Growth arrest"
  | del "KW-0340" . mid . "Growth factor binding"
  | del "KW-0339" . mid . "Growth factor"
  | del "KW-0341" . mid . "Growth regulation"
  | del "KW-0343" . mid . "GTPase activation"
  | del "KW-0342" . mid . "GTP-binding"
  | del "KW-0344" . mid . "Guanine-nucleotide releasing factor"
  | del "KW-0345" . mid . "HDL"
  | del "KW-0347" . mid . "Helicase"
  | del "KW-0348" . mid . "Hemagglutinin"
  | del "KW-0350" . mid . "Heme biosynthesis"
  | del "KW-0349" . mid . "Heme"
  | del "KW-0351" . mid . "Hemoglobin-binding"
  | del "KW-0353" . mid . "Hemolymph clotting"
  | del "KW-0354" . mid . "Hemolysis"
  | del "KW-0355" . mid . "Hemophilia"
  | del "KW-0356" . mid . "Hemostasis"
  | del "KW-0357" . mid . "Heparan sulfate"
  | del "KW-0358" . mid . "Heparin-binding"
  | del "KW-0359" . mid . "Herbicide resistance"
  | del "KW-0360" . mid . "Hereditary hemolytic anemia"
  | del "KW-0361" . mid . "Hereditary multiple exostoses"
  | del "KW-0362" . mid . "Hereditary nonpolyposis colorectal cancer"
  | del "KW-0890" . mid . "Hereditary spastic paraplegia"
  | del "KW-0363" . mid . "Hermansky-Pudlak syndrome"
  | del "KW-0364" . mid . "Heterocyst"
  | del "KW-0366" . mid . "Hexon-associated protein"
  | del "KW-0365" . mid . "Hexon protein"
  | del "KW-0909" . mid . "Hibernation"
  | del "KW-0367" . mid . "Hirschsprung disease"
  | del "KW-0368" . mid . "Histidine biosynthesis"
  | del "KW-0369" . mid . "Histidine metabolism"
  | del "KW-0370" . mid . "Holoprosencephaly"
  | del "KW-0371" . mid . "Homeobox"
  | del "KW-0372" . mid . "Hormone"
  | del "KW-0945" . mid . "Host-virus interaction"
  | del "KW-0373" . mid . "Hyaluronic acid"
  | del "KW-0374" . mid . "Hybridoma"
  | del "KW-0375" . mid . "Hydrogen ion transport"
  | del "KW-0377" . mid . "Hydrogenosome"
  | del "KW-0376" . mid . "Hydrogen peroxide"
  | del "KW-0378" . mid . "Hydrolase"
  | del "KW-0379" . mid . "Hydroxylation"
  | del "KW-0380" . mid . "Hyperlipidemia"
  | del "KW-0928" . mid . "Hypersensitive response elicitation"
  | del "KW-0381" . mid . "Hypersensitive response"
  | del "KW-0382" . mid . "Hypotensive agent"
  | del "KW-0384" . mid . "Hypothetical protein"
  | del "KW-0386" . mid . "Hypusine biosynthesis"
  | del "KW-0385" . mid . "Hypusine"
  | del "KW-0387" . mid . "Ice nucleation"
  | del "KW-0388" . mid . "IgA-binding protein"
  | del "KW-0389" . mid . "IgE-binding protein"
  | del "KW-0390" . mid . "IgG-binding protein"
  | del "KW-0391" . mid . "Immune response"
  | del "KW-0392" . mid . "Immunoglobulin C region"
  | del "KW-0393" . mid . "Immunoglobulin domain"
  | del "KW-0394" . mid . "Immunoglobulin V region"
  | del "KW-0395" . mid . "Inflammatory response"
  | del "KW-0396" . mid . "Initiation factor"
  | del "KW-0399" . mid . "Innate immunity"
  | del "KW-0397" . mid . "Inner membrane"
  | del "KW-0398" . mid . "Inositol biosynthesis"
  | del "KW-0401" . mid . "Integrin"
  | del "KW-0922" . mid . "Interferon antiviral system evasion"
  | del "KW-0402" . mid . "Interferon induction"
  | del "KW-0403" . mid . "Intermediate filament"
  | del "KW-0404" . mid . "Intron homing"
  | del "KW-0405" . mid . "Iodination"
  | del "KW-0872" . mid . "Ionic channel inhibitor"
  | del "KW-0407" . mid . "Ionic channel"
  | del "KW-0406" . mid . "Ion transport"
  | del "KW-0408" . mid . "Iron"
  | del "KW-0409" . mid . "Iron storage"
  | del "KW-0411" . mid . "Iron-sulfur"
  | del "KW-0410" . mid . "Iron transport"
  | del "KW-0412" . mid . "Isoleucine biosynthesis"
  | del "KW-0413" . mid . "Isomerase"
  | del "KW-0414" . mid . "Isoprene biosynthesis"
  | del "KW-0956" . mid . "Kallmann syndrome"
  | del "KW-0415" . mid . "Karyogamy"
  | del "KW-0880" . mid . "Kelch repeat"
  | del "KW-0417" . mid . "Keratinization"
  | del "KW-0416" . mid . "Keratin"
  | del "KW-0418" . mid . "Kinase"
  | del "KW-0419" . mid . "Kinetoplast"
  | del "KW-0420" . mid . "Kringle"
  | del "KW-0953" . mid . "Lacrimo-auriculo-dento-digital syndrome"
  | del "KW-0421" . mid . "Lactation"
  | del "KW-0422" . mid . "Lactose biosynthesis"
  | del "KW-0423" . mid . "Lactose metabolism"
  | del "KW-0424" . mid . "Laminin EGF-like domain"
  | del "KW-0425" . mid . "Lantibiotic"
  | del "KW-0426" . mid . "Late protein"
  | del "KW-0427" . mid . "LDL"
  | del "KW-0428" . mid . "Leader peptide"
  | del "KW-0901" . mid . "Leber congenital amaurosis"
  | del "KW-0429" . mid . "Leber hereditary optic neuropathy"
  | del "KW-0430" . mid . "Lectin"
  | del "KW-0431" . mid . "Leigh syndrome"
  | del "KW-0432" . mid . "Leucine biosynthesis"
  | del "KW-0433" . mid . "Leucine-rich repeat"
  | del "KW-0434" . mid . "Leukotriene biosynthesis"
  | del "KW-0435" . mid . "Li-Fraumeni syndrome"
  | del "KW-0436" . mid . "Ligase"
  | del "KW-0437" . mid . "Light-harvesting polypeptide"
  | del "KW-0438" . mid . "Lignin biosynthesis"
  | del "KW-0439" . mid . "Lignin degradation"
  | del "KW-0947" . mid . "Limb-girdle muscular dystrophy"
  | del "KW-0440" . mid . "LIM domain"
  | del "KW-0441" . mid . "Lipid A biosynthesis"
  | del "KW-0446" . mid . "Lipid-binding"
  | del "KW-0442" . mid . "Lipid degradation"
  | del "KW-0443" . mid . "Lipid metabolism"
  | del "KW-0444" . mid . "Lipid synthesis"
  | del "KW-0445" . mid . "Lipid transport"
  | del "KW-0448" . mid . "Lipopolysaccharide biosynthesis"
  | del "KW-0449" . mid . "Lipoprotein"
  | del "KW-0450" . mid . "Lipoyl"
  | del "KW-0451" . mid . "Lissencephaly"
  | del "KW-0452" . mid . "Lithium"
  | del "KW-0454" . mid . "Long QT syndrome"
  | del "KW-0886" . mid . "LTQ"
  | del "KW-0455" . mid . "Luminescence"
  | del "KW-0456" . mid . "Lyase"
  | del "KW-0457" . mid . "Lysine biosynthesis"
  | del "KW-0458" . mid . "Lysosome"
  | del "KW-0460" . mid . "Magnesium"
  | del "KW-0461" . mid . "Malaria"
  | del "KW-0462" . mid . "Maltose metabolism"
  | del "KW-0463" . mid . "Mandelate pathway"
  | del "KW-0464" . mid . "Manganese"
  | del "KW-0465" . mid . "Mannose-binding"
  | del "KW-0466" . mid . "Maple syrup urine disease"
  | del "KW-0467" . mid . "Mast cell degranulation"
  | del "KW-0469" . mid . "Meiosis"
  | del "KW-0470" . mid . "Melanin biosynthesis"
  | del "KW-0867" . mid . "MELAS syndrome"
  | del "KW-0471" . mid . "Melatonin biosynthesis"
  | del "KW-0473" . mid . "Membrane attack complex"
  | del "KW-0472" . mid . "Membrane"
  | del "KW-0474" . mid . "Menaquinone biosynthesis"
  | del "KW-0475" . mid . "Mercuric resistance"
  | del "KW-0476" . mid . "Mercury"
  | del "KW-0477" . mid . "Merozoite"
  | del "KW-0478" . mid . "Metachromatic leukodystrophy"
  | del "KW-0479" . mid . "Metal-binding"
  | del "KW-0481" . mid . "Metalloenzyme inhibitor"
  | del "KW-0483" . mid . "Metalloprotease inhibitor"
  | del "KW-0482" . mid . "Metalloprotease"
  | del "KW-0480" . mid . "Metal-thiolate cluster"
  | del "KW-0484" . mid . "Methanogenesis"
  | del "KW-0485" . mid . "Methanol utilization"
  | del "KW-0486" . mid . "Methionine biosynthesis"
  | del "KW-0487" . mid . "Methotrexate resistance"
  | del "KW-0488" . mid . "Methylation"
  | del "KW-0489" . mid . "Methyltransferase"
  | del "KW-0491" . mid . "MHC II"
  | del "KW-0490" . mid . "MHC I"
  | del "KW-0492" . mid . "Microsome"
  | del "KW-0493" . mid . "Microtubule"
  | del "KW-0494" . mid . "Milk protein"
  | del "KW-0495" . mid . "Mineral balance"
  | del "KW-0496" . mid . "Mitochondrion"
  | del "KW-0497" . mid . "Mitogen"
  | del "KW-0498" . mid . "Mitosis"
  | del "KW-0499" . mid . "Mobility protein"
  | del "KW-0501" . mid . "Molybdenum cofactor biosynthesis"
  | del "KW-0500" . mid . "Molybdenum"
  | del "KW-0502" . mid . "Monoclonal antibody"
  | del "KW-0503" . mid . "Monooxygenase"
  | del "KW-0504" . mid . "Morphogen"
  | del "KW-0505" . mid . "Motor protein"
  | del "KW-0506" . mid . "mRNA capping"
  | del "KW-0507" . mid . "mRNA processing"
  | del "KW-0508" . mid . "mRNA splicing"
  | del "KW-0509" . mid . "mRNA transport"
  | del "KW-0942" . mid . "Mucolipidosis"
  | del "KW-0510" . mid . "Mucopolysaccharidosis"
  | del "KW-0511" . mid . "Multifunctional enzyme"
  | del "KW-0514" . mid . "Muscle protein"
  | del "KW-0515" . mid . "Mutator protein"
  | del "KW-0517" . mid . "Myogenesis"
  | del "KW-0518" . mid . "Myosin"
  | del "KW-0959" . mid . "Myotoxin"
  | del "KW-0519" . mid . "Myristate"
  | del "KW-0520" . mid . "NAD"
  | del "KW-0521" . mid . "NADP"
  | del "KW-0166" . mid . "Nematocyst"
  | del "KW-0523" . mid . "Neurodegeneration"
  | del "KW-0524" . mid . "Neurogenesis"
  | del "KW-0525" . mid . "Neuronal ceroid lipofuscinosis"
  | del "KW-0527" . mid . "Neuropeptide"
  | del "KW-0528" . mid . "Neurotoxin"
  | del "KW-0530" . mid . "Neurotransmitter biosynthesis"
  | del "KW-0531" . mid . "Neurotransmitter degradation"
  | del "KW-0529" . mid . "Neurotransmitter"
  | del "KW-0532" . mid . "Neurotransmitter transport"
  | del "KW-0533" . mid . "Nickel"
  | del "KW-0921" . mid . "Nickel transport"
  | del "KW-0534" . mid . "Nitrate assimilation"
  | del "KW-0944" . mid . "Nitration"
  | del "KW-0535" . mid . "Nitrogen fixation"
  | del "KW-0536" . mid . "Nodulation"
  | del "KW-0866" . mid . "Nonsense-mediated mRNA decay"
  | del "KW-0914" . mid . "Notch signaling pathway"
  | del "KW-0906" . mid . "Nuclear pore complex"
  | del "KW-0539" . mid . "Nuclear protein"
  | del "KW-0540" . mid . "Nuclease"
  | del "KW-0542" . mid . "Nucleomorph"
  | del "KW-0544" . mid . "Nucleosome core"
  | del "KW-0547" . mid . "Nucleotide-binding"
  | del "KW-0545" . mid . "Nucleotide biosynthesis"
  | del "KW-0546" . mid . "Nucleotide metabolism"
  | del "KW-0548" . mid . "Nucleotidyltransferase"
  | del "KW-0549" . mid . "Nylon degradation"
  | del "KW-0550" . mid . "Obesity"
  | del "KW-0551" . mid . "Oil body"
  | del "KW-0552" . mid . "Olfaction"
  | del "KW-0553" . mid . "Oncogene"
  | del "KW-0554" . mid . "One-carbon metabolism"
  | del "KW-0896" . mid . "Oogenesis"
  | del "KW-0555" . mid . "Opioid peptide"
  | del "KW-0556" . mid . "Organic radical"
  | del "KW-0892" . mid . "Osteogenesis"
  | del "KW-0557" . mid . "Outer membrane"
  | del "KW-0558" . mid . "Oxidation"
  | del "KW-0560" . mid . "Oxidoreductase"
  | del "KW-0561" . mid . "Oxygen transport"
  | del "KW-0925" . mid . "Oxylipin biosynthesis"
  | del "KW-0563" . mid . "Paired box"
  | del "KW-0562" . mid . "Pair-rule protein"
  | del "KW-0564" . mid . "Palmitate"
  | del "KW-0566" . mid . "Pantothenate biosynthesis"
  | del "KW-0907" . mid . "Parkinson disease"
  | del "KW-0908" . mid . "Parkinsonism"
  | del "KW-0568" . mid . "Pathogenesis-related protein"
  | del "KW-0570" . mid . "Pentose shunt"
  | del "KW-0571" . mid . "Peptide transport"
  | del "KW-0572" . mid . "Peptidoglycan-anchor"
  | del "KW-0573" . mid . "Peptidoglycan synthesis"
  | del "KW-0574" . mid . "Periplasmic"
  | del "KW-0575" . mid . "Peroxidase"
  | del "KW-0958" . mid . "Peroxisome biogenesis disorder"
  | del "KW-0576" . mid . "Peroxisome"
  | del "KW-0577" . mid . "PHA biosynthesis"
  | del "KW-0578" . mid . "Phage lysis protein"
  | del "KW-0579" . mid . "Phage maturation"
  | del "KW-0580" . mid . "Phage recognition"
  | del "KW-0581" . mid . "Phagocytosis"
  | del "KW-0582" . mid . "Pharmaceutical"
  | del "KW-0583" . mid . "PHB biosynthesis"
  | del "KW-0584" . mid . "Phenylalanine biosynthesis"
  | del "KW-0585" . mid . "Phenylalanine catabolism"
  | del "KW-0586" . mid . "Phenylketonuria"
  | del "KW-0587" . mid . "Phenylpropanoid metabolism"
  | del "KW-0590" . mid . "Pheromone-binding"
  | del "KW-0588" . mid . "Pheromone"
  | del "KW-0589" . mid . "Pheromone response"
  | del "KW-0591" . mid . "Phorbol-ester binding"
  | del "KW-0592" . mid . "Phosphate transport"
  | del "KW-0593" . mid . "Phospholipase A2 inhibitor"
  | del "KW-0594" . mid . "Phospholipid biosynthesis"
  | del "KW-0595" . mid . "Phospholipid degradation"
  | del "KW-0918" . mid . "Phosphonate transport"
  | del "KW-0596" . mid . "Phosphopantetheine"
  | del "KW-0597" . mid . "Phosphorylation"
  | del "KW-0598" . mid . "Phosphotransferase system"
  | del "KW-0599" . mid . "Photoprotein"
  | del "KW-0600" . mid . "Photoreceptor protein"
  | del "KW-0601" . mid . "Photorespiration"
  | del "KW-0602" . mid . "Photosynthesis"
  | del "KW-0604" . mid . "Photosystem II"
  | del "KW-0603" . mid . "Photosystem I"
  | del "KW-0605" . mid . "Phycobilisome"
  | del "KW-0607" . mid . "Phytochrome signaling pathway"
  | del "KW-0608" . mid . "Pigment"
  | del "KW-0611" . mid . "Plant defense"
  | del "KW-0612" . mid . "Plant toxin"
  | del "KW-0615" . mid . "Plasmid copy control"
  | del "KW-0614" . mid . "Plasmid"
  | del "KW-0616" . mid . "Plasmid partition"
  | del "KW-0617" . mid . "Plasminogen activation"
  | del "KW-0934" . mid . "Plastid"
  | del "KW-0618" . mid . "Plastoquinone"
  | del "KW-0620" . mid . "Polyamine biosynthesis"
  | del "KW-0621" . mid . "Polymorphism"
  | del "KW-0622" . mid . "Polyneuropathy"
  | del "KW-0624" . mid . "Polysaccharide degradation"
  | del "KW-0625" . mid . "Polysaccharide transport"
  | del "KW-0626" . mid . "Porin"
  | del "KW-0627" . mid . "Porphyrin biosynthesis"
  | del "KW-0628" . mid . "Postsynaptic membrane"
  | del "KW-0629" . mid . "Postsynaptic neurotoxin"
  | del "KW-0632" . mid . "Potassium channel inhibitor"
  | del "KW-0631" . mid . "Potassium channel"
  | del "KW-0630" . mid . "Potassium"
  | del "KW-0633" . mid . "Potassium transport"
  | del "KW-0884" . mid . "PQQ biosynthesis"
  | del "KW-0634" . mid . "PQQ"
  | del "KW-0635" . mid . "Pregnancy"
  | del "KW-0636" . mid . "Prenylation"
  | del "KW-0637" . mid . "Prenyltransferase"
  | del "KW-0638" . mid . "Presynaptic neurotoxin"
  | del "KW-0905" . mid . "Primary microcephaly"
  | del "KW-0639" . mid . "Primosome"
  | del "KW-0640" . mid . "Prion"
  | del "KW-0935" . mid . "Progressive external ophthalmoplegia"
  | del "KW-0641" . mid . "Proline biosynthesis"
  | del "KW-0642" . mid . "Proline metabolism"
  | del "KW-0643" . mid . "Prostaglandin biosynthesis"
  | del "KW-0644" . mid . "Prostaglandin metabolism"
  | del "KW-0646" . mid . "Protease inhibitor"
  | del "KW-0645" . mid . "Protease"
  | del "KW-0647" . mid . "Proteasome"
  | del "KW-0648" . mid . "Protein biosynthesis"
  | del "KW-0649" . mid . "Protein kinase inhibitor"
  | del "KW-0650" . mid . "Protein phosphatase inhibitor"
  | del "KW-0904" . mid . "Protein phosphatase"
  | del "KW-0651" . mid . "Protein splicing"
  | del "KW-0652" . mid . "Protein synthesis inhibitor"
  | del "KW-0653" . mid . "Protein transport"
  | del "KW-0654" . mid . "Proteoglycan"
  | del "KW-0655" . mid . "Prothrombin activator"
  | del "KW-0656" . mid . "Proto-oncogene"
  | del "KW-0657" . mid . "Pseudohermaphroditism"
  | del "KW-0658" . mid . "Purine biosynthesis"
  | del "KW-0659" . mid . "Purine metabolism"
  | del "KW-0660" . mid . "Purine salvage"
  | del "KW-0661" . mid . "Putrescine biosynthesis"
  | del "KW-0662" . mid . "Pyridine nucleotide biosynthesis"
  | del "KW-0663" . mid . "Pyridoxal phosphate"
  | del "KW-0664" . mid . "Pyridoxine biosynthesis"
  | del "KW-0665" . mid . "Pyrimidine biosynthesis"
  | del "KW-0666" . mid . "Pyrogen"
  | del "KW-0668" . mid . "Pyropoikilocytosis"
  | del "KW-0873" . mid . "Pyrrolidone carboxylic acid"
  | del "KW-0669" . mid . "Pyrrolysine"
  | del "KW-0670" . mid . "Pyruvate"
  | del "KW-0671" . mid . "Queuosine biosynthesis"
  | del "KW-0672" . mid . "Quinate metabolism"
  | del "KW-0874" . mid . "Quinone"
  | del "KW-0673" . mid . "Quorum sensing"
  | del "KW-0674" . mid . "Reaction center"
  | del "KW-0675" . mid . "Receptor"
  | del "KW-0676" . mid . "Redox-active center"
  | del "KW-0677" . mid . "Repeat"
  | del "KW-0678" . mid . "Repressor"
  | del "KW-0679" . mid . "Respiratory chain"
  | del "KW-0680" . mid . "Restriction system"
  | del "KW-0681" . mid . "Retinal protein"
  | del "KW-0682" . mid . "Retinitis pigmentosa"
  | del "KW-0683" . mid . "Retinol-binding"
  | del "KW-0684" . mid . "Rhamnose metabolism"
  | del "KW-0685" . mid . "Rhizomelic chondrodysplasia punctata"
  | del "KW-0686" . mid . "Riboflavin biosynthesis"
  | del "KW-0687" . mid . "Ribonucleoprotein"
  | del "KW-0688" . mid . "Ribosomal frameshift"
  | del "KW-0689" . mid . "Ribosomal protein"
  | del "KW-0690" . mid . "Ribosome biogenesis"
  | del "KW-0694" . mid . "RNA-binding"
  | del "KW-0695" . mid . "RNA-directed DNA polymerase"
  | del "KW-0696" . mid . "RNA-directed RNA polymerase"
  | del "KW-0691" . mid . "RNA editing"
  | del "KW-0943" . mid . "RNA-mediated gene silencing"
  | del "KW-0692" . mid . "RNA repair"
  | del "KW-0693" . mid . "RNA replication"
  | del "KW-0697" . mid . "Rotamase"
  | del "KW-0699" . mid . "rRNA-binding"
  | del "KW-0698" . mid . "rRNA processing"
  | del "KW-0949" . mid . "S-adenosyl-L-methionine"
  | del "KW-0703" . mid . "Sarcoplasmic reticulum"
  | del "KW-0704" . mid . "Schiff base"
  | del "KW-0705" . mid . "SCID"
  | del "KW-0708" . mid . "Seed storage protein"
  | del "KW-0709" . mid . "Segmentation polarity protein"
  | del "KW-0711" . mid . "Selenium"
  | del "KW-0712" . mid . "Selenocysteine"
  | del "KW-0713" . mid . "Self-incompatibility"
  | del "KW-0716" . mid . "Sensory transduction"
  | del "KW-0717" . mid . "Septation"
  | del "KW-0718" . mid . "Serine biosynthesis"
  | del "KW-0719" . mid . "Serine esterase"
  | del "KW-0721" . mid . "Serine protease homolog"
  | del "KW-0722" . mid . "Serine protease inhibitor"
  | del "KW-0720" . mid . "Serine protease"
  | del "KW-0723" . mid . "Serine/threonine-protein kinase"
  | del "KW-0724" . mid . "Serotonin biosynthesis"
  | del "KW-0726" . mid . "Sexual differentiation"
  | del "KW-0727" . mid . "SH2 domain"
  | del "KW-0729" . mid . "SH3-binding"
  | del "KW-0728" . mid . "SH3 domain"
  | del "KW-0940" . mid . "Short QT syndrome"
  | del "KW-0730" . mid . "Sialic acid"
  | del "KW-0731" . mid . "Sigma factor"
  | del "KW-0735" . mid . "Signal-anchor"
  | del "KW-0732" . mid . "Signal"
  | del "KW-0736" . mid . "Signalosome"
  | del "KW-0733" . mid . "Signal recognition particle"
  | del "KW-0734" . mid . "Signal transduction inhibitor"
  | del "KW-0737" . mid . "Silk protein"
  | del "KW-0701" . mid . "S-layer"
  | del "KW-0702" . mid . "S-nitrosylation"
  | del "KW-0738" . mid . "Sodium channel inhibitor"
  | del "KW-0894" . mid . "Sodium channel"
  | del "KW-0915" . mid . "Sodium"
  | del "KW-0740" . mid . "Sodium/potassium transport"
  | del "KW-0739" . mid . "Sodium transport"
  | del "KW-0741" . mid . "SOS mutagenesis"
  | del "KW-0742" . mid . "SOS response"
  | del "KW-0744" . mid . "Spermatogenesis"
  | del "KW-0745" . mid . "Spermidine biosynthesis"
  | del "KW-0746" . mid . "Sphingolipid metabolism"
  | del "KW-0950" . mid . "Spinocerebellar ataxia"
  | del "KW-0747" . mid . "Spliceosome"
  | del "KW-0748" . mid . "Sporozoite"
  | del "KW-0749" . mid . "Sporulation"
  | del "KW-0750" . mid . "Starch biosynthesis"
  | del "KW-0751" . mid . "Stargardt disease"
  | del "KW-0754" . mid . "Steroid-binding"
  | del "KW-0752" . mid . "Steroid biosynthesis"
  | del "KW-0753" . mid . "Steroid metabolism"
  | del "KW-0755" . mid . "Steroidogenesis"
  | del "KW-0756" . mid . "Sterol biosynthesis"
  | del "KW-0757" . mid . "Stickler syndrome"
  | del "KW-0758" . mid . "Storage protein"
  | del "KW-0759" . mid . "Streptomycin biosynthesis"
  | del "KW-0346" . mid . "Stress response"
  | del "KW-0760" . mid . "Structural protein"
  | del "KW-0762" . mid . "Sugar transport"
  | del "KW-0763" . mid . "Sulfate respiration"
  | del "KW-0764" . mid . "Sulfate transport"
  | del "KW-0765" . mid . "Sulfation"
  | del "KW-0766" . mid . "Superantigen"
  | del "KW-0941" . mid . "Suppressor of RNA silencing"
  | del "KW-0767" . mid . "Surface film"
  | del "KW-0768" . mid . "Sushi"
  | del "KW-0769" . mid . "Symport"
  | del "KW-0770" . mid . "Synapse"
  | del "KW-0771" . mid . "Synaptosome"
  | del "KW-0772" . mid . "Systemic lupus erythematosus"
  | del "KW-0919" . mid . "Taste"
  | del "KW-0776" . mid . "Taste-modifying protein"
  | del "KW-0876" . mid . "Taxol biosynthesis"
  | del "KW-0920" . mid . "Tegument protein"
  | del "KW-0777" . mid . "Teichoic acid biosynthesis"
  | del "KW-0778" . mid . "Tellurium resistance"
  | del "KW-0779" . mid . "Telomere"
  | del "KW-0780" . mid . "Terminal addition"
  | del "KW-0783" . mid . "Tetrahydrobiopterin biosynthesis"
  | del "KW-0784" . mid . "Thiamine biosynthesis"
  | del "KW-0785" . mid . "Thiamine catabolism"
  | del "KW-0786" . mid . "Thiamine pyrophosphate"
  | del "KW-0787" . mid . "Thick filament"
  | del "KW-0882" . mid . "Thioester bond"
  | del "KW-0883" . mid . "Thioether bond"
  | del "KW-0789" . mid . "Thiol protease inhibitor"
  | del "KW-0788" . mid . "Thiol protease"
  | del "KW-0791" . mid . "Threonine biosynthesis"
  | del "KW-0888" . mid . "Threonine protease"
  | del "KW-0792" . mid . "Thrombophilia"
  | del "KW-0793" . mid . "Thylakoid"
  | del "KW-0795" . mid . "Thyroid hormone"
  | del "KW-0893" . mid . "Thyroid hormones biosynthesis"
  | del "KW-0796" . mid . "Tight junction"
  | del "KW-0797" . mid . "Tissue remodeling"
  | del "KW-0798" . mid . "TonB box"
  | del "KW-0799" . mid . "Topoisomerase"
  | del "KW-0800" . mid . "Toxin"
  | del "KW-0801" . mid . "TPQ"
  | del "KW-0802" . mid . "TPR repeat"
  | del "KW-0889" . mid . "Transcription antitermination"
  | del "KW-0804" . mid . "Transcription"
  | del "KW-0805" . mid . "Transcription regulation"
  | del "KW-0806" . mid . "Transcription termination"
  | del "KW-0807" . mid . "Transducer"
  | del "KW-0808" . mid . "Transferase"
  | del "KW-0809" . mid . "Transit peptide"
  | del "KW-0810" . mid . "Translation regulation"
  | del "KW-0811" . mid . "Translocation"
  | del "KW-0812" . mid . "Transmembrane"
  | del "KW-0813" . mid . "Transport"
  | del "KW-0814" . mid . "Transposable element"
  | del "KW-0815" . mid . "Transposition"
  | del "KW-0816" . mid . "Tricarboxylic acid cycle"
  | del "KW-0817" . mid . "Trimethoprim resistance"
  | del "KW-0818" . mid . "Triplet repeat expansion"
  | del "KW-0820" . mid . "tRNA-binding"
  | del "KW-0819" . mid . "tRNA processing"
  | del "KW-0821" . mid . "Trypanosomiasis"
  | del "KW-0822" . mid . "Tryptophan biosynthesis"
  | del "KW-0823" . mid . "Tryptophan catabolism"
  | del "KW-0824" . mid . "TTQ"
  | del "KW-0825" . mid . "Tumor antigen"
  | del "KW-0826" . mid . "Tungsten"
  | del "KW-0902" . mid . "Two-component regulatory system"
  | del "KW-0827" . mid . "Tyrosine biosynthesis"
  | del "KW-0828" . mid . "Tyrosine catabolism"
  | del "KW-0829" . mid . "Tyrosine-protein kinase"
  | del "KW-0831" . mid . "Ubiquinone biosynthesis"
  | del "KW-0830" . mid . "Ubiquinone"
  | del "KW-0832" . mid . "Ubl conjugation"
  | del "KW-0833" . mid . "Ubl conjugation pathway"
  | del "KW-0834" . mid . "Unfolded protein response"
  | del "KW-0835" . mid . "Urea cycle"
  | del "KW-0836" . mid . "Usher syndrome"
  | del "KW-0926" . mid . "Vacuole"
  | del "KW-0837" . mid . "Vanadium"
  | del "KW-0838" . mid . "Vasoactive"
  | del "KW-0839" . mid . "Vasoconstrictor"
  | del "KW-0840" . mid . "Vasodilator"
  | del "KW-0899" . mid . "Viral immunoevasion"
  | del "KW-0468" . mid . "Viral matrix protein"
  | del "KW-0916" . mid . "Viral movement protein"
  | del "KW-0543" . mid . "Viral nucleoprotein"
  | del "KW-0842" . mid . "Viral occlusion body"
  | del "KW-0946" . mid . "Virion protein"
  | del "KW-0843" . mid . "Virulence"
  | del "KW-0844" . mid . "Vision"
  | del "KW-0845" . mid . "Vitamin A"
  | del "KW-0847" . mid . "Vitamin C"
  | del "KW-0848" . mid . "Vitamin D"
  | del "KW-0850" . mid . "VLDL"
  | del "KW-0851" . mid . "Voltage-gated channel"
  | del "KW-0852" . mid . "von Willebrand disease"
  | del "KW-0897" . mid . "Waardenburg syndrome"
  | del "KW-0853" . mid . "WD repeat"
  | del "KW-0855" . mid . "Whooping cough"
  | del "KW-0856" . mid . "Williams-Beuren syndrome"
  | del "KW-0879" . mid . "Wnt signaling pathway"
  | del "KW-0857" . mid . "Xeroderma pigmentosum"
  | del "KW-0858" . mid . "Xylan degradation"
  | del "KW-0859" . mid . "Xylose metabolism"
  | del "KW-0861" . mid . "Zellweger syndrome"
  | del "KW-0863" . mid . "Zinc-finger"
  | del "KW-0862" . mid . "Zinc"
  | del "KW-0864" . mid . "Zinc transport"
  | del "KW-0865" . mid . "Zymogen" )

let kw_xml : lens = 
  let kw : lens = 
    xml_open nl1 "keyword" . 
    del SP . 
    del "id=\"" . kw_trans . 
    xml_close_tag "keyword" in
  tag "KW" . kw . (ssp . kw)* . ins "." 

test kw_xml create 
  "KW   Complete proteome; Differentiation; Viral movement protein; Zymogen; 2Fe-2S." 
= 
  "
  |  <keyword id=\"KW-0181\">Complete proteome</keyword>
  |  <keyword id=\"KW-0221\">Differentiation</keyword>
  |  <keyword id=\"KW-0916\">Viral movement protein</keyword>
  |  <keyword id=\"KW-0865\">Zymogen</keyword>
  |  <keyword id=\"KW-0001\">2Fe-2S</keyword>"

test kw_xml get 
  "  <keyword id=\"KW-0181\">Complete proteome</keyword>
  |  <keyword id=\"KW-0221\">Differentiation</keyword>
  |  <keyword id=\"KW-0916\">Viral movement protein</keyword>
  |  <keyword id=\"KW-0865\">Zymogen</keyword>
  |  <keyword id=\"KW-0001\">2Fe-2S</keyword>"
= 
  "KW  Complete proteome; Differentiation; Viral movement protein; Zymogen; 2Fe-2S." 
  
(* --------------------------------------------------------------------------- *)
(* FT line *)

let ft_bound (name:string) : lens = 
  let num (sym:string) : lens = 
    ( ins "    " . ins sym . DIGIT
    | ins "   "  . ins sym . DIGIT{2}
    | ins "  "   . ins sym . DIGIT{3}
    | ins " "    . ins sym . DIGIT{4}
    | ins ""     . ins sym . DIGIT{5} ) in 
  ( xml_attr2_elt_no_body nl3 name 
      "status" (del "less than") 
      "position" (num "<")
  | xml_attr2_elt_no_body nl3 name 
      "status" (del "greater than") 
      "position" (num ">")
  | xml_attr2_elt_no_body nl3 name 
      "status" (del "uncertain") 
      "position" (num "?")
  | xml_attr1_elt_no_body nl3 name 
       "position" (num " ") )

let ft_bounds : lens = 
  xml_elt nl2 "location"
    (ft_bound "begin" . 
     ins " " . 
     ft_bound "end") . 
  ins "       "

let ft_id : lens = 
  ins "/FTId=" . 
  xml_attr "id" [A-Za-z0-9 _]+ . 
  ins "."  

let ft_description : lens = 
  xml_attr "description" ("(" . [a-zA-Z0-9. _]+ . ")") . 
  ins "." 

let ft_original_variation : lens = 
  ( xml_simple_elt nl2 "original" ALPHA . 
    ins " -> " . 
    xml_simple_elt nl2 "variation" ALPHA 
  | ins "Missing" )

let ft_normal : lens = 
  xml_attr "type"
     ( "active site"                         <-> "ACT_SITE" 
     | "binding site"                        <-> "BINDING " 
     | "calcium-binding region"              <-> "CA_BIND " 
     | "chain"                               <-> "CHAIN   " 
     | "coiled-coil region"                  <-> "COILED  " 
     | "compositionally biased region"       <-> "COMPBIAS" 
     | "cross-link"                          <-> "CROSSLNK" 
     | "disulfide bond"                      <-> "DISULFID" 
     | "DNA-binding region"                  <-> "DNA_BIND" 
     | "domain"                              <-> "DOMAIN  " 
     | "glycosylation site"                  <-> "CARBOHYD" 
     | "helix"                               <-> "HELIX   " 
     | "initiator methionine"                <-> "INIT_MET" 
     | "lipid moiety-binding region"         <-> "LIPID   " 
     | "metal ion-binding site"              <-> "METAL   " 
     | "modified residue"                    <-> "MOD_RES " 
     | "non-consecutive residues"            <-> "NON_CONS" 
     | "non-terminal residue"                <-> "NON_TER " 
     | "nucleotide phosphate-binding region" <-> "NP_BIND " 
     | "peptide"                             <-> "PEPTIDE " 
     | "propeptide"                          <-> "PROPEP  " 
     | "region of interest"                  <-> "REGION  " 
     | "repeat"                              <-> "REPEAT  " 
     | "selenocysteine"                      <-> "SE_CYS  " 
     | "short sequence motif"                <-> "MOTIF   " 
     | "signal peptide"                      <-> "SIGNAL  " 
     | "site"                                <-> "SITE    " 
     | "strand"                              <-> "STRAND  " 
     | "topological domain"                  <-> "TOPO_DOM" 
     | "transit peptide"                     <-> "TRANSIT " 
     | "transmembrane region"                <-> "TRANSMEM" 
     | "turn"                                <-> "TURN    " 
     | "unsure residue"                      <-> "UNSURE  " 
     | "zinc finger region"                  <-> "ZN_FING ") . 
    ins " " . 
    ( ( ((ins " " . ft_id)? ~ ft_description)? . xml_close ) ~
        ft_bounds )

let ft_variation : lens = 
  xml_attr "type"
    ( "mutagenesis site"  <-> "MUTAGEN " 
    | "sequence conflict" <-> "CONFLICT" 
    | "sequence variant"  <-> "VARIANT " 
    | "splice variant"    <-> "VAR_SEQ ") . 
  ins " " . 
  ( ( ins " " . ((ins " " . ft_id)? ~ ft_description)? . xml_close ) ~ 
    ( ft_original_variation ~ ft_bounds) )

let ft_xml : lens = 
  tag "FT" . 
  xml_open nl1 "feature" . 
  (ft_normal | ft_variation) . 
  qdel WS nl1 . 
  xml_close_tag "feature"

test ft_xml get
  "
  |  <feature type=\"sequence conflict\" id=\"VSP1234\" description=\"(in Ref. 2)\">
  |    <original>S</original>
  |    <variation>E</variation>
  |    <location>
  |      <begin position=\"27\"/>
  |      <end position=\"27\"/>
  |    </location>
  |  </feature>"
= 
  "FT   CONFLICT     27     27       S -> E (in Ref. 2). /FTId=VSP1234."

test ft_xml get
  "
  |  <feature type=\"splice variant\" id=\"VSP_008971\" description=\"(in isoform 2)\">
  |    <location>
  |      <begin position=\"243\"/>
  |      <end position=\"244\"/>
  |    </location>
  |  </feature>" 
=
  "FT   VAR_SEQ     243    244       Missing (in isoform 2). /FTId=VSP_008971."

(* --------------------------------------------------------------------------- *)
(* SQ line *)
let sq_xml : lens = 
  let block : lens = ins " " . [A-Z]{10} in 
  let full_line : lens = ins "    " . block{6} . ins "\n" in 
  let part_line : lens = ins "    " . block{0,5} . 
                         (ins " " . [A-Z]{1,10}) . 
                         ins "\n" in 
  tag "SQ" . 
  ins "SEQUENCE   " . 
  xml_open nl1 "sequence" . 
  ( (xml_attr "mass"   (NUMBER . ins " MW;  ")) ~
    (xml_attr "length" (NUMBER . ins " AA;  ")) ) . 
  xml_attr "checksum"  ([0-9A-Z]+ . ins " CRC64;\n") . 
  xml_close . 
  full_line* . part_line . 
  ins "//" . 
  xml_close_tag "sequence" 
                       
test sq_xml create 
  "SQ   SEQUENCE   893 AA;  101921 MW;  2F67CEB3B02E7AC1 CRC64;
  |     MKFLVLLFNI LCLFPILGAD ELVMSPIPTT DVQPKVTFDI NSEVSSGPLY LNPVEMAGVK
  |     YLQLQRQPGV QVHKVVEGDI VIWENEEMPL YTCAIVTQNE VPYMAYVELL EDPDLIFFLK
  |     EGDQWAPIPE DQYLARLQQL RQQIHTESFF SLNLSFQHEN YKYEMVSSFQ HSIKMVVFTP
  |     KNGHICKMVY DKNIRIFKAL YNEYVTSVIG FFRGLKLLLL NIFVIDDRGM IGNKYFQLLD
  |     DKYAPISVQG YVATIPKLKD FAEPYHPIIL DISDIDYVNF YLGDATYHDP GFKIVPKTPQ
  |     CITKVVDGNE VIYESSNPSV ECVYKVTYYD KKNESMLRLD LNHSPPSYTS YYAKREGVWV
  |     TSTYIDLEEK IEELQDHRST ELDVMFMSDK DLNVVPLTNG NLEYFMVTPK PHRDIIIVFD
  |     GSEVLWYYEG LENHLVCTWI YVTEGAPRLV HLRVKDRIPQ NTDIYMVKFG EYWVRISKTQ
  |     YTQEIKKLIK KSKKKLPSIE EEDSDKHGGP PKGPEPPTGP GHSSSESKEH EDSKESKEPK
  |     EHGSPKETKE GEVTKKPGPA KEHKPSKIPV YTKRPEFPKK SKSPKRPESP KSPKRPVSPQ
  |     RPVSPKSPKR PESLDIPKSP KRPESPKSPK RPVSPQRPVS PRRPESPKSP KSPKSPKSPK
  |     VPFDPKFKEK LYDSYLDKAA KTKETVTLPP VLPTDESFTH TPIGEPTAEQ PDDIEPIEES
  |     VFIKETGILT EEVKTEDIHS ETGEPEEPKR PDSPTKHSPK PTGTHPSMPK KRRRSDGLAL
  |     STTDLESEAG RILRDPTGKI VTMKRSKSFD DLTTVREKEH MGAEIRKIVV DDDGTEADDE
  |     DTHPSKEKHL STVRRRRPRP KKSSKSSKPR KPDSAFVPSI IFIFLVSLIV GIL
  |//" 
= 
  "
  |  <sequence mass=\"101921\" length=\"893\" checksum=\"2F67CEB3B02E7AC1\">MKFLVLLFNILCLFPILGADELVMSPIPTTDVQPKVTFDINSEVSSGPLYLNPVEMAGVKYLQLQRQPGVQVHKVVEGDIVIWENEEMPLYTCAIVTQNEVPYMAYVELLEDPDLIFFLKEGDQWAPIPEDQYLARLQQLRQQIHTESFFSLNLSFQHENYKYEMVSSFQHSIKMVVFTPKNGHICKMVYDKNIRIFKALYNEYVTSVIGFFRGLKLLLLNIFVIDDRGMIGNKYFQLLDDKYAPISVQGYVATIPKLKDFAEPYHPIILDISDIDYVNFYLGDATYHDPGFKIVPKTPQCITKVVDGNEVIYESSNPSVECVYKVTYYDKKNESMLRLDLNHSPPSYTSYYAKREGVWVTSTYIDLEEKIEELQDHRSTELDVMFMSDKDLNVVPLTNGNLEYFMVTPKPHRDIIIVFDGSEVLWYYEGLENHLVCTWIYVTEGAPRLVHLRVKDRIPQNTDIYMVKFGEYWVRISKTQYTQEIKKLIKKSKKKLPSIEEEDSDKHGGPPKGPEPPTGPGHSSSESKEHEDSKESKEPKEHGSPKETKEGEVTKKPGPAKEHKPSKIPVYTKRPEFPKKSKSPKRPESPKSPKRPVSPQRPVSPKSPKRPESLDIPKSPKRPESPKSPKRPVSPQRPVSPRRPESPKSPKSPKSPKSPKVPFDPKFKEKLYDSYLDKAAKTKETVTLPPVLPTDESFTHTPIGEPTAEQPDDIEPIEESVFIKETGILTEEVKTEDIHSETGEPEEPKRPDSPTKHSPKPTGTHPSMPKKRRRSDGLALSTTDLESEAGRILRDPTGKIVTMKRSKSFDDLTTVREKEHMGAEIRKIVVDDDGTEADDEDTHPSKEKHLSTVRRRRPRPKKSSKSSKPRKPDSAFVPSIIFIFLVSLIVGIL</sequence>"

(* --------------------------------------------------------------------------- *)
(* UniProtKB entry *)

let uniprot_xml : lens = 
  xml_elt nl0 "entry"
    begin
      (terminate id_line) . 
      (terminate ac_line)? . 
      (terminate de_line) . 
      (terminate gn_line) . 
      os_og_oc_ox_oh_block . 
      reference_block . 
      cc_block . 
      ins  "CC   -----------------------------------------------------------------------
           |CC   Copyrighted by the UniProt Consortium, see http://www.uniprot.org/terms
           |CC   Distributed under the Creative Commons Attribution-NoDerivs License
           |CC   -----------------------------------------------------------------------" . 
     (terminate dr_line)* . 
     (terminate pe_line)? . 
     (terminate kw_line)? . 
     (terminate ft_ilne)* . 
     (terminate sq_line) 
    end
*)

(*******************************************************************************)
(* The Harmony Project                                                         *)
(* harmony@lists.seas.upenn.edu                                                *)
(*******************************************************************************)
(* Copyright (C) 2007 J. Nathan Foster and Benjamin C. Pierce                  *)
(*                                                                             *)
(* This library is free software; you can redistribute it and/or               *)
(* modify it under the terms of the GNU Lesser General Public                  *)
(* License as published by the Free Software Foundation; either                *)
(* version 2.1 of the License, or (at your option) any later version.          *)
(*                                                                             *)
(* This library is distributed in the hope that it will be useful,             *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of              *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU           *)
(* Lesser General Public License for more details.                             *)
(*******************************************************************************)
(* /boomerang/examples/units.boom                                              *)
(* Boomerang unit tests                                                        *)
(* $Id$ *)
(*******************************************************************************)

module Units = 

let l1 = Prelude.copy [d]

let l1 = copy [a]
let l2 = copy [ab]
let cn = canonizer_of_lens (const [ab] "a" "a")
let l = (right_quot l1 cn); l2
test l get (l create "b") = ?
  
let l = l2; (left_quot cn l1) 
 
test l get "b" = ?
test l put "a" into "b" = ?

let R = /abc\// 
test del R get "abc/" = ""

type super = Left of unit | Right of string

let myf x y = match x with
  | Prelude.Left _ -> True
  | Prelude.Right _ -> False
test myf : ?

(* 
let safe_hd : 'a list -> 'a -> 'a = 
  (fun (l:'a list) -> 
     (fun d -> match l with 
        | Nil -> d
        | Cons(h,_) -> h))
*)
type t = A of string | B of regexp

let twice l = l | l

let f1 (x:t) : lens = match x with 
  | B _ -> copy (str "")
  | B r -> copy r
  | A s -> copy (str s)

let g =
  let f x = x in
  (f (), f "hello")

let g =
  let f l = l . l in
  f (copy [A-Z])

let f l = l | l 

test rep (columnize "80" ([a-z0-9 ]* ) " " "\n")
"abcdefg hijklmnop qrs tuv wxyz 123456789 nate alexandre benjamin aaron alan owen william kate michael" =
<<<
 abcdefg hijklmnop qrs tuv wxyz 123456789 nate alexandre benjamin aaron alan owen
 william kate michael
>>>

let any = [^]*

let x : { ? <-> ? } = copy any
test x : { any <-> any* }

let bracket (s:string) = "(" . s . ")" 
test count [A-Z] get "ABCDEFG" = "7"
test count [A-Z] put "4" into "ABCDEFG" = "ABCD"
test count [A-Z] create "0" = ""
test count [A-Z] create "5" = "AAAAA"

let upper : lens = 
  ( [a] <-> "A"  
  | [b] <-> "B"   
  | [c] <-> "C"   
  | [d] <-> "D"   
  | [e] <-> "E"   
  | [f] <-> "F"   
  | [g] <-> "G"   
  | [h] <-> "H"   
  | [i] <-> "I"   
  | [j] <-> "J"      
  | [k] <-> "K"   
  | [l] <-> "L"   
  | [m] <-> "M"   
  | [n] <-> "N"   
  | [o] <-> "O"   
  | [p] <-> "P"   
  | [q] <-> "Q"   
  | [r] <-> "R"   
  | [s] <-> "S"   
  | [t] <-> "T"   
  | [u] <-> "U"   
  | [v] <-> "V"   
  | [w] <-> "W"   
  | [x] <-> "X"   
  | [y] <-> "Y"   
  | [z] <-> "Z" 
  | copy [^a-zA-Z])

let cp_upper = ins "[" . duplicate (copy [^A-Z]) (copy (str ":")) upper . ins "]"  
test cp_upper* get "n:a:t:e:" = "[n:N][a:A][t:T][e:E]" 
test cp_upper* create "[n:N][a:A][t:T][e:E]" = "n:a:t:e:"

let length (r:regexp) : lens = 
  ins "(" . 
  duplicate (copy r* ) (copy (str "")) (ins "," . count r) . 
  ins ")" 

test length [A-Z] get "ABCD" = "(ABCD,4)"
test length [A-Z] put "(ABCD,6)" into "ABCDEF" = "ABCD"

type mytype = A | B of regexp | C of unit

type string_list = Nil | Cons of string * string_list
  
let l = Cons("nate", Cons ("foster", Nil))

let hd (l:string_list) (def:string) : string = 
  match l with 
    | Cons (h1,t1) -> h1
    | Nil -> def

let tl (l:string_list) (def:string_list) : string_list = 
  match l with 
    | Cons (h1,t1) -> t1
    | Nil -> def
    
test "ln1 is: [" . hd l "" . "]" = "ln1 is: [nate]"
test "ln2 is: [" . (hd (tl l Nil) "") . "]" = "ln2 is: [foster]"

let x = B (str "nate")

let y = match x with 
  | A -> (str "","") 
  | B z -> (z . str " " . str "foster", "levine 561") 
  | C () -> (str "unit","unit")

test y = (str "nate foster", "levine 561")

let z = match y with (x,y) -> x

test "<< " . shortest z . " >>" = "<< nate foster >>"

let a,b = ("nate","foster") 
test a = "nate"
test b = "foster"

(*let cl1 = lowercase [A-Za-z ] | del "{" . [A-Za-z ]+ . del "}" *)
(*let cl2 = smash_clens cl1
test cl2 get "{LOOJ} {W}eaving {LOOM} into {J}ava" = ? 
test cl2 put 
"LOOJ Weaving loom into Java" into 
"{L}{O}{O}{J} {W}eaving {LOOM} into {J}ava" = ? 
*)
test (copy (str "---- DONE ----")) get "---- DONE ----" = "---- DONE ----"

(*test lowercase [a-zA-Z ]+ get "LOOJ Weaving LOOM into Java" = ?
test lowercase [@-[ a-z]+ put 
  "looj weaving loom into java" 
into 
  "LOOJ Weaving LOOM into JAVA" = ?
*)
let foo = "foo"
let bar = del (str "bar")
let foobar = (copy (str foo)) . bar
let foobarbis = (copy (str foo)) | bar

let otherbar = "bar"
let otherfoobar = foo . otherbar

let chunk = (str "Last Name") <-> "LAST NAME" 

test (copy (str "First Name ") . (copy (str "Last Name"); <chunk>)) get "First Name Last Name" 
= "First Name LAST NAME"

let opt (l:lens) (C:regexp) (A:regexp) = (l | (copy (str "")))
test opt (str "A" <-> "BB") (str "A") (str "BB") get "A" = "BB"

let l = (copy (str "A")) ~ ((copy (str "B")) ~ (copy (str "C")))
test l get "ABC" = "CBA"

let R = [\\]

let R = [a] | [b]
let l = copy (R{1,2} | epsilon)
test l get "" = ""
test l get "aa" = "aa"
test l put "" into "a" = ""
test l put "a" into "" = "a"

(* check ambiguous on aababa *)
test
(copy [a] . copy [ab]* . (copy (str "ab")) . (copy [a] . copy [ab]* ))
get "aaba" = error

test copy (str "abc") . (del (str "123") . (copy [4]) * . copy (str "def")) get "abc1234def" = "abc4def"

test copy [b-c] get "a" = error
test copy [b-c] get "b" = "b"
test copy [b-c] get "c" = "c"
test copy [b-c] get "d" = error

(* ambiguity checker *)
let any = [^,]
let alpha = [a-zA-Z]
let ws = [ ]
let author = (alpha . any* . alpha) - (any* . ws . str "and" . ws . any*)

test (del [^]* )* get "" = error

test (const [^]* "hihi" "haha")* get "" = error

test (const ([b]| str "abb"| str "abbba"| str "bba"| str "baabb") "paf" "baabb")* get "" = error

test (const ([a].[b]*) "!" "abbbb")* put "!!!!" into "aaa" = "aaaabbbb"

(* test of finite repetitions*)
test const (str "ah"){2,4} "haha" "ahah" .
     del [ ]*.
     const epsilon " " "" . 
     const (str "test") "ok" "test" 
get "ahahah     test" 
= "haha ok"

(* bad repetitions *)
(* test const "ah"{4,2} "haha" "ahah" get "ahahah" = error *)
test const (str "ah"){1,2} "haha" "ahah" get "ahahah" = error

test del empty get "" = error

let everything = [^]*
let r1 = everything - (everything.(str "ab"| str "ca").everything)
let l1 = del r1
let k1 = (str "ab" <-> "ABC") | (str "ca" <-> "CBA")

(* ambiguity on "cabab" *)
test (l1.k1)*.l1 get "test" = error

(* need to check if the removed string finishs by 'c' *)
let r2 = r1 - (everything . [c])
let l2 = del r2
let r3 = r1. [c]
let l3 = del (r1. [c])
let k2 = str "ca" <-> "CBA"
let l = (l2.k1|l3.k2)*.l1 
test l get "ab ab saaaalut ca ca" = "ABCABCCBACBA"
test l put "CBACBAABCABC" into "ab ab hihi ca ca" = "ca ca hihi ab ab"

(* fails because the strings could contain "ABC". Counter example : ABCABC*)
test (copy r2 . k1 | copy r3 . k2)* . copy r1 get "123ab 1ab23" = error

let name = del (str "NAME:") . copy [^\n:]*

let unesc = str "\\," <-> "," | copy [^\\,]
let note = str "NOTE:" <-> ": " . unesc*

let vc = name . ((del [\n]+ . note) | (copy (str "")))

(*with an existing note, it's ok*)
test vc put "Nobody: Interresting note, no" into
"NAME:Nobody
|NOTE:something" =
"NAME:Nobody
|NOTE:Interresting note\\, no"

(* when the note does not contain a ',' it's ok *)
test vc put "Nobody: Interresting note" into
"NAME:Nobody" =
"NAME:Nobody
|NOTE:Interresting note"


(* and with a coma and no existing note, we don't have a problem either :) *)
test vc put "Nobody: Interresting note, no" into
"NAME:Nobody" =
"NAME:Nobody
|NOTE:Interresting note\\, no"


(* testing of regexp representation *)

let bs = "One string"
let balt = str "one" | str "the other"
let bseq = str bs . balt
let bmin = [abc] - [a]
test (string_of_regexp (empty . bseq) ) = 
  "empty"

test (string_of_regexp (str bs | bseq . balt)) = 
  <<<"One string" | bseq . balt>>>

test (string_of_regexp (bmin . bseq | balt)) = 
  <<<bmin . bseq | balt>>>

test (string_of_regexp (bmin & bseq . balt)) = 
  <<<bmin & bseq . balt>>>


test (string_of_regexp (bmin . bseq | balt*)) =
  <<<bmin . bseq | balt*>>>

test (string_of_regexp ((bmin . balt)*))=
  <<<(bmin . balt)*>>>

test (string_of_regexp (bseq . (bmin . balt)))=
  <<<bseq . (bmin . balt)>>>

test (string_of_regexp (bseq | ([abc] - [ab])))=
  <<<bseq | ([abc] - [ab])>>>

test (string_of_regexp ((bseq | [abc]) - [ab]))=
  <<<(bseq | [abc]) - [ab]>>>

test (string_of_regexp ((bmin . balt){1,3}))=
  <<<bmin . balt | bmin . balt . (bmin . balt) | bmin . balt . (bmin . balt . (bmin . balt))>>>
           
test (string_of_regexp ((bmin . balt){2,}))=
  <<<bmin . balt . (bmin . balt) . (bmin . balt)*>>>
    
test (string_of_regexp ((bmin . balt)?)) = 
  <<<(bmin . balt)?>>>

(*let me = move_end [ab] [CD]

test me get "abbababbabbbCababbaa" = 
              "abbababbabbbababbaaC"

test me put  "abbababbabbbababbaaD"
	  into "aaaaaaaaaCaa" = 
               "abbababbaDbbbababbaa"

test me put  "abbabaaD"
	  into "aaaaaaaaaCaa" = 
               "abbabaaD"
*)



      
(* problem with convertion between type :-\ a new lense is created
   from the *string* a1 each time, so a unique id is generated *)
(* fixed now -- subtyping is gone! *)
let a1 = copy (str "a")
test (<a1> . <a1>) get "aa" = "aa"
test (<a1:a1> . <a2:a1>) get "aa" = "aa"

let a3 = copy (str "a")
test (<a3>.<a3>) get "aa" = "aa"

(* dictionaries are (not) shared *)

let l = key [a-z]* . del [0-9]{4}

(* dictionaries are shared *)
test (<l> . copy (str "\n"). <l>) put 
<<<
foo
bar
>>>
into 
<<<
bar1234
foo5678
>>>
=
<<<
foo5678
bar1234
>>>


(* dictionaries are *not* shared *)
test (<tag1:l> . copy (str "\n"). <tag2:l>) put 
<<<
foo
bar
>>>
into 
<<<
bar1234
foo5678
>>>
=
<<<
foo0000
bar0000
>>>






(***** strange things... ****)

let alpha = [a-z]
let strange_chunk = key alpha . del alpha

let strange = (<strange_chunk> . <strange_chunk>);<strange_chunk>

test strange get "abcd" = "a"

test strange put "z" into "abcd" = "zaac"

let strange = (<bis:strange_chunk> . <bis:strange_chunk>);<strange_chunk>

test strange get "abcd" = "a"

test strange put "z" into "abcd" = "zaab"

(*** not strange anymore ***)

let chunk = key alpha{3} . del [0-9]{2}

let normal_def = 
default <chunk> "zzz42"

let strange_def = 
default <chunk> "foo42"


let normal_l = normal_def*. copy (str ",") . normal_def
let strange_l = strange_def* . copy (str ",") .strange_def

(* swaping of values *) 
test normal_l put "bar,foo" into "foo11,bar22"= "bar22,foo11"
test strange_l put "bar,foo" into "foo11,bar22"= "bar22,foo11"

test normal_l put "barbar,foo" into "foo11,bar22" = "bar22bar00,foo11"
test strange_l put "barbar,foo" into "foo11,bar22" = "bar22bar00,foo11" (* use to be "bar22bar00,foo42"*)



(**** Algebraic laws ****)

(* we don't have l1.(l2|l3) = l1.l2 | l1.l3 *)

let l1 = copy (str "a" | str "aa")
let l2 = str "c" <-> "a"
let l3 = str "d" <-> "aa"

test (l1.l2 | l1.l3) get "ac" = "aa"
test (l1.(l2|l3)) get "ac" = error


module Concat =

let firstListEmpty = <{List.HD = List.Nil, List.TL = Any}>
let lastListEmpty = <{List.HD = Any, List.TL = List.Nil}>

let charNonSpace = <{!\" " = Any}>
type listCharNonSpace = List.List charNonSpace
let firstCharSpace =  <{" "}:: Any> 

let concat: lens = 

let concat_aux: lens = 
    xfork {List.HD} {List.HD, "x"} 
    (hoist List.HD; rename List.TL "x") 
    id;
    xfork {"x", List.TL} {List.TL} 
    (rename "x" List.HD; plunge List.TL; wmap {List.TL -> concat1}) 
    id 

and concat1: lens = 
    probe "concat1";
    acond firstListEmpty firstCharSpace 
          (fork {List.HD} (map (rename List.NIL " ")) (wmap {List.TL -> concat2}))
          (plunge "()"; wmap { "()" -> concat_aux}; hoist "()")

and concat2: lens = 
    probe "concat2";
    acond lastListEmpty listCharNonSpace 
          (List.hd [] )
          (plunge "(*)"; wmap { "(*)" -> concat_aux}; hoist "(*)")
in concat1

let l: lens =  List.map (List.hd []; explode); concat; implode

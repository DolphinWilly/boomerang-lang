module Concat = 

let firstListEmpty: schema = ({ `(List.HD) = [], `(List.TL) = Any})
let lastListEmpty: schema = ({ `(List.HD) = Any, `(List.TL) = []}) 

let charNonSpace: schema = ({!\";" = Any})
let listCharNonSpace: schema = List.T charNonSpace
let firstCharSpace: schema =  ({";"}:: Any) 

let concat: lens = 

  let concat_aux: lens = 
    (xfork {`(List.HD)} {`(List.HD), "x"} 
       (hoist List.HD; rename List.TL "x") 
       id;
     xfork {"x", `(List.TL)} {`(List.TL)} 
       (rename "x" List.HD; plunge List.TL; wmap {`(List.TL) -> concat1}) 
       id) 

  and concat1: lens =
    (acond lastListEmpty listCharNonSpace
       (focus List.HD {`(List.TL) = []})
       (acond firstListEmpty firstCharSpace 
	  (fork {`(List.HD)} 
	     ( map (rename List.NIL ";")) 
	     (wmap {`(List.TL) -> concat2}))
	  ( plunge "()"; wmap { "()" -> concat_aux}; hoist "()")) )

  and concat2: lens =
    (acond List.Nil ({";"}) 
       ( rename List.NIL ";")
       (acond lastListEmpty listCharNonSpace 
          (focus List.HD {`(List.TL) = []} )
          ( plunge "()"; wmap { "()" -> concat1}; hoist "()")))
  in concat1

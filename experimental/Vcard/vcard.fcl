module Vcard =

let EmptyList = List.Nil (*<{"*nil"}>*)
let firstListEmpty = <{List.HD = List.Nil (*{"*nil"}*), List.TL = Any}>
let charComma = <{","}>

let l = 
let lens1:lens = ( List.hd []; hoist ""; List.hd []; hoist "PCDATA" )
and lens2:lens = (List.hd []; hoist ""; 
            List.map (
              map (hoist ""; ccond EmptyList 
                             (List.map (hoist "PCDATA")) 
			     (List.hd[];hoist "PCDATA")));
            flatten; map (List.hd []) )

and concat:lens = (
   acond firstListEmpty charComma
         (fork {List.HD} (map(rename List.NIL ",")) (map(focus List.HD {List.TL =[]} )))
         
         (xfork {List.HD} {List.HD, "x"} (hoist List.HD; rename List.TL "x") id;
          xfork {List.TL, "x"} {List.TL} 
                (rename "x" List.HD; plunge List.TL ; wmap {List.TL -> concat} ) id)
       )  
in 
hoist ""; List.hd [] (*we use List.map later*); hoist "iq"; (*here*)
focus "" [];
List.hd []; map (focus "" []; flatten;
             wmap { "FN" -> lens1, 
                   "NICKNAME" -> lens1,
                   "TITLE" -> lens1,
                   "ROLE" -> lens1,
                   "DESC" -> lens1,
                   "BDAY" -> lens1,
                   "URL" -> lens1,
                   "JABBERID" -> lens1,
                   "TEL" -> lens2,
                   "EMAIL" -> lens2,
                   "ADR" -> lens2,
                   "N" -> (List.hd[]; hoist ""; List.map (map (hoist ""; List.hd[]; hoist "PCDATA"));
                           flatten; xfork {"GIVEN"} {List.HD}
                                          (rename "GIVEN" List.HD)
					  (rename "FAMILY" List.HD; add List.TL []; plunge List.TL)
                          ;List.map (List.hd []; explode); concat; implode ),  
                   "ORG" -> lens2                 
                  };
              pivot "FN"
           ) 


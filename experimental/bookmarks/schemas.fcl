module Schemas =
open Prelude
  
type V = { !={} }     

(* the abstract schema for heterogeneous synchronization *)
type Link = { "name" = V, "url" = V }

type Folder  = { "name" = V, "contents" = Contents }     
and Contents  = List.List ({ "folder" = Folder} | {"link" =  Link})

type Abstract = Contents

(* the new one, with bushes *)
type Item = { "folders" = { * = List.List Any }, "links" = { * = V } }
and Twig = List.List { "folders" = { * = List.List Twig }, "links" = { * = V } }
type BushAbstract = Item


(* the lens to flatten the abstract into a bush *)
let flatten_to_bush : lens =
  List.map (
  wmap {"folder" -> (pivot "name"; map (hoist "contents"; flatten_to_bush)) , 
    "link" -> pivot "url"; map (hoist "name")}
    );
  flatten;
  wmap {"folder" -> flatten,
    "link" -> (flatten; map (List.hd []))
       };
  rename_if_present "folder" "folders";
  rename_if_present "link" "links";
  
  acond <{}> <{"folders"={}, "links"={}}>
  ( add "links" {}; add "folders" {} )
    (acond <{"links"=Any}> <{"folders"={}, "links" = Any}>
     (add "folders" {})
       (acond <{"folders"=Any}> <{"folders" = Any, "links" = {}}>
	(add "links" {})
	  id
	  )
       )    
    
let flatten_bookmarks =
  flatten_to_bush;
  assert BushAbstract
    

module IExplorer =
open Prelude
  
(* Types *)
type V = { ! = {} }
type IE6PList = { "URL" = `V, *\"URL" = `V }
type IE6DList = { "BASEURL" = `V, *\"BASEURL" = `V } 
type IE6Url = { "InetShortcut" = `IE6PList } | { "InetShortcut" = `IE6PList, "Default"= `IE6DList }
type IE6Link = { "name" = `V, "url" = `IE6Url } | { "name" = `V, "noturl" = `V }
type IE6Folder = { "name" = `V, "contents" = `IE6Concrete }
and IE6Concrete = List ({"link" = `IE6Link } | {"folder" = `IE6Folder})
  
(* Lenses *)
let l : lens = 
  
  let folder = 
    wmap { "contents" -> l } in
  
  let link =
    (* this removes the contents of noturl files *)
    ccond <{"noturl" = `Any, "name" = `Any}> (const {} {}) id;
    
    wmap {"url" -> 
      ccond <{ "InetShortcut" = `Any }>
        (* if there is no default tag, we just focus on the url *)
        (hoist "InetShortcut"; focus "URL" {})
	(* if there is a default tag, then we merge the urls *)
	(wmap { 
	 "InetShortcut" -> focus "URL" {}, 
	   "Default" -> focus "BASEURL" {}};
	 merge "InetShortcut" "Default";
	 hoist "InetShortcut"
	   )
	 } in
  
  (* skip_empty_links removes the { link = {} } views that result from applying link to a noturl file *)
  let skip_empty_links : lens =
    ccond <{"link"={}}::Any>
      (wmap { `(List.TL) -> skip_empty_links }; List.tl {"link"={}})
	(wmap { `(List.TL) -> skip_empty_links} ) in
  
  assert IE6Concrete;
  List.map ( wmap {"folder" -> folder, "link" -> link} );
  skip_empty_links
    
let l3 =
  l;
  Schemas.flatten_bookmarks

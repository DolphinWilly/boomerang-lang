module IExplorer =
open Prelude
  
(* Types *)
type V = { ! = {} }
type IE6PList = { "URL" = V, *\"URL" = V }
type IE6DList = { "BASEURL" = V, *\"BASEURL" = V } 
type IE6Url = { "InetShortcut" = IE6PList } | { "InetShortcut" = IE6PList, "Default"=IE6DList}
type IE6Link = { "name" = V, "url" = IE6Url } | { "name" = V, "noturl" = V }
type IE6Folder = { "name" = V, "contents" = IE6Concrete }
and IE6Concrete = List.List ({"link" = IE6Link } | {"folder" = IE6Folder})
  
let l : lens = 
  let folder = 
    wmap { "contents" -> l } in
  let link =
    ccond <{"noturl" = Any, "name" = Any}> (const {} {}) id;
(*  filter {"name", "url"} {}; *)
    wmap {"url" -> 
      ccond <{ "InetShortcut" = Any }>
	(hoist "InetShortcut"; focus "URL" {})
	(wmap { 
	 "InetShortcut" -> focus "URL" {}, 
	   "Default" -> focus "BASEURL" {}};
	 merge "InetShortcut" "Default";
	 hoist "InetShortcut"
	   )
	 } in
  let skip_empty_links : lens =
    ccond <{"link"={}}::Any> (wmap { List.TL -> skip_empty_links }; List.tl {"link"={}})
			  (wmap { List.TL -> skip_empty_links} )
			
  in
  assert IE6Concrete;
  List.map ( wmap {"folder" -> folder, "link" -> link} );
  skip_empty_links;
  assert Schemas.Abstract

let l3 =
  l;
  Schemas.flatten_bookmarks;
  assert Schemas.BushAbstract
    

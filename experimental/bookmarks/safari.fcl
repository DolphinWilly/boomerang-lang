module Safari =

(* note: mapName takes a predicate, but it *must* contain 
   a single name when we have variables in views; we should 
   change it so that it takes a name instead *)
let mapName (p:view) (l:lens) = fork p (map l) id
 
(* list helpers *)
let addAtomic = add "*" {}
let addEmptyTail = add "*t" {}; mapName {"*t"} (addAtomic)
let listifyHd = addAtomic; addEmptyTail

(* Schemas *)
let EmptyList = < {"*nil"} >
let EmptyView = < {} >
let SingletonList (X:type) = < {"*h"=X, "*t"=[]} >
let SingListSingList = SingletonList (SingletonList Any)
let StrangeSchema = < {"x1" = Any, "a1" = Any, "*" = Any} >

let myrename (m:name) (n:name) : lens = 
  probe "before xfork";
  xfork {m} {n} (probe "before acond"; acond EmptyView EmptyView id (probe "inside myrename"; hoist m; plunge n)) id

let groupby2 : lens =
  acond EmptyList EmptyList
        id
        (myrename "*h" "temp*h";
         myrename "*" "a1";
         hoist_nonunique "*t" {"*t", "*h", "*"};
         acond StrangeSchema SingListSingList
               (xfork {"*"} {"*t"} (plunge "*t") id;
                myrename "temp*h" "*h";
                myrename "a1" "*";
                plunge "*h";
                listifyHd)
               (mapName {"*h"} (plunge "*h");
                hoist_nonunique "*h" {"*h"};
                xfork {"*", "*h"} {"x2"} (plunge "x2") id;
                mapName {"x2"} (addEmptyTail);
                xfork {"temp*h", "x2", "a1"} {"*h", "*"}
                      (myrename "temp*h" "*h";
                       myrename "x2" "*t";
                       myrename "a1" "*";
                       plunge "*h";
                       addAtomic)
                      (mapName {"*t"} groupby2)))

let plist_object_lens : lens =
  wmap { "dict" -> dict_lens,
         "array" -> array_lens,
         "string" -> leaf_lens }

and array_lens : lens =
  hoist "";
  list_map plist_object_lens

and dict_lens : lens =
  hoist "";
  groupby2;
  list_map (keypair_lens)

and keypair_lens : lens =
  wmap { "*h" -> hoist "key"; leaf_lens, 
         "*t" -> wmap {"*h" -> plist_object_lens } }

and leaf_lens : lens =
  hoist "";
  acond EmptyList < { "*t"=EmptyList, "*h"={"PCDATA" = {"BLANK"={}, *\"BLANK"=Any}}} >
   (const [{"PCDATA"="BLANK"}] {})
   id;
  hd [];
  hoist "PCDATA"

let plist_lens =
  hoist "";
  hd [];
  hoist "plist";
  focus "" {};
  hd [];
  plist_object_lens

let l = plist_lens


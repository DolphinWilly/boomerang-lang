module Mozilla_bookmark =
open Prelude

(* definitions of types for conditionals *)
type Dd = { "dd" = Any }
type Ddavech3 = { "dd" = { "" = [{"h3" = Any}] } }
type Ddsansh3 = { "dd" = { "" = ({"PCDATA" = Any } :: Any )} }
type Dt = { "dt" = Any }

type Item = List.List (Dd | Dt )

type ItemFolder = Dd :: Item
type ItemFolderDesc = Ddavech3 :: (Ddsansh3 :: Item)
type ItemLink = Dt :: Item
type ItemLinkDesc = Dt :: (Ddsansh3 :: Item)

(* lens *)
let l =
  let no_descr_tag : view  =
    { List.HD = { "dd" = { "" = [ {"PCDATA"= {"No description"}} ] }}} in
  let no_descr : view =
    { List.HD = { "PCDATA" = {"No description"}}} in
  
  let hoist_hd (p : view) =
    hoist_nonunique List.HD p;
    hoist_nonunique List.TL List.tags  in

  let link : lens =
    hoist "dt";
    hoist "";
    List.hd [];
    hoist "a";
    filter {"", "href", "add_date"} {};
    rename "" "name";
    rename "href" "url";
    prune "add_date" {"01/01/1970"};
    wmap { "name" -> (List.hd []; hoist "PCDATA") }
      
  and folder : lens =
    hoist "dd";
    hoist "";
    hoist_hd {"h3"};
    fork {"h3"} id (hoist_hd {"dl"});
    prune List.NIL {}; prune List.HD {}; prune List.TL {};
    rename "h3" "name";
    rename "dl" "contents";
    wmap {"name" -> (filter {""} {}; hoist ""; List.hd []; hoist "PCDATA"),
      "contents" -> (hoist ""; item_list)}
      
  and item_list : lens =
    let itemfolderdesc2 =
      List.tl {}; wmap {List.TL ->item_list}; List.tl {} in
    let itemfolderdesc = 
      wmap { List.HD -> (hoist "dd"; hoist ""; List.hd []; rename "h3" "name") ,
	List.TL -> 
	  wmap {List.HD -> hoist "dd"; hoist ""; focus List.TL no_descr; List.hd [];
	    wmap { "dl" -> (plunge "contents"; plunge List.HD) }}
	   };
      hoist_nonunique List.TL {List.TL, "dl"};
      hoist_nonunique "dl" {List.HD};
      wmap { List.HD -> folder, List.TL -> item_list } 
    in
    let itemfolder =
      wmap { List.HD -> folder, List.TL -> item_list } 
    in
    let itemlink =
      wmap { List.HD -> link, List.TL -> item_list } 
    in
    let itemlinkdesc =
    (* in the get, we just focus on the link, and discard the following description *)
      wmap { List.HD -> link, List.TL -> focus List.TL no_descr_tag };
      wmap { List.TL -> item_list }  
    in
    ccond <ItemFolderDesc> itemfolderdesc2
      (ccond <ItemFolder> itemfolder
	 (ccond <ItemLinkDesc> itemlinkdesc
	    (ccond <ItemLink> itemlink
	       (* then it must be Nil *) id
	       )
	    )
	 );
    List.map (rename_if_present "dd" "folder"; rename_if_present "dt" "link") in
      
  let bookmarks : lens =
    hoist "";
    List.hd [];
    hoist "html";
    focus "" {"xmlns" = { "http://www.w3.org/1999/xhtml"}};
    List.tl { "head" = { "" = [{"title" = {""= [{ "PCDATA" = {"Bookmarks"}}]}}]}};
    List.hd [];
    hoist "body";
    hoist "";
    List.tl { "h1" = { "" = [{ "PCDATA" = {"Bookmarks"} }]}};
    List.hd [];
    hoist "dl";
    hoist "";
    item_list

  in
  bookmarks
    

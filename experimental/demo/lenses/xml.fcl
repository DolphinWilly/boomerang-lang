module Xml =
open Prelude

let PCDATA = "PCDATA"
let childrenTag = ""

type Value = { PCDATA = { ! = {}}}

type XmlAny =  { childrenTag = List {! = XmlAny}, *\"" = { ! = {}}}

(* type Star n T attrs = { n = { childrenTag = List T, *\(~ attrs)= { ! = {}}}} *)
(* type Plus n T attrs = { n = { childrenTag = (T :: List T), *\(~ attrs)= { ! = {}}}} *)

(* type List n L attrs = { n = { childrenTag = L, *\(~attrs) = {! = {}}}} *)

(* type NStar n T = { n = { childrenTag = List T}} *)
(* type NPlus n T = { n = { childrenTag = (T :: List T)}} *)

(* type NList n L = { n = { childrenTag = L}} *)

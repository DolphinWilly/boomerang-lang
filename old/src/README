                      THE HARMONY GENERIC SYNCHRONIZATION FRAMEWORK
                      =============================================


OVERVIEW
-------

Increased reliance on optimistic data replication has led to
burgeoning interest in tools and frameworks for synchronizing
disconnected updates to replicated data.  To better understand the
issues underlying the design of generic and heterogeneous
synchronizers, we have implemented an experimental framework, called
Harmony, that can be used to build synchronizers for tree-structured
data stored in a variety of concrete formats.

This directory contains the sources for Harmony.


COPYING
-------

Harmony is not currently being distributed outside of the group of
developers, except for a limited number of copies made available to
friends on an informal basis.  We expect that it will be distributed
in due course under an open-source license.


CAVEATS
-------

This code is in a constant state of flux.  Documentation is minimal to
non-existant, and we're... ahem... prouder of some parts than others.
You are on your own here.  (However, we will try to answer questions.)


GETTING STARTED
---------------

See the file INSTALL for instructions on how to build.

If you want to read over the code, here is one possible order to look at files: 
   common/base/v.mli                           basic definitions of trees (called "views")
   common/base/lens.mli                        basic definitions of lenses
   plugins/pervasives/pervasive_plugin.ml      actual definitions of a bunch of primitive 
                                               and derived lenses
   sync/sync.ml                                the synchronization algorithm
   sync/harmony.ml                             the top-level

To understand what's going on in the code, you'll also want to have a
look at the papers describing lenses ("Combinators for bi-directional
tree transformations") and the overall synchronization architecture
("Bringing harmony to optimism"), which can be found via the Harmony
home page:

    http://www.cis.upenn.edu/~bcpierce/harmony

   
ROADMAP
-------

Harmony actually consists of two programs: a synchronizer and a visual
development environment for the lens programming language.  

The high-level modules for the synchronizer live in the directory
'sync'.  The most interesting one is sync.ml, where the actual
synchronization happens.  The main program is harmony.ml.  

The high-level modules for the visualizer live in the directory
'visual'.  This code is not very enlightening -- it is just handling
the user interface itself, and the parts that do real work are all
elsewhere.

The directory 'common' contains common infrastructure for the
visualizer and synchronizer:

    base           Basic facilities, including the definitions of trees (v.ml), 
                   lenses (lens.ml), etc.

    compiler       The compiler for Focal (the lens language)

    optometrist    Facilities for registering lenses and a tool (the optometrist) 
                   for automatically choosing appropriate lenses for synchronizing
                   particular pairs of input files, based on their types

The directory 'plugins' is where code (in both ML and Focal)

The directory 'lib' contains code that is needed for Harmony but that
is developed separately, e.g. a parser for iCalendar files, the Unison
base library (used for argument parsing, string processing, etc.), and
the 'tidy' library for cleaning up HTML/XML files.

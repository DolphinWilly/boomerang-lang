\chapter{The Harmony System}

{\em Under construction.}

\section{Running Harmony}

\begin{itemize}
\item command-line arguments \label{sec:cmdlineargs}
\item encoding keys \label{sec:encodingkeys}
\end{itemize}

\section{Running the Web Demos Locally}

If you want to build new demos and make them available on the web for others
to play with, you'll need to run the demo script on your own web server.
The basic steps are as follows:

\begin{enumerate}
\item 

* Start a local webserver and make sure it can serve PHP pages.  On 
OSX, for example, it can be done something like this.  First, edit the web
server configuration file
#&   sudo emacs /private/etc/httpd/httpd.conf
and uncomment two lines involving PHP.

Now put a symlink from the web server's default location to wherever you
keep your personal web space.
#&   sudo mv /Library/WebServer/Documents /Library/WebServer/Documents.orig
#&   sudo ln -s ~/pub /Library/WebServer/Documents

Next, restart the web server by toggling ``Personal web sharing'' control in the
``Sharing''  system preference panel.

\item  Make a symlink to your harmony directory from somewhere in your web
space:
#&ln -s ~/current/harmony ~/pub

\item Point your browser to \verb|http://localhost/harmony/html/demobody.php|
and see if the usual demo page gets displayed.

\item Put your demos in a new subdirectory (say, @mydemo@) under
@harmony/examples@.  This directory should definitely contain a file
@demos.php@ and an executable file @harmonize-mydemos@ --- see the existing
subdirectories of @examples@ to see how this is done.

\item Edit @harmony/html/demobody.php@, search for @get_demos_from@, and add a line
#&get_demos_from("mydemo");
to what's already there.  
\end{enumerate}

\section{Using Harmony through Unison}

If you are a user of the Unison file synchronizer, you may want to use 
Harmony through Unison. \footnote{If you do not know what Unison is, then it is
not too late to check it out at the following address
\texttt{http://www.cis.upenn.edu/~bcpierce/unison}.}
Unison is a convenient way to use Harmony to do homogeneous synchronization
between specific files, in the safe and userfriendly way that is well
known to Unison users.\\

When Unison is synchronizing two files, it may encounter the case
where the same file has been modified in conflicting (that is,
different) ways on both replicas. If this file is source code, you
may want to use \verb|diff3| to merge the two versions of your file
and start Unison again with the files equal on both
replicas. Similarly, if this file is in some format for which you have
an Harmony instance (e.g. bookmarks file), you may want to use Harmony
to merge the files. Doing it manually, in either case, can be boring,
especially if you have to often repeat this manipulation. Fortunately,
we added a new functionality to Unison that lets you define a merge
command to be applied to some sort of files, when these
conflict. Before you go on, make sure that your version of Unison is
recent enough (2.13 or later), or this functionality will not be
implemented in your Unison (ver 2.12 can be used with \verb|diff|-like
commands, but not with Harmony). Remember, if you are using Unison
between two different machines, that the \emph{same} version of Unison
must be installed on both, unless they cannot communicate with each
other.\\ 

An important limitation in using Harmony through Unison is that,
since Unison will always make the files on both replicas equal in the
case of a successful synchronization, it cannot be used this way to do
heterogeneous synchronization. For example, if you want to synchronize
the Firefox bookmarks of your Linux partition and the IE6 bookmarks of
your WinXP partition together, you cannot use Unison to do that. On
the contrary, if your goal is to synchronize your Safari bookmarks
between your desktop machine and your power book, then you just have
to follow the instructions hereafter, and then let Unison do all the
job for you.\\

So, suppose you have a Safari bookmarks file, named
\verb|bookmarks.plist| at the same location in your both replicas,
and that you want Unison to use Harmony to merge the two versions of
this file whenever they conflict. First, we recommand you to write in
whatever programming language (or script language) you like the most a
small command that will embody all the options to be passed to Harmony
and whatever preprocessing/postprocessing is required before Harmony 
has to be applied. For example, in the case of Safari bookmarks file,
your command should apply the \verb|plutil| utility before and after
calling Harmony (to transform .plist files from binary to XML, and
back to binary after synchronization), and call Harmony with the
appropriate options for the lenses to be applied and the schema to be
used for synchronization. In general, your command could look like
this :

\begin{verbatim}
preprocess
pathToHarmony/harmony \
        -lensr1 M.myLens -lensr2 M.myLens -lensar M.myLens \
        -schema M.mySchema -I pathToModuleM -IpathToPrelude \
        -r1 $1  -r2 $2  -ar $3 \
        -newr1 $4 -newr2 $5 -newar $6
postprocess

\end{verbatim}

The only arguments whose passing should be left to Unison are the 
names of the three inputs and the three outputs. Now, assuming you
have this command called, say, \verb|my_merge|, open your Unison
profile.

The first thing you have to do is to set the \verb|merge| preference
of your profile, to specify to Unison that files named
\verb|bookmarks.plist| should be merged with the special command :

\begin{verbatim}
merge = Name bookmarks.plist -> my_merge CURRENT1 CURRENT2 CURRENTARCH 
                                         NEW1 NEW2 NEWARCH

\end{verbatim}

Since the Harmony synchronization required an archive, that is, a \emph{last
synchronized state}, you need to tell Unison to store a copy of the
file each time it is synchronized or its contents are changed equally
on both replicas. Here again, just add the following line to your
profile :

\begin{verbatim}
backupcurrent = Name bookmarks.plist
\end{verbatim}

And... that's all ! This should be OK now, and Unison should propose
you to merge the files by default when they conflict, calling your
command to merge them. If you want more control on the name and the
location of the archive, or if you do not want Unison to ask you
confirmation after each merge, take a look at the merge and backup
sections of the Unison manual and set the appropriate switches in your
profile.

\section{Navigating the Distribution}

If you want to check out the code, here is one reasonable order to look at the
files:   

\begin{tabular}{ll}
@src/v.mli@                   &        basic definitions of trees \\
@src/lens.mli@                   &     basic definitions of lenses\\
@src/lib/native/prelude.ml@      &     the most important primitive lenses\\
@src/lib/lenses/prelude.fcl@     &     some important derived lenses\\
@examples/*@                   &       lots of real-world lenses\\
@src/sync.ml@                   &      the synchronization algorithm\\
@src/harmony.ml@                   &   the top-level program\\
\end{tabular}

\finish{This section should also talk about how to add things (primitive
  lenses, viewers, etc.)}
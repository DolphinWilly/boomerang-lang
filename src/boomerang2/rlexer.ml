# 1 "rlexer.mll"
 
open Rparser

module LE = Lexing

let lexeme = LE.lexeme

let sprintf = Printf.sprintf

(* We track of lexing information using a stack. A stack is required
   because the lexer is invoked, on-demand, from the registry to parse
   strings into sorts and qualified identifiers. *)
let info_stk = ref []

let filename () = match !info_stk with 
    [] -> Error.simple_error "Plexer.filename : info stack is empty."
  | (fn,_,_)::_ -> fn

let lineno () = match !info_stk with 
    [] -> Error.simple_error "Plexer.lineno : info stack is empty."
  | (_,l,_)::_ -> l

let linestart () = match !info_stk with 
    [] -> Error.simple_error "Plexer.linestart : info stack is empty."
  | (_,_,c)::_ -> c

let set_filename fn = match !info_stk with 
    [] -> Error.simple_error "Plexer.set_filename : info stack is empty."
  | (_,l,c)::t -> info_stk := (fn,l,c)::t

let set_lineno l = match !info_stk with 
    [] -> Error.simple_error "Plexer.set_lineno : info stack is empty."
  | (fn,_,c)::t -> info_stk := (fn,l,c)::t

let set_linestart c = match !info_stk with 
    [] -> Error.simple_error "Plexer.set_linestart : info stack is empty."
  | (fn,l,_)::t -> info_stk := (fn,l,c)::t

let setup fn = info_stk := (fn,1,0)::!info_stk

let finish () = match !info_stk with
    [] -> Error.simple_error "Plexer.finish : info stack is empty."
  | _::t -> info_stk := t

let newline lexbuf : unit = 
  set_linestart (LE.lexeme_start lexbuf);
  set_lineno (lineno () + 1)

let info lexbuf : Info.t = 
  let c1 = LE.lexeme_start lexbuf in
  let c2 = LE.lexeme_end lexbuf in
  let l = lineno () in
  let c = linestart () in
    Info.I (filename(), (l, c1 - c - 1),(l, c2 - c - 1))

let error lexbuf msg =
  let i = info lexbuf in
  let t = lexeme lexbuf in   
  let s = Printf.sprintf "%s: lexing error %s at %s." 
    (Info.string_of_t i)
    msg 
    t in
    Error.simple_error s

let text = Lexing.lexeme

let extractLineno yytext offset =
  int_of_string (String.sub yytext offset (String.length yytext - offset))

let keywords = Hashtbl.create 17
let _ = 
  Safelist.iter (fun (kw,tok) -> Hashtbl.add keywords kw tok)
    [ ("let", (fun i -> LET i)) 
    ; ("in", (fun i -> IN i))
    ; ("fun", (fun i -> FUN i))
    ; ("begin", (fun i -> BEGIN i))
    ; ("end", (fun i -> END i))
    ; ("test", (fun i -> TEST i))
    ; ("into", (fun i -> INTO i))
    ; ("get", (fun i -> GET i))
    ; ("put", (fun i -> PUT i))
    ; ("create", (fun i -> CREATE i))
    ; ("crt", (fun i -> CREATE i))
    ; ("match", (fun i -> MATCH i))
    ; ("with", (fun i -> WITH i))
    ; ("error", (fun i -> ERROR i))
    ; ("string", (fun i -> STRING i))
    ; ("regexp", (fun i -> REGEXP i))
    ; ("canonizer", (fun i -> CANONIZER i))
    ; ("clens", (fun i -> CLENS i))
    ; ("klens", (fun i -> KLENS i))
    ; ("slens", (fun i -> SLENS i))
    ; ("rlens", (fun i -> RLENS i))
    ]

# 98 "rlexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\215\255\217\255\218\255\079\000\098\000\221\255\222\255\
    \224\255\225\255\226\255\227\255\228\255\229\255\002\000\234\255\
    \235\255\236\255\237\255\096\000\242\255\243\255\193\000\245\255\
    \246\255\122\000\252\255\253\255\005\000\003\000\216\255\024\000\
    \022\000\039\000\026\000\251\255\028\000\250\255\044\000\248\255\
    \060\000\042\000\058\000\249\255\021\001\241\255\105\001\240\255\
    \033\000\177\000\238\255\116\000\127\000\239\255\230\255\232\255\
    \243\000\098\000\254\255\255\255\218\001\136\001\221\001\019\001\
    \130\000\004\000\132\000\051\001\192\000\161\000\001\001\164\000\
    \241\000\050\001\165\000\052\001\166\000\055\001\167\000\168\000\
    \198\001\156\001\190\000\191\000";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\036\000\035\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\022\000\255\255\
    \255\255\255\255\255\255\024\000\255\255\255\255\011\000\255\255\
    \255\255\008\000\255\255\255\255\001\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\035\000\255\255\035\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\004\000\255\255\255\255\255\255\003\000\255\255\255\255\
    \003\000\000\000\255\255\255\255\002\000\255\255\255\255\255\255\
    \255\255\001\000\255\255\255\255\255\255\255\255\003\000\255\255\
    \255\255\255\255\004\000\004\000";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\255\255\000\000\
    \000\000\255\255\000\000\000\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\000\000\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\000\000\000\000\000\000\
    \035\000\255\255\000\000\000\000\037\000\255\255\255\255\026\000\
    \255\255\255\255\255\255\026\000\255\255\255\255\255\255\255\255\
    \026\000\255\255\255\255\255\255\255\255\026\000\255\255\255\255\
    \039\000\035\000\255\255\255\255";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\029\000\003\000\000\000\029\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \029\000\020\000\006\000\029\000\065\000\000\000\024\000\005\000\
    \028\000\027\000\023\000\021\000\012\000\022\000\025\000\030\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\011\000\026\000\019\000\017\000\013\000\007\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\014\000\008\000\054\000\010\000\005\000\
    \055\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\016\000\018\000\015\000\009\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\005\000\038\000\036\000\034\000\049\000\035\000\005\000\
    \037\000\040\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\048\000\041\000\042\000\043\000\
    \039\000\052\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\053\000\059\000\058\000\
    \066\000\005\000\058\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\031\000\051\000\071\000\
    \070\000\033\000\058\000\076\000\059\000\079\000\059\000\058\000\
    \005\000\059\000\032\000\000\000\000\000\000\000\044\000\050\000\
    \000\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\073\000\000\000\026\000\069\000\045\000\
    \002\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\000\000\065\000\000\000\000\000\
    \005\000\070\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\068\000\000\000\069\000\
    \000\000\058\000\046\000\000\000\000\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\057\000\
    \027\000\064\000\075\000\059\000\075\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \074\000\000\000\074\000\000\000\005\000\078\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\062\000\000\000\000\000\000\000\000\000\005\000\000\000\
    \000\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\000\000\000\000\000\000\027\000\047\000\
    \062\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\083\000\000\000\082\000\000\000\
    \005\000\000\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\061\000\000\000\062\000\000\000\
    \058\000\000\000\000\000\000\000\000\000\059\000\000\000\000\000\
    \000\000\027\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\058\000\062\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
    \026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\035\000\000\000\059\000\027\000\
    \037\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\035\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\029\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\029\000\065\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\005\000\031\000\032\000\033\000\019\000\034\000\005\000\
    \036\000\038\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\019\000\040\000\041\000\042\000\
    \038\000\051\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\052\000\057\000\057\000\
    \064\000\005\000\066\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\025\000\049\000\069\000\
    \068\000\025\000\071\000\074\000\076\000\078\000\079\000\082\000\
    \022\000\083\000\025\000\255\255\255\255\255\255\022\000\049\000\
    \255\255\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\072\000\255\255\056\000\068\000\022\000\
    \000\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\255\255\063\000\255\255\255\255\
    \022\000\070\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\044\000\067\000\255\255\070\000\
    \255\255\077\000\044\000\255\255\255\255\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\056\000\
    \056\000\063\000\073\000\067\000\075\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \073\000\255\255\075\000\255\255\044\000\077\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \046\000\061\000\255\255\255\255\255\255\255\255\046\000\255\255\
    \255\255\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\255\255\255\255\255\255\081\000\046\000\
    \061\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\081\000\255\255\081\000\255\255\
    \046\000\255\255\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\060\000\255\255\062\000\255\255\
    \080\000\255\255\255\255\255\255\255\255\080\000\255\255\255\255\
    \255\255\072\000\255\255\056\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\060\000\062\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\061\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\063\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\080\000\255\255\255\255\255\255\255\255\255\255\
    \080\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\067\000\080\000\255\255\060\000\077\000\
    \080\000\255\255\080\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\062\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\081\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\080\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\060\000\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec main lexbuf =
    __ocaml_lex_main_rec lexbuf 0
and __ocaml_lex_main_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 105 "rlexer.mll"
                     ( main lexbuf )
# 343 "rlexer.ml"

  | 1 ->
# 106 "rlexer.mll"
                     ( LPAREN(info lexbuf) )
# 348 "rlexer.ml"

  | 2 ->
# 107 "rlexer.mll"
                     ( RPAREN(info lexbuf) )
# 353 "rlexer.ml"

  | 3 ->
# 108 "rlexer.mll"
                     ( SEMI(info lexbuf) )
# 358 "rlexer.ml"

  | 4 ->
# 109 "rlexer.mll"
                     ( DOTGET(info lexbuf) )
# 363 "rlexer.ml"

  | 5 ->
# 110 "rlexer.mll"
                     ( DOTPUT(info lexbuf) )
# 368 "rlexer.ml"

  | 6 ->
# 111 "rlexer.mll"
                     ( DOTCREATE(info lexbuf) )
# 373 "rlexer.ml"

  | 7 ->
# 112 "rlexer.mll"
                     ( DOTCREATE(info lexbuf) )
# 378 "rlexer.ml"

  | 8 ->
# 113 "rlexer.mll"
                     ( DOT(info lexbuf) )
# 383 "rlexer.ml"

  | 9 ->
# 114 "rlexer.mll"
                     ( AMPERSAND(info lexbuf) )
# 388 "rlexer.ml"

  | 10 ->
# 115 "rlexer.mll"
                     ( STAR(info lexbuf) )
# 393 "rlexer.ml"

  | 11 ->
# 116 "rlexer.mll"
                     ( MINUS(info lexbuf) )
# 398 "rlexer.ml"

  | 12 ->
# 117 "rlexer.mll"
                     ( PLUS(info lexbuf) )
# 403 "rlexer.ml"

  | 13 ->
# 118 "rlexer.mll"
                     ( BANG(info lexbuf) )
# 408 "rlexer.ml"

  | 14 ->
# 119 "rlexer.mll"
                     ( ARROW(info lexbuf) )
# 413 "rlexer.ml"

  | 15 ->
# 120 "rlexer.mll"
                     ( LONGARROW(info lexbuf) )
# 418 "rlexer.ml"

  | 16 ->
# 121 "rlexer.mll"
                     ( LONGDARROW(info lexbuf) )
# 423 "rlexer.ml"

  | 17 ->
# 122 "rlexer.mll"
                     ( DARROW(info lexbuf) )
# 428 "rlexer.ml"

  | 18 ->
# 123 "rlexer.mll"
                     ( BAR(info lexbuf) )
# 433 "rlexer.ml"

  | 19 ->
# 124 "rlexer.mll"
                     ( EQUAL(info lexbuf) )
# 438 "rlexer.ml"

  | 20 ->
# 125 "rlexer.mll"
                     ( LBRACE(info lexbuf) )
# 443 "rlexer.ml"

  | 21 ->
# 126 "rlexer.mll"
                     ( RBRACE(info lexbuf) )
# 448 "rlexer.ml"

  | 22 ->
# 127 "rlexer.mll"
                     ( CSET(info lexbuf, cset lexbuf) )
# 453 "rlexer.ml"

  | 23 ->
# 128 "rlexer.mll"
                     ( NSET(info lexbuf, cset lexbuf) )
# 458 "rlexer.ml"

  | 24 ->
# 129 "rlexer.mll"
                     ( LANGLE(info lexbuf) )
# 463 "rlexer.ml"

  | 25 ->
# 130 "rlexer.mll"
                     ( STR(info lexbuf,bare lexbuf) )
# 468 "rlexer.ml"

  | 26 ->
# 131 "rlexer.mll"
                     ( RANGLE(info lexbuf) )
# 473 "rlexer.ml"

  | 27 ->
# 132 "rlexer.mll"
                     ( COMMA(info lexbuf) )
# 478 "rlexer.ml"

  | 28 ->
# 133 "rlexer.mll"
                     ( COLON(info lexbuf) )
# 483 "rlexer.ml"

  | 29 ->
# 134 "rlexer.mll"
                     ( HAT(info lexbuf) )
# 488 "rlexer.ml"

  | 30 ->
# 135 "rlexer.mll"
                     ( TILDE(info lexbuf) )
# 493 "rlexer.ml"

  | 31 ->
# 136 "rlexer.mll"
                     ( BACKSLASH(info lexbuf) )
# 498 "rlexer.ml"

  | 32 ->
# 137 "rlexer.mll"
                     ( COMMA(info lexbuf) )
# 503 "rlexer.ml"

  | 33 ->
# 138 "rlexer.mll"
                     ( QMARK(info lexbuf) )
# 508 "rlexer.ml"

  | 34 ->
# 139 "rlexer.mll"
                     ( STR (info lexbuf, string lexbuf) )
# 513 "rlexer.ml"

  | 35 ->

  let ident = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 140 "rlexer.mll"
                                       ( 
      try let kw = Hashtbl.find keywords ident in
          kw (info lexbuf)
      with Not_found -> IDENT (info lexbuf, ident) )
# 523 "rlexer.ml"

  | 36 ->

  let integ = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 144 "rlexer.mll"
                     ( INT(info lexbuf, int_of_string integ) )
# 530 "rlexer.ml"

  | 37 ->
# 145 "rlexer.mll"
                     ( newline lexbuf; main lexbuf )
# 535 "rlexer.ml"

  | 38 ->
# 146 "rlexer.mll"
                     ( EOF(info lexbuf) )
# 540 "rlexer.ml"

  | 39 ->
# 147 "rlexer.mll"
                     ( comment lexbuf; main lexbuf )
# 545 "rlexer.ml"

  | 40 ->
# 148 "rlexer.mll"
                     ( error lexbuf "unknown token" )
# 550 "rlexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_main_rec lexbuf __ocaml_lex_state

and cset lexbuf =
    __ocaml_lex_cset_rec lexbuf 56
and __ocaml_lex_cset_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 151 "rlexer.mll"
                     ( "\\\\" ^ cset lexbuf )
# 561 "rlexer.ml"

  | 1 ->
# 152 "rlexer.mll"
                     ( "]" ^ cset lexbuf )
# 566 "rlexer.ml"

  | 2 ->
# 153 "rlexer.mll"
                     ( "" )
# 571 "rlexer.ml"

  | 3 ->
# 154 "rlexer.mll"
                     ( newline lexbuf; "\n" ^ cset lexbuf )
# 576 "rlexer.ml"

  | 4 ->
# 155 "rlexer.mll"
                     ( let s = lexeme lexbuf in s ^ cset lexbuf )
# 581 "rlexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_cset_rec lexbuf __ocaml_lex_state

and string lexbuf =
    __ocaml_lex_string_rec lexbuf 60
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 158 "rlexer.mll"
                ( let s = escape lexbuf in s ^ string lexbuf )
# 592 "rlexer.ml"

  | 1 ->
# 159 "rlexer.mll"
                ( "" )
# 597 "rlexer.ml"

  | 2 ->
# 160 "rlexer.mll"
                          ( newline lexbuf; "\n" ^ string lexbuf )
# 602 "rlexer.ml"

  | 3 ->
# 161 "rlexer.mll"
                ( newline lexbuf; let s = lexeme lexbuf in s ^ string lexbuf )
# 607 "rlexer.ml"

  | 4 ->
# 162 "rlexer.mll"
                ( error lexbuf "unmatched '\"'")
# 612 "rlexer.ml"

  | 5 ->
# 163 "rlexer.mll"
                ( let s = lexeme lexbuf in s ^ string lexbuf )
# 617 "rlexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and bare lexbuf =
    __ocaml_lex_bare_rec lexbuf 63
and __ocaml_lex_bare_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 166 "rlexer.mll"
                   ( newline lexbuf; 
                     let s = lexeme lexbuf in 
                     let n = String.length s - 1 in 
                       bare_indent n lexbuf )
# 631 "rlexer.ml"

  | 1 ->
# 170 "rlexer.mll"
                   ( "" )
# 636 "rlexer.ml"

  | 2 ->
# 171 "rlexer.mll"
                   ( error lexbuf "unmatched '<<<'" )
# 641 "rlexer.ml"

  | 3 ->
# 172 "rlexer.mll"
                   ( let s = lexeme lexbuf in s ^ bare_raw lexbuf )
# 646 "rlexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_bare_rec lexbuf __ocaml_lex_state

and bare_indent_spaces n expected lexbuf =
    __ocaml_lex_bare_indent_spaces_rec n expected lexbuf 67
and __ocaml_lex_bare_indent_spaces_rec n expected lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 175 "rlexer.mll"
                     ( if expected=0 then let s = lexeme lexbuf in s ^ bare_indent n lexbuf 
                       else bare_indent_spaces n (pred expected) lexbuf )
# 658 "rlexer.ml"

  | 1 ->
# 178 "rlexer.mll"
                         ( "" )
# 663 "rlexer.ml"

  | 2 ->
# 179 "rlexer.mll"
                     ( newline lexbuf; let s = lexeme lexbuf in s ^ bare_indent_spaces n n lexbuf )
# 668 "rlexer.ml"

  | 3 ->
# 180 "rlexer.mll"
                     ( if expected=0 then 
                         let s = lexeme lexbuf in 
                           s ^ bare_indent n lexbuf 
                       else
                         error lexbuf (sprintf "expecting %d spaces after newline in string" n) )
# 677 "rlexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_bare_indent_spaces_rec n expected lexbuf __ocaml_lex_state

and bare_indent n lexbuf =
    __ocaml_lex_bare_indent_rec n lexbuf 72
and __ocaml_lex_bare_indent_rec n lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 187 "rlexer.mll"
                         ( newline lexbuf; "" )
# 688 "rlexer.ml"

  | 1 ->
# 188 "rlexer.mll"
                     ( newline lexbuf; 
                       let s = lexeme lexbuf in 
                       s ^ bare_indent_spaces n n lexbuf )
# 695 "rlexer.ml"

  | 2 ->
# 191 "rlexer.mll"
                     ( error lexbuf "unmatched '>>>'" )
# 700 "rlexer.ml"

  | 3 ->
# 192 "rlexer.mll"
                     ( let s = lexeme lexbuf in s ^ bare_indent n lexbuf )
# 705 "rlexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_bare_indent_rec n lexbuf __ocaml_lex_state

and bare_raw lexbuf =
    __ocaml_lex_bare_raw_rec lexbuf 77
and __ocaml_lex_bare_raw_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 195 "rlexer.mll"
                ( "" )
# 716 "rlexer.ml"

  | 1 ->
# 196 "rlexer.mll"
                ( newline lexbuf; let s = lexeme lexbuf in s ^ bare_raw lexbuf )
# 721 "rlexer.ml"

  | 2 ->
# 197 "rlexer.mll"
                ( error lexbuf "unmatched '<<<'" )
# 726 "rlexer.ml"

  | 3 ->
# 198 "rlexer.mll"
                ( let s = lexeme lexbuf in s ^ bare_raw lexbuf )
# 731 "rlexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_bare_raw_rec lexbuf __ocaml_lex_state

and escape lexbuf =
    __ocaml_lex_escape_rec lexbuf 80
and __ocaml_lex_escape_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 201 "rlexer.mll"
                ( "'" )
# 742 "rlexer.ml"

  | 1 ->
# 202 "rlexer.mll"
                ( "\"" )
# 747 "rlexer.ml"

  | 2 ->
# 203 "rlexer.mll"
                ( "\\" )
# 752 "rlexer.ml"

  | 3 ->
# 204 "rlexer.mll"
                ( "\008" )
# 757 "rlexer.ml"

  | 4 ->
# 205 "rlexer.mll"
                ( "\010" )
# 762 "rlexer.ml"

  | 5 ->
# 206 "rlexer.mll"
                ( "\013" )
# 767 "rlexer.ml"

  | 6 ->
# 207 "rlexer.mll"
                ( "\009" )
# 772 "rlexer.ml"

  | 7 ->
# 208 "rlexer.mll"
                ( error lexbuf "in string escape sequence" )
# 777 "rlexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_escape_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 81
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 211 "rlexer.mll"
                   ( comment lexbuf; comment lexbuf )
# 788 "rlexer.ml"

  | 1 ->
# 212 "rlexer.mll"
                   ( () )
# 793 "rlexer.ml"

  | 2 ->
# 213 "rlexer.mll"
                   ( newline lexbuf; comment lexbuf )
# 798 "rlexer.ml"

  | 3 ->
# 214 "rlexer.mll"
                   ( error lexbuf "unmatched '(*'" )
# 803 "rlexer.ml"

  | 4 ->
# 215 "rlexer.mll"
                   ( comment lexbuf )
# 808 "rlexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;


let pdef = "(z,0)"

(* lenses with mnemonics: 
    - p for ()
    - b for []
    - k for key with bracing
    - i for key ignored
 *)
let letter = rx<"[a-z]">
let number = rx<"[0-9]">

let inner_l = key<letter> ","~"" / number : "0" /
let inner_i_l = letter ","~"" / number : "0" /

let p_l = "(" inner_l ")"
let b_l = "[" inner_l "]"
let pi_l = "(" inner_i_l ")"
let bi_l = "[" inner_i_l "]"
let pk_l = key<"("> inner_l key<")">
let bk_l = key<"["> inner_l key<"]">
let pki_l = key<"("> inner_i_l key<")">
let bki_l = key<"["> inner_i_l key<"]">

(* ----- A-1 ------ *)
match _ with pi_l default pdef
let a1_l = [_]
test a1_l get "(a,3)" = "(a)"
test a1_l put "(b)" "(a,3)" = "(b,3)"

(* ----- A-2 ----- *)
match _ with pi_l default pdef
let a2_l = [_]*
test a2_l get "(a,3)(b,4)" = "(a)(b)"
test a2_l put "(b)(a)(b)" "(a,3)(b,4)" = "(b,3)(a,4)(b,0)"

(* ----- A-3 ------ *)
match _ with p_l default pdef
let a3_l = [_]*
test a3_l get "(a,3)(b,4)(a,5)" = "(a)(b)(a)"
test a3_l put "(b)(c)(a)(a)" "(a,3)(b,4)(a,5)" = "(b,4)(c,0)(a,3)(a,5)"

(* ----- A-4 ------ *)
(* XXX: matching differs *)
match _ with p_l default pdef
let a4_l = ([_]{2})*
test a4_l get "(a,3)(b,4)" = "(a)(b)"
test a4_l put "(b)(a)(b)(a)" "(a,3)(b,4)" = "(b,4)(a,3)(b,0)(a,0)" 

(* ----- A-5 ----- *)
match _ with pk_l | bk_l default pdef
let a5_l = [_]*
test a5_l get "(a,3)[a,4](b,5)" = "(a)[a](b)"
test a5_l put "(b)[a](a)[b](b)" "(a,3)[a,4](b,5)" = "(b,5)[a,4](a,3)[b,0](b,0)" 

(* ----- A-6 ----- *)
(* XXX: NEEDS FIXUPS *)
(* XXX: matching differs *)
(* match _ with pk_l | bk_l default pdef *)
(* let a6_l1 = [_]* *)
(* test a6_l1 get "(a,3)[a,4](b,5)" = "(a)[a](b)" *)
(* test a6_l1 put "(b)[a](a)[b](b)" "(a,3)[a,4](b,5)" = "(b,5)[a,3](a,4)[b,0](b,0)" *)
(* *)
(* another way, if you're not into the whole brevity thing *)
(* let p_cleanup = erase "(" . delete letter "z" . erase "," . copy number . erase ")"  *)
(* let b_cleanup = erase "[" . delete letter "z" . erase "," . copy number . erase "]"  *)
(* let a6_l2 = (key k in ((<"n" : p_l : p_cleanup >) |(<"n" : b_l : b_cleanup >)))* *)
(* test a6_l2 get "(a,3)[a,4](b,5)" = "(a)[a](b)" *)
(* test a6_l2 put "(b)[a](a)[b](b)" "(a,3)[a,4](b,5)" = "(b,5)[a,3](a,4)[b,0](b,0)"  *)

(* ----- A-7 ----- *)
match _ with pk_l | bk_l default pdef
let a7_l = [_]*
(* XXX: not diffy matching *)
test a7_l get "(a,3)[a,4](b,5)[c,6](a,7)" = "(a)[a](b)[c](a)"
test a7_l put "(b)(c)(a)(a)[a]" "(a,3)[a,4](b,5)[c,6](a,7)" = "(b,5)(c,0)(a,3)(a,7)[a,4]"

(* examples from A-6 recapitulated here *)
test a7_l get "(a,3)[a,4](b,5)" = "(a)[a](b)"
test a7_l put "(b)[a](a)[b](b)" "(a,3)[a,4](b,5)" = "(b,5)[a,4](a,3)[b,0](b,0)" 

(* ----- A-8 ----- *)
(* XXX: matching differs; since we don't have diff anymore, this is just like A-7 *)
match _ with pk_l | bk_l default pdef
let a8_l = [_]*
test a8_l get "(a,3)[b,4](b,5)[a,6](a,7)[c,8]" = "(a)[b](b)[a](a)[c]"
test a8_l put "(b)[b](a)[c]" "(a,3)[b,4](b,5)[a,6](a,7)[c,8]" = "(b,5)[b,4](a,3)[c,8]"

(* ----- B-1 ----- *)
match _ with p_l | b_l default pdef
let b1_l = [_]
test b1_l get "(a,3)" = "(a)"
test b1_l put "[a]" "(a,3)" = "[a,0]"

(* ----- B-2 ----- *)
(* XXX: NEEDS FIXUPS *)
(* match _ with pi_l | bi_l default pdef  *)
(* let b2_l = [_] *)
(* test b2_l get "(a,3)" = "(a)" *)
(* test b2_l put "[b]" "(a,3)" = "[b,3]" *)

(* ----- B-3 ----- *)
(* XXX: NEEDS FIXUPS *)
(* match _ with pi_l | bi_l default pdef *)
(* let b3_l = [_] *)
(* test b3_l get "(a,3)" = "(a)" *)
(* test b3_l put "[a]" "(a,3)" = "[a,3]" *)
(* test b3_l put "[b]" "(a,3)" = "[b,0]" *)

(* ----- B-4 ----- *)
match _ with pi_l | bi_l default pdef
let b4_l = [_] | [_]{2}
test b4_l get "(a,3)" = "(a)"
test b4_l put "[a][a]" "(a,3)" = "[a,0][a,0]"

test b4_l get "[a,3][b,4]" = "[a][b]"
test b4_l put "(a)" "[a,3][b,4]" = "(a,0)"

(* ----- B-5 ----- *)
match _ with pi_l | bi_l default pdef
let b5_l = [_] | [_]*
test b5_l get "(a,3)" = "(a)"
test b5_l put "[a][a][b]" "(a,3)" = "[a,0][a,0][b,0]"

test b5_l get "[a,3][b,4][c,5]" = "[a][b][c]"
test b5_l put "(a)" "[a,3][b,4][c,5]" = "(a,0)"

(* ----- B-6 ----- *)
match _ with pi_l | bi_l default pdef
let b6_l = [_]{2} | [_]{2}
test b6_l get "(a,3)(a,4)" = "(a)(a)"
test b6_l put "[a][a]" "(a,3)(a,4)" = "[a,0][a,0]"
test b6_l get "[a,3][b,4]" = "[a][b]"
test b6_l put "(b)(a)" "[a,3][b,4]" = "(b,0)(a,0)"

(* ----- B-7 ----- *)
match _ with pi_l | bi_l default pdef
let b7_l = [_]* | [_]*
test b7_l get "(a,3)(a,4)(b,5)" = "(a)(a)(b)"
test b7_l put "[a][a]" "(a,3)(a,4)(b,5)" = "[a,0][a,0]"
test b7_l get "[a,3][b,4]" = "[a][b]"
test b7_l put "(b)(a)(c)" "[a,3][b,4]" = "(b,0)(a,0)(c,0)"

(* ----- B-8 ----- *)
(* XXX: NEEDS FIXUPS *)
(* match _ with pi_l | bi_l default pdef *)
(* let b8_l = [_] | [_]{2} *)
(* test b8_l get "(a,3)" = "(a)" *)
(* test b8_l put "[b][c]" "(a,3)" = "[b,3][c,0]" *)
(* test b8_l get "[a,3][a,4]" = "[a][a]" *)
(* test b8_l put "(b)" "[a,3][a,4]" = "(b,3)" *)

(* ----- B-9 ----- *)
(* XXX: NEEDS FIXUPS *)
(* match _ with pi_l | bi_l default pdef *)
(* let b9_l = [_] | [_]* *)
(* test b9_l get "(a,3)" = "(a)" *)
(* test b9_l put "[b][c][d]" "(a,3)" = "[b,3][c,0][d,0]" *)
(* test b9_l get "[a,3][a,4][b,5]" = "[a][a][b]" *)
(* test b9_l put "(b)" "[a,3][a,4][b,5]" = "(b,3)" *)

(* ----- B-10 ----- *)
(* XXX: NEEDS FIXUPS *)
(* match _ with pi_l | bi_l default pdef *)
(* let b10_l = [_]{2} | [_]{2} *)
(* test b10_l get "(a,3)(b,4)" = "(a)(b)" *)
(* test b10_l put "[c][d]" "(a,3)(b,4)" = "[c,3][d,4]" *)

(* ----- B-11 ----- *)
(* XXX: NEEDS FIXUPS *)
(* match _ with pi_l | bi_l default pdef *)
(* let b11_l = [_]* | [_]* *)
(* test b11_l get "(a,3)(b,4)(c,5)" = "(a)(b)(c)" *)
(* test b11_l put "[c][d][e]" "(a,3)(b,4)(c,5)" = "[c,3][d,4][e,5]" *)

(* ----- B-12 ----- *)
(* XXX: NEEDS FIXUPS, also a match that doesn't empty out
   dictionary. leaving it on the side for now *)

(* test b12_l get "(a,3)" = "(a)" *)
(* test b12_l put "[b][c]" "(a,3)" = "[b,3][c,3]" *)
(* test b12_l get "[a,3][a,4]" = "[a][a]" *)
(* test b12_l put "(b)" "[a,3][a,4]" = "(b,3)" (\* or (b,0) *\) *)

(* ----- B-13 ----- *)
(* same issue as B-12 *)
(* test b13_l get "(a,3)" = "(a)" *)
(* test b13_l put "[b][c][d]" "(a,3)" = "[b,3][c,3][d,3]" *)
(* test b13_l get "[a,3][a,4][b,5]" = "[a][a][b]" *)
(* test b13_l put "(b)" "[a,3][a,4][b,5]" = "(b,3)" (\* or (b,0) *\) *)

(* ----- B-14 ----- *)
(* XXX: NEEDS FIXUPS *)
(* match _ with pi_l | bi_l default pdef *)
(* let b14_l = [_] | [_]{2} *)
(* test b14_l get "(a,3)" = "(a)" *)
(* test b14_l put "[b][c]" "(a,3)" = "[b,0][c,0]" *)
(* test b14_l put "[b][a]" "(a,3)" = "[b,0][a,3]" *)
(* test b14_l put "[a][a]" "(a,3)" = "[a,3][a,0]" *)

(* test b14_l get "[a,3][b,4]" = "[a][b]" *)
(* test b14_l put "(a)" "[a,3][b,4]" = "(a,3)" *)
(* test b14_l put "(b)" "[a,3][b,4]" = "(b,4)" *)
(* test b14_l put "(c)" "[a,3][b,4]" = "(c,0)" *)

(* ----- B-15 ----- *)
(* match _ with pi_l | bi_l default pdef *)
(* let b15_l = [_] | [_]* *)
(* test b15_l get "(a,3)" = "(a)" *)
(* test b15_l put "[b][c][d]" "(a,3)" = "[b,0][c,0][d,0]" *)
(* test b15_l put "[b][a]" "(a,3)" = "[b,0][a,3]" *)
(* test b15_l put "[a][a]" "(a,3)" = "[a,3][a,0]" *)

(* test b15_l get "[a,3][b,4]" = "[a][b]" *)
(* test b15_l put "(c)" "[a,3][b,4]" = "(c,0)" *)
(* test b15_l put "(a)" "[a,3][b,4]" = "(a,3)" *)
(* test b15_l put "(b)" "[a,3][b,4]" = "(b,4)" *)

(* ----- B-16 ----- *)
(* match _ with pi_l | bi_l default pdef *)
(* let b16_l = [_]{2} | [_]{2} *)
(* test b16_l get "(a,3)(b,4)" = "(a)(b)" *)
(* test b16_l put "[c][d]" "(a,3)(b,4)" = "[c,0][d,0]" *)
(* test b16_l put "[b][a]" "(a,3)(b,4)" = "[b,4][a,3]"  (\* XXX: matching differs *\) *)
(* test b16_l put "[b][b]" "(a,3)(b,4)" = "[b,4][b,0]" *)

(* ----- B-17 ----- *)
(* match _ with pi_l | bi_l default pdef *)
(* let b17_l = [_]* | [_]* *)
(* test b17_l get "(a,3)(b,4)" = "(a)(b)" *)
(* test b17_l put "[c][d]" "(a,3)(b,4)" = "[c,0][d,0]" *)
(* test b17_l put "[b][a]" "(a,3)(b,4)" = "[b,4][a,3]" (\* XXX: matching differs *\) *)
(* test b17_l put "[b][b]" "(a,3)(b,4)" = "[b,4][b,0]" *)

(* ----- C-1 ----- *)
(* XXX: NEEDS FIXUPS *)
(* match _ with "(" letter ")" | "["~"x" / letter : "0" / "]"~"" default pdef *)
(* let c1_l = [_] *)
(* test c1_l get "(a)" = "(a)" *)
(* test c1_l put "(b)" "(a)" = "(b)" *)
(* test c1_l put "x" "(a)" = "[a]" *)
(* test c1_l get "[a]" = "x" *)
(* test c1_l put "x" "[a]" = "[a]" *)
(* test c1_l put "(b)" "[a]" = "(b)" *)

(* ----- C-2 ----- *)
(* test c2_l get "aaa" = "eee" *)
(* test c2_l put "ffff" "aaa" = "cccc" *)
(* test c2_l get "bbb" = "eee" *)
(* test c2_l put "ff" "bbb" = "dd"  *)

(* ----- C-5 ----- *)
(* default "x" = "0" *)
(* default "y" = "0" *)
(* default "z" = "0" *)

(* let mk_l (a:string) (b:string) =  *)
(*   copy (rx a) . erase "(" . <a:delete number "0"> . erase ")" .  *)
(*   copy (rx b) . erase "(" . <b:delete number "0"> . erase ")" *)

(* let xy_l = mk_l "x" "y" *)
(* let xz_l = mk_l "x" "z" *)
(* let yz_l = mk_l "y" "z" *)
(* let c5_l = xy_l | xz_l | yz_l *)

(* test c5_l get "x(3)y(4)" = "xy" *)
(* test c5_l put "xz" "x(3)y(4)" = "x(3)z(0)" *)
(* test c5_l get "x(3)y(4)" = "xy" *)
(* test c5_l put "yz" "x(3)y(4)" = "y(4)z(0)" *)
(* test c5_l get "x(3)z(4)" = "xz" *)
(* test c5_l put "yz" "x(3)z(4)" = "y(0)z(4)" *)

(* (\* ----- C-6 ----- *\) *)
(* let c6_l = (key k in ( *)
(*               "["  *)
(*             . key letter *)
(*             . "," ~ "]"  *)
(*             . (pad "xy" . xy_l | pad "xz" . xz_l | pad "yz" . yz_l)  *)
(*             . erase "]"))* *)

(* test c6_l get "[a,x(3)y(4)][a,x(5)z(6)][b,x(7)y(8)]"  *)
(*           = "[a]xy[a]xz[b]xy" *)
(* test c6_l put "[a]xz[a]xy[c]xy[b]yz" *)
(*             "[a,x(3)y(4)][a,x(5)z(6)][b,x(7)y(8)]" *)
(*           = "[a,x(5)z(6)][a,x(3)y(4)][c,x(0)y(0)][b,y(0)z(0)]"  *)
(* (\* XXX: differs; not sure how to get that behavior *\) *)

(* (\* ----- C-7 ----- *\) *)
(* let c7_l = (key k in( *)
(*               "["  *)
(*             . key letter *)
(*             . "," ~ "]"  *)
(*             . (xy_l | xz_l | yz_l)  *)
(*             . erase "]"))* *)

(* test c7_l put "[a]xz[a]xy[c]xy[b]yz" *)
(*             "[a,x(3)y(4)][a,x(5)z(6)][b,x(7)y(8)]" *)
(*           = "[a,x(3)z(6)][a,x(5)y(4)][c,x(0)y(0)][b,y(8)z(0)]" *)


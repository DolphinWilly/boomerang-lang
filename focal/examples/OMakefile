clean:
	$(CLEAN)

.PHONY: defaulttest

.SUBDIRS: $(subdirs P, .)
   RESULT = harmonize-$(basename $(absname $(CWD)))

   OCAML_LIBS += \
     $(UBASEDIR)/ubase \
     $(HBASEDIR)/hbase \
     $(GENEPIDIR)/genepi \
     $(CSVDIR)/csv \
     $(SRCDIR)/harmony

   OCAMLINCLUDES += \
     $(UBASEDIR) \
     $(HBASEDIR) \
     $(EXTERNDIR)/genepi/ocaml \
     $(EXTERNDIR)/ocaml-csv-1.0.3 \
     $(SRCDIR)

   LOCALFCLFILES = $(glob *.fcl)
   GENERATED_FILES = 
   EXTRAS = 
   if $(equal $(LOCALFCLFILES), *.fcl)
       LOCALFCLFILES = 
       export
   if $(not $(equal $(LOCALFCLFILES)x, x))
       defaulttest: $(RESULT)$(EXE)
         ./$(RESULT)$(EXE) $(HARMONY_FLAGS) $(LOCALFCLFILES)
   # Override definition of 'rule' function so that we can see what rules 
   # get defined by the inner OMakefile
   old-rule = $(rule)
   NEWTARGETS[] =
   rule(multiple, target, pattern, sources, options, body) =
       NEWTARGETS[] += $(target)
       old-rule($(multiple), $(target), $(pattern), $(sources), $(options), $(body))
       export
   # Load inner OMakefile
   if $(file-exists OMakefile)
       include OMakefile
       export
   rule = $(old-rule)
   # Define some targets, in light of what it gave us
   if $(not $(mem test, $(NEWTARGETS)))
       test: defaulttest
   if $(file-exists $(RESULT).ml)
       OCamlProgram($(RESULT), $(rootname $(GENERATED_FILES)) $(EXTRAS) $(RESULT))
   else
       $(RESULT)$(EXE): $(SRCDIR)/harmony$(EXE)
	  if $(file-exists $@)
            rm -f $@
          ln-or-cp $< $@
   clean:
	$(CLEAN) $(RESULT) $(GENERATED_FILES)
   LocalOCamlGeneratedFiles($(GENERATED_FILES))
   .DEFAULT: $(BINDIR)/$(RESULT)$(EXE)
   $(BINDIR)/$(RESULT)$(EXE): $(BINDIR)/harmony$(EXE) $(RESULT)$(EXE)
	if $(not $(file-exists $(BINDIR)))
		mkdir $(BINDIR)
	if $(file-exists $(RESULT).ml)
		cp $(RESULT)$(EXE) $@
	else
		ln-or-cp $(BINDIR)/harmony$(EXE) $@

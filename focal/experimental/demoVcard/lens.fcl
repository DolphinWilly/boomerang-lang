module Lens=

open ToList
open Concat

let value: schema = { `Xml.PCDATA = Any::[] }

let hoist_optional_pcdata: lens = 
  acond {`Xml.PCDATA = Value} Value
    (hoist Xml.PCDATA)
    (acond {`Xml.PCDATA = [Value]} [Value]
       (hoist Xml.PCDATA)
       (id) )     

let lensCommon: lens = 
  acond value ({ ! = {} })
  (hoist Xml.PCDATA; List.hd [])    
    (map (List.hd []; hoist Xml.CHILDREN; List.flatten;
	  plunge "_"; wmap {"_" -> lensCommon}; hoist "_" ) )

let explode_aux: lens = 
  List.map ( acond ([]) ([])
	     (id)
	     (List.hd []; List.explode ) )

let lensAdr: lens = 
  map (
  acond ( { ! = {! = Any} } ) ( { ! = {! = { ! = Any} } } ) 
    ( plunge "_"; wmap {"_" -> lensAdr}; hoist "_")
    ( map ( to_list7 "STREET" "EXTADR" "LOCALITY" "POBOX" "REGION" "PCODE" "CTRY";
      explode_aux; concat; List.implode) ) )

let lensOrg: lens =
  List.hd []; 
  hoist Xml.CHILDREN; 
  Xml.flatten;
  fork {ORGNAME}
    ( Xml.squash_flattened; map hoist_optional_pcdata)
    ( map ( List.map (hoist_optional_pcdata )));
  to_list2 "ORGNAME" "ORGUNIT"; 
  fork {`List.TL}
    ( acond {`List.TL = [[]]} {`List.TL = [[]]}
	( id )
	( map (List.hd []; List.hd [] )))
    (id);
  explode_aux; concat; List.implode
        
let xml: lens = 
  List.hd [];(*we use List.map if there are more than 2 Vcard *)
  map ( hoist Xml.CHILDREN; List.flatten;
	fork {"AGENT","ORG"}
	  id
	  ( lensCommon );  (*take care of "CLASS"*)
	wmap { "AGENT" -> ( List.hd[]; hoist Xml.CHILDREN; 
			    acond ( {"EXTVAL" = Any }::[] ) ({"EXTVAL" = Any})  
		              (List.hd []; map (hoist Xml.CHILDREN; List.hd []; hoist Xml.PCDATA) ) 
		              (xml) ),	    
	  "ADR" -> ( lensAdr ),
	    "ORG" -> ( lensOrg ),
	      "N" -> ( to_list5 "PREFIX" "GIVEN" "MIDDLE" "FAMILY" "SUFFIX" ; 
		       explode_aux; concat; List.implode )
	     };
	(*make the process of synchronization become much faster*)
	xfork {"BDAY", "DESC","JABBERID","MAILER","NICKNAME", 
	       "NOTE","SORT-STRING","REV","ROLE","PRODID","TITLE","UID","URL","TZ"}
	  {"INFO"}
	  (plunge "INFO"; map ( to_list14 "BDAY" "DESC" "JABBERID" "MAILER" "NICKNAME" 
				  "NOTE" "SORT-STRING" "REV" "ROLE" "PRODID" "TITLE" "UID" "URL" "TZ";
				explode_aux; concat; List.implode) )
	  (id)(*;
	pivot "FN"*)
       )

let vcf: lens =
  List.hd [];
  map (hoist Xml.CHILDREN; List.flatten; 
       fork {"AGENT"}
	 ( map ( List.hd []; hoist Xml.CHILDREN; vcf) )
	 ( lensCommon );
       (*make the process of synchronization become much faster*)
       xfork {"BDAY", "DESC","JABBERID","MAILER","NICKNAME", 
	      "NOTE","SORT-STRING","REV","ROLE","PRODID","TITLE","UID","URL","TZ"}
	 {"INFO"}
	 (plunge "INFO"; map ( to_list14 "BDAY" "DESC" "JABBERID" "MAILER" "NICKNAME" 
				 "NOTE" "SORT-STRING" "REV" "ROLE" "PRODID" "TITLE" "UID" "URL" "TZ";
			       explode_aux; concat; List.implode) )
	 (id)(*;
       pivot "FN"*)
      )

module Concat =

let concat: lens = 
 
  let concat_aux: lens = 
    (xfork {`(List.HD)} {`(List.HD), "x"} 
      (hoist List.HD; rename List.TL "x") 
      id;
    xfork {"x", `(List.TL)} {`(List.TL)} 
      (rename "x" List.HD; plunge List.TL; wmap {`(List.TL) -> concat1}) 
      id) 

  and concat1: lens =
      ( acond ( Any :: [] ) ( List.T {!\" " = Any} )
	  (focus List.HD {`(List.TL) = []})
	  (acond ([]::Any) ({" "}::Any) 
	      (fork {`(List.HD)} 
		 (map (rename List.NIL " ")) 
		 (wmap {`(List.TL) -> concat2}))
	      (plunge "()"; wmap { "()" -> concat_aux}; hoist "()")) )

  and concat2: lens = 
    (acond ([]) ({" "})
      ( rename List.NIL " ")
      (acond (Any::[]) ( List.T {!\" " = Any} ) 
         (focus List.HD {`(List.TL) = []} )
         ( plunge "()"; wmap { "()" -> concat1}; hoist "()")))
  
in concat1

test concat / [] = error
test concat / [[]] = []
test concat / [[],[],[],[]] = [{" "}, {" "}, {" "}]
test concat / [[{a}]] = [{a}]
test concat / [[],[{a}],[],[{b}],[{c}],[],[]] = [{" "}, {a}, {" "},{" "}, {b}, {" "}, {c}, {" "}, {" "}]
test concat / [[{u},{n},{i},{v}],[{o},{f}],[{p},{e},{n},{n}]] = [{u},{n},{i},{v},{" "},{o},{f},{" "},{p},{e},{n},{n}]
test concat \ [] missing = [[]]
test concat \ [{" "}] missing = [[],[]]
test concat \ [{" "}, {" "}, {" "}] missing = [[],[],[],[]]
test concat \ [{u},{n},{i},{v},{" "},{o},{f},{" "},{p},{e},{n},{n}] [[{u},{n},{i},{v}]] = [[{u},{n},{i},{v}],[{o},{f}],[{p},{e},{n},{n}]] 
test concat \ [{u},{n},{i},{v},{" "},{o},{f},{" "},{p},{e},{n},{n}] missing = [[{u},{n},{i},{v}],[{o},{f}],[{p},{e},{n},{n}]]
test concat \ [{" "}, {a}, {" "},{" "}, {b}, {" "}, {c}, {" "}, {" "}] missing =  [[],[{a}],[],[{b}],[{c}],[],[]]
test concat \  [{" "}, {a}, {" "},{" "}, {b}, {" "}, {c}, {" "}, {" "}] [[{a}],[{b}]] =  [[],[{a}],[],[{b}],[{c}],[],[]]
